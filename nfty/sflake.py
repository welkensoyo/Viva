#https://docs.snowflake.com/developer-guide/python-connector/python-connector
import traceback
from snowflake.connector import connect, DictCursor
import arrow


qry = {
    'patients_seen' : '''
SELECT YEAR(s.SCHEDULE_DATE) as YEAR, MONTH(S.SCHEDULE_DATE) AS MONTH, TO_CHAR(s.SCHEDULE_DATE,'MON') AS MONTH_ABBR,
    c.CG_EMPLOYEEID AS USERID, c.CG_FIRSTNAME AS FIRSTNAME, c.CG_LASTNAME AS LASTNAME, c.CG_DISCIPLINENAME as DISCIPLINE,
    COUNT(DISTINCT(s.s_CLIENT_ID)) as PATIENTS
FROM KANTIME_PROD_DB.HH_REPORT_DS.CAREGIVERMASTER_SVW as c
INNER JOIN KANTIME_PROD_DB.HH_REPORT_DS.SCHEDULEMASTER_SVW as s ON c.CG_EMPLOYEEID = s.S_CAREGIVER_ID
WHERE s.S_ACTUAL_END IS NOT NULL
-- AND s.SCHEDULE_DATE >= DATEADD('month', -12, CURRENT_DATE)
--AND (s.IS_SCHEDULE_BILLED = true or s.IS_SCHEDULE_PAID = true)
GROUP BY c.CG_EMPLOYEEID, c.CG_FIRSTNAME, c.CG_LASTNAME, c.CG_DISCIPLINENAME, TO_CHAR(s.SCHEDULE_DATE,'MON'), YEAR(s.SCHEDULE_DATE), MONTH(S.SCHEDULE_DATE)
ORDER BY 3 DESC;''',

    'employee_metrics' : ''' 
SELECT YEAR(s.SCHEDULE_DATE) as YEAR, MONTH(S.SCHEDULE_DATE) AS MONTH, TO_CHAR(s.SCHEDULE_DATE,'MON') AS MONTH_ABBR,
    --CAST(DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM s.SCHEDULE_DATE), DATE_TRUNC('DAY', s.SCHEDULE_DATE)) as VARCHAR) AS WEEK_OF,
    c.CG_EMPLOYEEID AS USERID, c.CG_FIRSTNAME AS FIRSTNAME, c.CG_LASTNAME AS LASTNAME, c.CG_DISCIPLINENAME as DISCIPLINE,
    SUM(s.S_ACTUAL_HOURS) as HOURS,
    ROUND(SUM(IFF(s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS * S.S_BILL_RATE, 0)),2) AS BILLED,
    ROUND(SUM(IFF(NOT s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS * S.S_BILL_RATE, 0)),2) AS UN_BILLED,
    ROUND(SUM(s.S_ACTUAL_HOURS * S.S_BILL_RATE),2) AS TOTAL,
    ROUND(SUM(S.S_OT_PAYROLLAMOUNT)) as OT,
    ROUND(SUM(S.S_OT_HOURS)) as OT_HOURS
FROM KANTIME_PROD_DB.HH_REPORT_DS.SCHEDULEMASTER_SVW AS s
JOIN KANTIME_PROD_DB.HH_REPORT_DS.CAREGIVERMASTER_SVW as c ON s.S_CAREGIVER_ID = c.CG_EMPLOYEEID
WHERE s.S_ACTUAL_END IS NOT NULL
AND s.S_WEEKSTART >= DATEADD('month', -24, CURRENT_DATE())
GROUP BY c.CG_EMPLOYEEID, c.CG_FIRSTNAME, c.CG_LASTNAME, c.CG_DISCIPLINENAME, 
--CAST(DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM s.SCHEDULE_DATE), DATE_TRUNC('DAY', s.SCHEDULE_DATE)) as VARCHAR), 
YEAR(s.SCHEDULE_DATE), MONTH(S.SCHEDULE_DATE), TO_CHAR(s.SCHEDULE_DATE,'MON')
ORDER BY 3 DESC;''',

    'new_patients': '''
SELECT YEAR(s.SCHEDULE_DATE) as YEAR, MONTH(S.SCHEDULE_DATE) AS MONTH, TO_CHAR(s.SCHEDULE_DATE,'MON') AS MONTH_ABBR,
    --CAST(DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM s.SCHEDULE_DATE), DATE_TRUNC('DAY', s.SCHEDULE_DATE)) as VARCHAR) AS WEEK_OF,
    c.CG_EMPLOYEEID AS USERID, c.CG_FIRSTNAME AS FIRSTNAME, c.CG_LASTNAME AS LASTNAME, c.CG_DISCIPLINENAME as DISCIPLINE,
    COUNT(DISTINCT(s.S_CLIENT_ID)) as PATIENTS
FROM KANTIME_PROD_DB.HH_REPORT_DS.SCHEDULEMASTER_SVW AS s
JOIN KANTIME_PROD_DB.HH_REPORT_DS.CAREGIVERMASTER_SVW as c ON s.S_CAREGIVER_ID = c.CG_EMPLOYEEID
JOIN KANTIME_PROD_DB.HH_REPORT_DS.CLIENTMASTER_SVW as u ON u.CLIENT_ID = s.S_CLIENT_ID
WHERE  s.S_ACTUAL_END IS NOT NULL
AND s.SCHEDULE_DATE >= DATEADD('month', -24, CURRENT_DATE)
AND WEEK(u.CLIENT_SOC_DATE) = WEEK(s.SCHEDULE_DATE)
GROUP BY c.CG_EMPLOYEEID, c.CG_FIRSTNAME, c.CG_LASTNAME, c.CG_DISCIPLINENAME, 
--CAST(DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM s.SCHEDULE_DATE), DATE_TRUNC('DAY', s.SCHEDULE_DATE)) as VARCHAR), 
YEAR(s.SCHEDULE_DATE), MONTH(S.SCHEDULE_DATE), TO_CHAR(s.SCHEDULE_DATE,'MON')
ORDER BY 3 DESC;''',

    'collections': '''
SELECT YEAR(c.CLAIM_PAID_DATE) as YEAR, MONTH(CLAIM_PAID_DATE) AS MONTH, TO_CHAR(CLAIM_PAID_DATE,'MON') AS MONTH_ABBR,
       --DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM CLAIM_PAID_DATE), DATE_TRUNC('DAY', CLAIM_PAID_DATE)) as WEEK_OF,
       ROUND(SUM(CLAIM_PAIDAMOUNT),2) as CLAIM_PAIDAMOUNT,
       ROUND(SUM(CLAIM_BALANCE),2) as BALANCE
FROM KANTIME_PROD_DB.HH_REPORT_DS.CLAIMSMASTER_SVW as c
WHERE DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM CLAIM_PAID_DATE), DATE_TRUNC('DAY', CLAIM_PAID_DATE)) >= DATEADD('month', -24, CURRENT_DATE())
GROUP BY YEAR(c.CLAIM_PAID_DATE), MONTH(CLAIM_PAID_DATE), TO_CHAR(CLAIM_PAID_DATE,'MON')
--DATEADD(DAY, -1 - EXTRACT(DAYOFWEEK FROM CLAIM_PAID_DATE), DATE_TRUNC('DAY', CLAIM_PAID_DATE)), 
ORDER BY 3 DESC;''',

    'nurse_hours': '''SELECT
    -- Formatted date string 'month-year'
    MONTH(s.SCHEDULE_DATE) as MONTH,
    TO_CHAR(SCHEDULE_DATE,'MON') AS MONTH_ABBR,
    -- c.CG_DISCIPLINENAME as DISCIPLINE,

    -- Sum values for the current year
    SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE), s.S_ACTUAL_HOURS, NULL)) as HOURS_THIS_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE) AND s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS * S.S_BILL_RATE, NULL)),2) AS BILLED_THIS_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE) AND NOT s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS * S.S_BILL_RATE, NULL)),2) AS UN_BILLED_THIS_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE), s.S_ACTUAL_HOURS * S.S_BILL_RATE, NULL)),2) AS TOTAL_THIS_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE), S.S_OT_PAYROLLAMOUNT, NULL))) as OT_THIS_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE), S.S_OT_HOURS, NULL))) as OT_HOURS_THIS_YEAR,
    ROUND((SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE), s.S_OT_HOURS, NULL)) / NULLIF(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE) AND s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS, NULL)), 0)) * 100, 2) AS "OT_%_THIS_YEAR",

    -- Sum values for the last year
    SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1, s.S_ACTUAL_HOURS, NULL)) as HOURS_LAST_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1 AND s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS * S.S_BILL_RATE, NULL)),2) AS BILLED_LAST_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1 AND NOT s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS * S.S_BILL_RATE, NULL)),2) AS UN_BILLED_LAST_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1, s.S_ACTUAL_HOURS * S.S_BILL_RATE, NULL)),2) AS TOTAL_LAST_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1, S.S_OT_PAYROLLAMOUNT, NULL))) as OT_LAST_YEAR,
    ROUND(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1, S.S_OT_HOURS, NULL))) as OT_HOURS_LAST_YEAR,
    ROUND((SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1, s.S_OT_HOURS, NULL)) / NULLIF(SUM(IFF(YEAR(s.SCHEDULE_DATE) = YEAR(CURRENT_DATE)-1 AND s.IS_SCHEDULE_BILLED, s.S_ACTUAL_HOURS, NULL)), 0)) * 100, 2) AS "OT_%_LAST_YEAR"

FROM KANTIME_PROD_DB.HH_REPORT_DS.SCHEDULEMASTER_SVW AS s
JOIN KANTIME_PROD_DB.HH_REPORT_DS.CAREGIVERMASTER_SVW as c
    ON s.S_CAREGIVER_ID = c.CG_EMPLOYEEID
WHERE s.S_ACTUAL_END IS NOT NULL
AND s.S_ACTUAL_END >= DATEADD('year', -2, DATE_TRUNC('year', CURRENT_DATE))
{}
-- GROUP BY Discipline and 'month-year' of the current and previous years
GROUP BY  MONTH(s.SCHEDULE_DATE), TO_CHAR(SCHEDULE_DATE,'MON') --c.CG_DISCIPLINENAME,
ORDER BY 1 DESC;''',
    "acuity": '''SELECT a.YEAR, b.year, a.MONTH, UPPER(a.MONTH_ABBR) as MONTH_ABBR, a.LOW_HOURS, a.HIGH_HOURS, a.HOURS, a.HIGH_HOURS/a.HOURS * 100 as "HIGH_ACUITY_%",
b.HIGH_HOURS/b.HOURS * 100 AS "PRIOR_YEAR_%", b.LOW_HOURS AS PRIOR_YEAR_LOW_HOURS, b.HIGH_HOURS AS PRIOR_YEAR_HIGH_HOURS, b.HOURS AS PRIOR_YEAR_HOURS
FROM (SELECT
    YEAR(s.SCHEDULE_DATE) as YEAR,
    MONTH(S.SCHEDULE_DATE) AS MONTH,
    TO_CHAR(s.SCHEDULE_DATE,'MON YY') AS MONTH_ABBR,
    SUM(CASE WHEN sc.SEVICE_CODE LIKE '%Mid Tech%' OR sc.SEVICE_CODE LIKE '%HiTech' THEN s.S_ACTUAL_HOURS ELSE 0 END) as HIGH_HOURS,
    SUM(CASE WHEN sc.SEVICE_CODE NOT LIKE '%Mid Tech%' AND sc.SEVICE_CODE NOT LIKE '%HiTech' THEN s.S_ACTUAL_HOURS ELSE 0 END) as LOW_HOURS,
    SUM(s.S_ACTUAL_HOURS) as HOURS
FROM KANTIME_PROD_DB.HH_REPORT_DS.SCHEDULEMASTER_SVW as s
JOIN KANTIME_PROD_DB.HH_REPORT_DS.SERVICECODESMASTER_SVW as sc ON sc.SERVICE_ID = s.S_SERVICE_CODE_ID
WHERE s.S_ACTUAL_END IS NOT NULL
AND s.S_ACTUAL_END >= DATEADD('year', -1, CURRENT_DATE)
GROUP BY YEAR(s.SCHEDULE_DATE), MONTH(S.SCHEDULE_DATE), TO_CHAR(s.SCHEDULE_DATE,'MON YY')) as a
LEFT JOIN
(SELECT
    YEAR(s.SCHEDULE_DATE) as YEAR,
    MONTH(S.SCHEDULE_DATE) AS MONTH,
    TO_CHAR(s.SCHEDULE_DATE,'MON YY') AS MONTH_ABBR,
    SUM(CASE WHEN sc.SEVICE_CODE LIKE '%Mid Tech%' OR sc.SEVICE_CODE LIKE '%HiTech' THEN s.S_ACTUAL_HOURS ELSE 0 END) as HIGH_HOURS,
    SUM(CASE WHEN sc.SEVICE_CODE NOT LIKE '%Mid Tech%' AND sc.SEVICE_CODE NOT LIKE '%HiTech' THEN s.S_ACTUAL_HOURS ELSE 0 END) as LOW_HOURS,
    SUM(s.S_ACTUAL_HOURS) as HOURS
FROM KANTIME_PROD_DB.HH_REPORT_DS.SCHEDULEMASTER_SVW as s
JOIN KANTIME_PROD_DB.HH_REPORT_DS.SERVICECODESMASTER_SVW as sc ON sc.SERVICE_ID = s.S_SERVICE_CODE_ID
WHERE s.S_ACTUAL_END IS NOT NULL
AND s.SCHEDULE_DATE >= DATE_TRUNC('MONTH', DATEADD('year', -2, CURRENT_DATE))
AND s.SCHEDULE_DATE < DATEADD('year', -1, LAST_DAY(CURRENT_DATE))
GROUP BY YEAR(s.SCHEDULE_DATE), MONTH(S.SCHEDULE_DATE), TO_CHAR(s.SCHEDULE_DATE,'MON YY')) as b ON a.MONTH = b.MONTH AND a.YEAR = b.YEAR+1
ORDER BY a.YEAR, a.MONTH'''
}

report_dict = {
    "Charts": 'charts',
    "Patient Metrics": 'patients_seen',
    "Employee Metrics": 'employee_metrics',
    "New Patients": 'new_patients',
    "Collections": 'collections',
    "Acuity": 'acuity'
}

d_cols = ('HOURS', 'BILLED', 'TOTAL' )

class API:
    def __init__(self):
        self.conn = connect(
            user='daas_reader@vivapeds.com',
            password='S8cuNRnbWJ',
            account='kantime-kt_viva',
            warehouse='VIVA_WH',
            database='KANTIME_PROD_DB'
        )
        self.schema = 'HH_REPORT_DS.'

    def table_info(self, table):
        cur = self.conn.cursor()
        try:
            return [(x[0], x[1]) for x in cur.execute(f"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '{table}'")]
        except Exception as e:
            traceback.print_exc()
        finally:
            cur.close()

    def get(self, table):
        if '.' not in table:
            table = self.schema + table
        cur = self.conn.cursor(DictCursor)
        return [x for x in cur.execute(f'select * from {table}')]

    def fetchall(self, qry):
        cur = self.conn.cursor(DictCursor)
        return cur.execute(qry)

    def fetchone(self, qry):
        cur = self.conn.cursor(DictCursor)
        return cur.execute(qry)[0]

    def charts(self):
        q = qry.get('nurse_hours')
        nonnurses = q.format('''AND c.CG_DISCIPLINENAME NOT IN ('RN','LVN') ''')
        nurses = q.format('''AND c.CG_DISCIPLINENAME IN ('RN','LVN') ''')
        acuity = qry.get('acuity')
        return self.fetchall(nurses), self.fetchall(nonnurses), self.fetchall(acuity)

    def report(self, reportname):
        q = qry.get(reportname)
        if reportname == 'charts':
            q = q.format('''AND c.CG_DISCIPLINENAME IN ('RN','LVN') ''')
        if not q:
            return self.fetchall(qry['patients_seen'])
        return self.fetchall(q)

def create_month_year_index():
    index_dict = {}
    # Start from current month minus 2 years
    arrow_obj = arrow.now().floor('month').shift(years=-2)

    for i in range(0, 25):  # The range starts from 1 and goes up to 24
        # Save current date in dictionary with format 'MMM YY' and then shift to next month
        index_dict[i+1] = arrow_obj.format('MMM YY').upper()
        arrow_obj = arrow_obj.shift(months=1)

    return index_dict

if __name__ == '__main__':
    from pprint import pprint
    x = create_month_year_index()
    pprint(x)
    print(list(x.values()))
    # pprint(s.table_info('CLIENTCENSUSBYDATE_SVW'))
