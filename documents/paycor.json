{
  "x-generator": "NSwag v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Paycor Public API",
    "version": "",
    "description": "\nWelcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. \n\n# Getting Started\n\n<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>\n\n# GET, PUT, POST\n\n* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. \n* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.\n* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'\n\n\n# Error Handling\n\n* 400: Please consult the response text to correct your request information. \n* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. \n* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.\n* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. \n* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. \n* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.\n  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). \n* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.\n\n\n# IDs\n\n* ClientId = LegalEntityId\n* TenantId = CompanyId\n* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API\n\n# Earnings, Deductions, Taxes\n\nThis section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. \n\nPaycor stores Earnings, Deductions, and Taxes each at three levels:\n* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):\n  * Earnings: REG, OT\n  * Taxes: FITWH, SOC, SOCER, OHCIN\n  * Deductions: 401k, KMat, H125, UWay\n* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. \n  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. \n* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code\n  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. \n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://apis.paycor.com"
    }
  ],
  "paths": {
    "/v1/legalEntities/{legalEntityId}/ats/{atsAccountId}/jobs": {
      "get": {
        "tags": [
          "Applicant Tracking System"
        ],
        "summary": "Get a list of ATS Account jobs for ATS Account Id",
        "description": "Data Access: View ATS Account jobs by ATS Account ID",
        "operationId": "GET ATS Account jobs by ATS Account ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Paycor Legal Entity ID of the legal entity for which you want to get the ATS account jobs",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "atsAccountId",
            "in": "path",
            "required": true,
            "description": "ATS account ID of for which you want to get the ATS account jobs",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, Hiring managers, Recruiters, Team members, Executives",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes"
              }
            },
            "x-position": 3
          },
          {
            "name": "postedToCareers",
            "in": "query",
            "description": "Option to filter jobs based on if they are posted to the careers page",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "status",
            "in": "query",
            "description": "Option to filter jobs by status",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/JobStatus"
            },
            "x-position": 5
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of ATS Account jobs for ATS Account Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfJob"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalEntities/{legalEntityId}/ats/{atsAccountId}/jobs/{atsJobId}": {
      "get": {
        "tags": [
          "Applicant Tracking System"
        ],
        "summary": "Get an ATS Account Job for ATS Account Id",
        "description": "Data Access: View ATS Account Job by ATS Job Id",
        "operationId": "GET ATS Account Job by ATS Account ID and ATS Job ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Paycor Legal Entity ID of the legal entity for which you want to get the ATS account job",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "atsAccountId",
            "in": "path",
            "required": true,
            "description": "ATS account ID of for which you want to get the ATS account job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "atsJobId",
            "in": "path",
            "required": true,
            "description": "ATS Job ID",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, Hiring managers, Recruiters, Team members, Executives",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes2"
              }
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an Account job for an ATS Account Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalEntities/{legalEntityId}/ats/accounts": {
      "get": {
        "tags": [
          "Applicant Tracking System"
        ],
        "summary": "Get a list of ATS Accounts for Legal Entity",
        "description": "Data Access: View ATS Accounts By Legal Entity Id",
        "operationId": "GET a list of ATS Accounts by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Paycor Legal Entity ID of the legal entity for which you want to get the ATS accounts",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of ATS Accounts for Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfATSAccount"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/emergencycontact": {
      "post": {
        "tags": [
          "Employee Emergency Contact"
        ],
        "description": "Either Home Phone, Work Phone or Mobile Phone must be specified\n\nData Access: Create Emergency Contact",
        "operationId": "Post Emergency Contact by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "emergencyContactPost",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/certifications": {
      "get": {
        "tags": [
          "Employee Certifications"
        ],
        "summary": "Get a list of Employee Certifications for an employee",
        "description": "Data Access: View Certification Information for Employee",
        "operationId": "Get Certification for an Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the employee for which you want to get the certifications",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Employee Certifications for an employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeCertification"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Certifications"
        ],
        "summary": "Update Employee Certification",
        "description": "Data Access: Create and Update Certification",
        "operationId": "Update Employee Certification",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the employee for which you want to update the certifications",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "certification",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeCertification2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Returns a resource reference for employee certifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Certifications"
        ],
        "summary": "Add Employee Certification",
        "description": "Data Access: Create and Update Certification",
        "operationId": "Add Employee Certification by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to add the certification",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "certification",
          "description": "Certification object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certification"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/customfields": {
      "get": {
        "tags": [
          "Employee Custom Fields"
        ],
        "summary": "Get Employee Custom Fields by EmployeeID",
        "description": "Data Access: View Employee Custom Fields",
        "operationId": "Get Employee CustomFields by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the employee for whom you want to get the custom fields",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of employee custom fields",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of employee custom fields based on EmployeeID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeCustomField"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Custom Fields"
        ],
        "summary": "Update Custom Field by EmployeeID",
        "description": "Data Access: Update Employee Custom Fields",
        "operationId": "Update Employee CustomFields by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to update the custom field",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "customFields",
          "description": "CustomFields object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "xml": {
                  "name": "ArrayOfEmployeeCustomField",
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "EmployeeCustomField"
                  },
                  "$ref": "#/components/schemas/EmployeeCustomField2"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/deductions/{employeeDeductionId}": {
      "get": {
        "tags": [
          "Employee Deductions"
        ],
        "summary": "Get Employee Deduction by EmployeeID and EmployeeDeductionID",
        "description": "Data Access: View Employee Deduction Information",
        "operationId": "Get Employee Deduction by EmployeeID and ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the deduction.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "employeeDeductionId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee Deduction you want to get.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, AmountData\n\nData Access required\n\nAmountData = View Employee Deduction Amounts",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes3"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an Employee Deduction based on the EmployeeID and DeductionID provided. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDeduction"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/deductions": {
      "get": {
        "tags": [
          "Employee Deductions"
        ],
        "summary": "Get Employee Deductions by EmployeeID",
        "description": "Data Access: View Employee Deductions Information",
        "operationId": "Get Employee Deductions by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the employee for whom you want to get the deductions",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, AmountData\n\nData Access required\n\nAmountData = View Employee Deductions Amounts",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes4"
              }
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of employee earnings",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of employee deductions based on EmployeeID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeDeduction"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Deductions"
        ],
        "summary": "Add Deduction to Employee",
        "description": "Tip: first call \"Get Legal Entity Deductions by Legal Entity ID\" to get the valid Deduction Codes\n\nData Access: Add Employee Deduction",
        "operationId": "Add Deduction to Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to add the deduction",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeDeduction",
          "description": "EmployeeDeduction object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeDeduction2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "name": "ArrayOfCreateOrUpdateResponse",
                    "wrapped": true
                  },
                  "items": {
                    "xml": {
                      "name": "CreateOrUpdateResponse"
                    },
                    "$ref": "#/components/schemas/CreateOrUpdateResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Deductions"
        ],
        "summary": "Update Employee Deduction by EmployeeID",
        "description": "Data Access: Update Employee Deduction",
        "operationId": "Update Employee Deduction by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee that has the Deduction you wish to update",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeDeduction",
          "description": "EmployeeDeduction with ID set and fields updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeDeduction3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/HSAaccounts": {
      "get": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Get Employee HSA Direct Deposits by EmployeeID",
        "description": "Data Access: View Employee HSA Account Information",
        "operationId": "Get Employee HSA Direct Deposits by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for whom you want to get HSA Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of HSA Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns HSA Direct Deposits based on EmployeeID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeDirectDeposit"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Add Employee HSA Direct Deposits by EmployeeID",
        "description": "Data Access: Add Employee HSA Account",
        "operationId": "Add Employee HSA Direct Deposit by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to add HSA Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeDirectDeposit",
          "description": "HSA Direct Deposit object to insert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeHsaDirectDeposit"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Update Employee HSA Direct Deposits by EmployeeID",
        "description": "Data Access: Update Employee HSA Account Information",
        "operationId": "Update Employee HSA Direct Deposit by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to update HSA Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeDirectDeposit",
          "description": "HSA Employee Direct Deposit object with updated fields",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeHsaDirectDeposit2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/DirectDeposits": {
      "post": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Add Employee Direct Deposits by EmployeeID",
        "description": "Data Access: Add Employee Direct Deposit",
        "operationId": "Add Employee Direct Deposit by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of employee for which you want to add Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeDirectDeposit",
          "description": "Direct Deposit object to insert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeDirectDeposit2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Get Employee Direct Deposits by EmployeeID",
        "description": "Data Access: View Employee Direct Deposit Information by Employee Id",
        "operationId": "Get Employee Direct Deposits by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to get Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of direct deposits",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Direct Deposits based on EmployeeID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeDirectDeposit"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Update Employee Direct Deposits by EmployeeID",
        "description": "Data Access: Update Employee Direct Deposit Information",
        "operationId": "Update Employee Direct Deposit by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to update Direct Deposit",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeDirectDeposit",
          "description": "Employee Direct Deposit object with updated fields",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeDirectDeposit3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/DirectDeposits/{directDepositId}": {
      "get": {
        "tags": [
          "Employee Direct Deposits"
        ],
        "summary": "Get Employee Direct Deposit by EmployeeID and DirectDepositID",
        "description": "Data Access: View Employee Direct Deposit Information by Direct Deposit Id",
        "operationId": "Get Employee Direct Deposit by Employee ID and Direct Deposit ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to get Direct Deposits",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "directDepositId",
            "in": "path",
            "required": true,
            "description": "ID of an employee direct deposit which you want to retrieve",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Direct Deposits based on EmployeeID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDirectDeposit"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/paystubDocumentData": {
      "get": {
        "tags": [
          "Employee Documents"
        ],
        "summary": "Get Employee Pay Stubs document link by EmployeeID",
        "description": "Start Date and End Date are required parameters.\n\nData Access: Get Employee Pay Stub Document Link",
        "operationId": "Get Employee Pay Stubs document link by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the Pay Stubs Document Link",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "Date that is earlier or equal to paycheck date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "Date that is after or equal to paycheck date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Employee Pay Stubs Document Links",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Employee Pay Stubs document link based on EmployeeID and date provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayStubFile"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/PayStubDocument/{documentId}": {
      "get": {
        "tags": [
          "Employee Documents"
        ],
        "summary": "Download Employee Pay Stub Document",
        "description": "Data Access: Download Employee Pay Stub Document",
        "operationId": "GET Download Employee Pay Stub Document",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of an Employee for whom you want to get the Pay Stub Document",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "Id of Pay Stub Document",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Pay Stub Document that can be downloaded",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/earnings/{employeeEarningId}": {
      "get": {
        "tags": [
          "Employee Earnings"
        ],
        "summary": "Get Employee Earning by EmployeeID and EmployeeEarningID",
        "description": "Data Access: View Employee Earning Information",
        "operationId": "Get Employee Earning by EmployeeID and EmployeeEarningID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the Earning",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "employeeEarningId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee Earning you want to get",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, AmountData\n\nData Access required\n\nAmountData = View Employee Earning Amounts",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes5"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an Employee Earning based on the EmployeeID and EmployeeEarningID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeEarning"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/earnings": {
      "get": {
        "tags": [
          "Employee Earnings"
        ],
        "summary": "Get Employee Earnings by EmployeeID",
        "description": "Data Access: View Employee Earnings Information",
        "operationId": "Get Employee Earnings by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the Earnings",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, AmountData\n\nData Access required\n\nAmountData = View Employee Earnings Amounts",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes6"
              }
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Employee Earnings",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Employee Earnings based on EmployeeID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeEarning"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Earnings"
        ],
        "summary": "Add Earning to Employee",
        "description": "Data Access: Add Employee Earning",
        "operationId": "Add Earning to Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to add an Earning",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeEarning",
          "description": "Employee Earning object to insert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeEarning2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Earnings"
        ],
        "summary": "Update Employee Earning",
        "description": "Data Access: Update Employee Earning",
        "operationId": "Update Employee Earning",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee that has the Earning you wish to update",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeEarning",
          "description": "Employee Earning object with updated fields",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeEarning3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/payrollhours": {
      "post": {
        "tags": [
          "Employee Payroll Hours"
        ],
        "summary": "Add Employee Hours And Earnings To Paygrid",
        "description": "Required parameters in body are: IntegrationVendor, ProcessId, LegalEntityId, EmployeeNumber, DepartmentCode, EarningCode, BusinessStartDate\n\nData Access: Import Employee Hours and Earnings to Paygrid",
        "operationId": "Add Employee Hours And Earnings To Paygrid",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to set employee hours and earnings",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "replaceData",
            "in": "query",
            "description": "If \"True\" is passed for this query parameter and a matching ProcessID is passed, then the system will fully replace the entire record that was previously added.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          },
          {
            "name": "appendData",
            "in": "query",
            "description": "If \"True\" is passed for this query parameter, then the system will NOT replace any record that was previously added.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "importPayrollHours",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPayrollHours"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/payrollhours": {
      "post": {
        "tags": [
          "Employee Payroll Hours"
        ],
        "summary": "Import Payroll Hours to Employee",
        "description": "Data Access: Import Payroll Hours to Employee",
        "operationId": "Import Payroll Hours to Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to add the payroll hours",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeePayrollHours",
          "description": "Employee Hours object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeTimeCard2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/I9Verification": {
      "get": {
        "tags": [
          "Employee I9 Verification"
        ],
        "summary": "Get Employee I9 Verification by EmployeeID",
        "description": "Data Access: View I9 Verification",
        "operationId": "Get Employee I9 Verification by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the employee for whom you want to get the I9 information",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: documents",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes7"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of employee I9 verification docs based on EmployeeID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/I9Verification"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee I9 Verification"
        ],
        "summary": "Update I9 Verification by EmployeeID",
        "description": "Data Access: Edit I9 Verification",
        "operationId": "Update I9 Verification by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to update the I9 Verification",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "i9Verification",
          "description": "I9 Verification object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/I9Verification2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/payrates": {
      "get": {
        "tags": [
          "Employee Pay Rates"
        ],
        "summary": "Get Employee Payrates by EmployeeID",
        "description": "Data Access: View Employee Payrates",
        "operationId": "Get Employee Payrates by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to get payrates",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of payrates",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns payrates based on EmployeeID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeePayRate"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Pay Rates"
        ],
        "summary": "Add Payrate to Employee",
        "description": "This immediately creates a new payrate related to an Employee in Paycor's system. There is no way to undo or reverse this operation. \n\nData Access: Create Employee PayRates\nSequence numbers must be consecutive and unique",
        "operationId": "Add Payrate to Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee you wish to create the payrate for",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "payRatePost",
          "description": "Create Payrate model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeePayRate2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/payrates/{payrateId}": {
      "put": {
        "tags": [
          "Employee Pay Rates"
        ],
        "summary": "Update Employee Payrate by EmployeeID",
        "description": "Data Access: Update Employee PayRates",
        "operationId": "Update Employee Payrate by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee that has the Payrate you wish to update",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "payrateId",
            "in": "path",
            "required": true,
            "description": "ID of the Payrate you wish to update",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "employeePayRate",
          "description": "EmployeePayRate with ID set and fields updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeePayRate3"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/payschedule": {
      "get": {
        "tags": [
          "Employee Pay Schedule"
        ],
        "summary": "Get Employee Pay Schedule by EmployeeID",
        "description": "This API will return upcoming pay scheduled for a given employee (upcoming check dates),\nor allow looking up the check date for specific pay period dates.\n* You must either specify the exact Period Start & End Date, or leave them blank. \n  * Alternatively you may consider 'GET Legal Entity Pay Schedule' which takes a range parameter.\n  * You can look up pay period dates from 'GET Legal Entity Pay Schedule' (scheduled dates) or 'GET Legal Entity Pay Data' (actual dates)\n* The actual pay dates may change depending on when the client admin processes payroll.\n\nData Access: View Employee Pay Schedule",
        "operationId": "Get Employee Pay Schedule by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee for which you want to get the Pay Schedule",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "periodStartDate",
            "in": "query",
            "description": "Exact Period Start Date of Pay Schedule, to lookup specific payrun. ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "periodEndDate",
            "in": "query",
            "description": "Exact Period End Date of Pay Schedule, if you wish to filter - defaults to showing upcoming (future) runs",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Employee Pay Schedule",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: Additional Runs",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes8"
              }
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Employee's Pay Schedules based on EmployeeID and filters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayPeriod"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/paystubs": {
      "get": {
        "tags": [
          "Employee Pay Stubs"
        ],
        "summary": "Get Employee Pay Stubs by EmployeeID",
        "description": "Note: Either CheckDate, ProcessDate or PlannerId is required as a parameter. You can find a list of valid dates by calling 'GET Legal Entity Pay Data by Legal Entity ID'.\n\nData Access: View Paystub Information",
        "operationId": "Get Employee Pay Stubs by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the Pay Stubs",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "checkDate",
            "in": "query",
            "description": "Check Date of Pay Stubs - required (unless processDate supplied)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "processDate",
            "in": "query",
            "description": "Process Date of Pay Stubs - required (unless checkDate supplied)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "plannerId",
            "in": "query",
            "description": "ID of the Planner for which you want to get the Pay Stubs.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, GrossAmount, NetAmount, Earnings, Taxes, Deductions\n\nData Access required\n\nGrossAmount = View Paystub Gross Pay Information\n\nNetAmount = View Paystub Net Pay Information\n\nEarnings = View Paystub Earning Information\n\nTaxes = View Paystub Tax Information\n\nDeductions = View Paystub Deduction Information",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes9"
              }
            },
            "x-position": 5
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Employee Pay Stubs",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayStub"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/paystubs": {
      "get": {
        "tags": [
          "Employee Pay Stubs"
        ],
        "summary": "Get Employee Pay Stubs by Legal Entity ID",
        "description": "Note: Either CheckDate, ProcessDate or PlannerId is required as a parameter.\n\nData Access: View Paystub Information by Legal Entity Id",
        "operationId": "Get Employee Pay Stubs by LegalEntityId",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of a Legal entity for which you want to get the Pay Stubs",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "checkDate",
            "in": "query",
            "description": "Check Date of Pay Stubs - required (unless processDate supplied)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "processDate",
            "in": "query",
            "description": "Process Date of Pay Stubs - required (unless checkDate supplied)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "plannerId",
            "in": "query",
            "description": "ID of the Planner for which you want to get the Pay Stubs.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, GrossAmount, NetAmount, Earnings, Taxes, Deductions\n\nData Access required\n\nGrossAmount = View Paystub Gross Pay Information\n\nNetAmount = View Paystub Net Pay Information\n\nEarnings = View Paystub Earning Information\n\nTaxes = View Paystub Tax Information\n\nDeductions = View Paystub Deduction Information",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes10"
              }
            },
            "x-position": 5
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Employee Pay Stubs",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayStub2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/paystubsytd": {
      "get": {
        "tags": [
          "Employee Pay Stubs"
        ],
        "summary": "Get Employee Pay Stubs YTD by EmployeeID",
        "description": "* To Check Date is required parameter.  \n* To get a list of check dates, you can use the GET Legal Entity Pay data endpoint.\n\nData Access: View Paystub Information YTD",
        "operationId": "Get Employee Pay Stubs YTD by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the Pay Stubs",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "toCheckDate",
            "in": "query",
            "required": true,
            "description": "Check Date of latest Pay Stub for YTD data. ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, Earnings, Taxes, Deductions\n\nData Access required\n\nEarnings = View Paystub Earning Information YTD\n\nTaxes = View Paystub Tax Information YTD\n\nDeductions = View Paystub Deduction Information YTD",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes11"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayStubHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/paystubsytd": {
      "get": {
        "tags": [
          "Employee Pay Stubs"
        ],
        "summary": "Get Employee Pay Stubs YTD by Legal entity ID",
        "description": "* To Check Date is required parameter.  \n* To get a list of check dates, you can use the GET Legal Entity Pay data endpoint.\n\nData Access: View Paystub Information YTD By Legal Entity",
        "operationId": "Get Employee Pay Stubs YTD by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of a Legal entity for which you want to get the Pay Stubs",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "toCheckDate",
            "in": "query",
            "required": true,
            "description": "Check Date of latest Pay Stub for YTD data. ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, Earnings, Taxes, Deductions\n\nData Access required\n\nEarnings = View Paystub Earning Information YTD By Legal Entity\n\nTaxes = View Paystub Tax Information YTD By Legal Entity\n\nDeductions = View Paystub Deduction Information YTD By Legal Entity",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes12"
              }
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeePayStubHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/schedules": {
      "get": {
        "tags": [
          "Employee (Legacy / Perform Time) Schedules"
        ],
        "summary": "Get Employee Schedules by EmployeeID",
        "description": "Date requirements:\n* Start Date and End Date must not be more than one year ago\n* Start Date must not be in future\n* Start date and end date range can be no greater than 90 days\n\nData Access: View Legacy/Perform Employee Schedules by Employee Id",
        "operationId": "Get Employee Schedules by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to get schedules",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of Employee Schedules, based on EmployeeID and provided date ranges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "name": "ArrayOfEmployeeSchedule",
                    "wrapped": true
                  },
                  "items": {
                    "xml": {
                      "name": "EmployeeSchedule"
                    },
                    "$ref": "#/components/schemas/EmployeeSchedule"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee (Legacy / Perform Time) Schedules"
        ],
        "summary": "Add Schedule to Employee",
        "description": "Data Access: Create Legacy/Perform Time Employee Schedule",
        "operationId": "Add Schedule to Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to add a schedule",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeSchedule",
          "description": "Employee Schedule object to insert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalEntities/{legalEntityId}/schedules": {
      "get": {
        "tags": [
          "Employee (Legacy / Perform Time) Schedules"
        ],
        "summary": "Get Employee Schedules by Legal Entity ID",
        "description": "Date requirements:\n* Start Date and End Date must not be more than one year ago\n* Start Date must not be in future\n* Start date and end date range can be no greater than 90 days\n\nData Access: View Legacy/Perform Employee Schedules by Legal Entity Id",
        "operationId": "Get Employee Schedules by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of Legal Entity for which you want to get schedules",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of Employee Schedules, based on Legal Entity ID and provided date ranges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeSchedule"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/schedules/{scheduleId}": {
      "delete": {
        "tags": [
          "Employee (Legacy / Perform Time) Schedules"
        ],
        "summary": "Delete Employee Schedule",
        "description": "Data Access: Delete Legacy/Perform Time Employee Schedule",
        "operationId": "Delete Schedule from Employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Employee ID of the schedule record you want to delete",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Schedule ID to delete",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/SchedulingJobs": {
      "get": {
        "tags": [
          "Employee Scheduling"
        ],
        "summary": "Get Scheduling Jobs by LegalEntityID",
        "description": "Data Access: View Legal Entity Scheduling Jobs",
        "operationId": "Get Scheduling Jobs by LegalEntityID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Legal Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of Legal Entity Scheduling Jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfSchedulingJob"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/schedulingShifts": {
      "get": {
        "tags": [
          "Employee Scheduling"
        ],
        "summary": "Get Scheduling by Legal Entity Id",
        "description": "Data Access: View scheduling shifts",
        "operationId": "Get Scheduling by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Scheduling Shifts.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "Scheduling start date time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "Scheduling end date time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Scheduling shift list between dates for specific Legal Entity ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfSchedulingShift"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Scheduling"
        ],
        "summary": "Post Paycor Scheduling Shifts by Legal Entity Id",
        "description": "Data Access: Create Scheduling Shifts",
        "operationId": "POST Paycor Scheduling Shifts by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of Legal Entity for which you want to add the Scheduling Shifts",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "schedulingShifts",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulingShifts"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a list of Create Scheduling Shifts responses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchedulingShiftsResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/schedulingShifts/{shiftId}": {
      "get": {
        "tags": [
          "Employee Scheduling"
        ],
        "summary": "Get Scheduling Shift by Shift Id and Legal Entity Id",
        "description": "Data Access: View Scheduling Shift",
        "operationId": "Get Scheduling Shift by Shift Id and Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Scheduling Shift",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "description": "ID of the Shift you want to get.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Scheduling Shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingShift"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Scheduling"
        ],
        "summary": "Update existing Shift by Shift Id and Legal Entity Id",
        "description": "Data Access: Update Scheduling Shifts",
        "operationId": "Update existing Shift by Shift Id and Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to update the Scheduling Shifts",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "description": "ID of the Shift you want to update.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "schedulingShift",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulingShift2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Returns a CreateOrUpdateResponse object. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee Scheduling"
        ],
        "summary": "Delete Scheduling Shift by ShiftId and LegalEntityId",
        "description": "Data Access:  Delete Scheduling Shift",
        "operationId": "Delete Scheduling Shift By ShiftId and LegalEntityId",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Legal Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "description": "Shift ID to delete",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get Employee by EmployeeID",
        "description": "Tip: you can retrieve a valid EmployeeID guid via endpoints like 'Get Employees by Legal Entity ID'\n            \nData Access: View Employee Information",
        "operationId": "Get Employee by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee you want to get",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, EmploymentDates, Status, Position, WorkLocation\n            \nData Access required\n            \nEmploymentDates = View Employee Employment Dates\n            \nStatus = View Employee Status\n            \nPosition = View Employee Position\n            \nWorkLocation = View Employee Work Location",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes13"
              }
            },
            "x-position": 2
          },
          {
            "name": "emailType",
            "in": "query",
            "description": "Options to specify which emaill address to return. Work email type will be returned if none are specified: Home, Work",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/EmailTypeOptions"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an Employee object based on the EmployeeID, with some fields populated based on the Include parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeReturnItem"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Contact",
        "description": "This immediately updates an employee's contact information and associated Person's in Paycor's system.\n            \nData Access: Update Employee Contact",
        "operationId": "Update Employee Contact",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "employeePut",
          "description": "Put Employee Contact model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeContact"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantId}/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get Employees By TenantID",
        "description": "Data Access: View Tenant Employees",
        "operationId": "Get Employees by TenantID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "ID of the tenant for which you want to get employees",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Option to filter by employment status",
            "schema": {
              "$ref": "#/components/schemas/EmploymentStatus"
            },
            "x-position": 2
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Option to filter by Employee Number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Option to filter by Employee Last Name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "departmentCode",
            "in": "query",
            "description": "Option to filter by Department Code.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "workLocationName",
            "in": "query",
            "description": "Option to filter by Work Location Name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "jobCode",
            "in": "query",
            "description": "Option to filter by Job Code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of employees",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of EmployeeList (with a subset of Employee fields) objects based on the TenantID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeList"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get Employees by Legal Entity ID",
        "description": "Data Access: View Legal Entity Employees",
        "operationId": "Get Employees by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the legal entity for which you want to get employees",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, EmploymentDates, Status, Position, WorkLocation\n            \nData Access required\n            \nEmploymentDates = View Legal Entity Employees Employment Dates\n            \nStatus = View Legal Entity Employees Status\n            \nPosition = View Legal Entity Employees Position\n            \nWorkLocation = View Legal Entity Employees Work Location",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes14"
              }
            },
            "x-position": 2
          },
          {
            "name": "emailType",
            "in": "query",
            "description": "Options to specify which email address to return. Work email type will be returned if none are specified: Home, Work",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/EmailTypeOptions2"
            },
            "x-position": 3
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Option to filter by employment status.",
            "schema": {
              "$ref": "#/components/schemas/EmploymentStatus"
            },
            "x-position": 4
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Option to filter by Employee Number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Option to filter by Employee Last Name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "departmentCode",
            "in": "query",
            "description": "Option to filter by Department Code.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "workLocationName",
            "in": "query",
            "description": "Option to filter by Work Location Name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of employees",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Employee objects based on the Legal Entity ID & Include parameter provided.\n            \nThis endpoint returns all Employee details (based on the Include parameter) except for SSN, DOB, and Emergency Contact. Those fields are not currently available in bulk.\nReturns 200 records per page to allow for ease of use for larger clients.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeReturnItem"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Create Employee",
        "description": "This immediately \"hires\" a new employee and associated Person in Paycor's system. There is no way to undo or reverse this operation.\nAfter creating an employee, please wait sixty seconds before using employeeId to call other endpoints.\n            \nData Access: Create Employee",
        "operationId": "Create Employee",
        "requestBody": {
          "x-name": "employeePost",
          "description": "Create Employee model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/positionandstatus": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Position and Status data",
        "description": "This endpoint updates an employee's status and position information.\n            \nData Access: Update Employee Position And Status",
        "operationId": "Update Employee Position and Status data",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "employeeUpdateData",
          "description": "Put Employee Position and Status model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeePositionAndStatus"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/position": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Position data",
        "description": "This endpoint updates an employee's position information.\n            \nData Access: Update Employee Position",
        "operationId": "Update Employee Position data",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "employeePositionData",
          "description": "Put Employee Position model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeePosition"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/status": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Status data",
        "description": "This endpoint updates an employee status information.\n            \nData Access: Update Employee Status Data",
        "operationId": "Update Employee Status data",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "employeeStatusData",
          "description": "Put Employee Status model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeStatusUpdate"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/identifyingdata": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Personal data",
        "description": "This endpoint updates an employee's personal information.\n            \nData Access: Update Employee Identifying Data",
        "operationId": "Update Employee Identifying data",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "employeeIdentifyingData",
          "description": "Put Employee Identifying data model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeIdentifyingData"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/employeesIdentifyingData": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "GET Identifying Employee Data by Legal Entity Id",
        "description": "Data Access: View Legal Entity Employees Identifying Data\n            \nOptional Data Access: View Legal Entity Employees SSN and BirthDate",
        "operationId": "Get Identifying Employee Data by LEID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the legal entity for which you want to get employees",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to filter employees by employment status: Active, Inactive",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes15"
              }
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of data",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Employee Identifying data objects for the Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeesIdentifyingData"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/Paygroup": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Paygroup",
        "description": "This endpoint updates an employee's paygroup.\n            \nData Access: Update Employee Paygroup",
        "operationId": "Update Employee Paygroup",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "payGroupId",
            "in": "query",
            "description": "ID of the Paygroup for whom you want to get the Pay Schedule. Available via 'GET Legal Entity Pay Groups'",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/PersonalData": {
      "patch": {
        "tags": [
          "Employees"
        ],
        "summary": "Update Employee Personal Data",
        "description": "This endpoint updates an employee's personal data.\n            \nData Access: Update Employee Personal Data",
        "operationId": "Update Employee Personal Data",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "Id of the employee",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "personalData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeePersonalData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/onboarding": {
      "post": {
        "tags": [
          "Employee Onboarding"
        ],
        "summary": "Create Employee Onboarding",
        "description": "This will allow partners to add a new employee entry for pending hire\n\nData Access: Create Employee Onboarding",
        "operationId": "Create Employee Onboarding",
        "requestBody": {
          "x-name": "simpleHire",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleHire"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/onboardingemployees": {
      "get": {
        "tags": [
          "Employee Onboarding"
        ],
        "summary": "Get employees in the onboarding state",
        "description": "This endpoint allows partners to see the employees in the onboarding state.\n\nData Access: View Legal Entity Onboarding Employees",
        "operationId": "Get employees in the onboarding state by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the legal entity for which you want to get the employees in the onboarding state",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of Onboarding Employee records",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paged list of Onboarding Employee items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfOnboardingEmployee"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/taxes": {
      "get": {
        "tags": [
          "Employee Taxes"
        ],
        "summary": "Get Employee Taxes by EmployeeID",
        "description": "Data Access: View Employee Taxes",
        "operationId": "Get Employee Taxes by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the employee for whom you want to get the taxes",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, TaxCredits\n\nData Access required\n\nTaxCredits = View Employee Tax Credits",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes16"
              }
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of employee taxes",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of employee taxes based on EmployeeID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeTax"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee Taxes"
        ],
        "summary": "Add Tax by EmployeeID",
        "description": "* Use GET Tax Fields by Tax Code to determine payload needed to complete this call\n\nData Access: Create Employee Tax",
        "operationId": "Add Employee Taxes by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to add the tax",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeTax",
          "description": "EmployeeTax object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeTax2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "name": "ArrayOfCreateOrUpdateResponse",
                    "wrapped": true
                  },
                  "items": {
                    "xml": {
                      "name": "CreateOrUpdateResponse"
                    },
                    "$ref": "#/components/schemas/CreateOrUpdateResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Taxes"
        ],
        "summary": "Update Tax by EmployeeID",
        "description": "* Use GET Tax Fields by Tax Code to determine payload needed to complete this call\n\nData Access: Update Employee Tax",
        "operationId": "Update Employee Taxes by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to update the tax",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeTax",
          "description": "EmployeeTax object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeTax3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "name": "ArrayOfCreateOrUpdateResponse",
                    "wrapped": true
                  },
                  "items": {
                    "xml": {
                      "name": "CreateOrUpdateResponse"
                    },
                    "$ref": "#/components/schemas/CreateOrUpdateResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/taxes/filingStatus/{taxCode}": {
      "get": {
        "tags": [
          "Employee Taxes"
        ],
        "summary": "Get Filing Status by Tax Code",
        "description": "Data Access: View Filing Status by Tax Code",
        "operationId": "Get Filing Status by Tax Code",
        "parameters": [
          {
            "name": "taxCode",
            "in": "path",
            "required": true,
            "description": "You can retrieve a valid Tax Code via Get Legal Entity Taxes by Legal Entity ID",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilingStatus"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/taxes/taxFields/{taxCode}": {
      "get": {
        "tags": [
          "Employee Taxes"
        ],
        "summary": "Get Tax Fields by Tax Code",
        "description": "* This endpoint will allow you to pass in a Tax Code and will return the fields that are expected to be passed for PUT/POST Employee Taxes\n* To get the Tax Codes available for your account to be used for this endpoint, use GET Legal Entity Taxes by Legal Entity ID\n\nData Access: Get Tax Fields By Tax Code",
        "operationId": "Get Tax Fields by Tax Code",
        "parameters": [
          {
            "name": "taxCode",
            "in": "path",
            "required": true,
            "description": "You can retrieve a Tax fields by Tax Codes",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalTaxForm"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalEntities/{legalEntityId}/punches": {
      "get": {
        "tags": [
          "Employee Time Card Punches"
        ],
        "summary": "Get Legal Entity Employees Time Card Punches by Legal Entity ID",
        "description": "This pulls Punches data from Paycor's Perform Time system, for one legal entity.\n* Clients *do not* need to run payroll before hours are returned by this endpoint.\n* Our Public API currently does not include whether the hours have already been Approved or not.\n* Time Card hours may be delayed by 20 minutes.\n\nDate requirements:\n* Start Date and End Date must not be more than one year ago\n* Start Date must not be in future\n* Start date and end date range can be no greater than 90 days\n\nData Access: View Employee Time Card Punches By Legal Entity Id\n\nEndpoint can only be used if the Client has the Perform Time Service",
        "operationId": "Get Employee Time Card Punches by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of legal entity for which you want to get hours",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of Employee Time Cards. ContinuationToken would be valid only for 24 hours. If a call is made after 24 hours with old continuationToken, no data will be retrieved.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Employee Time Card collection, based on Legal Entity Id and provided date ranges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTimeCardV3"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/punches": {
      "get": {
        "tags": [
          "Employee Time Card Punches"
        ],
        "summary": "Get Legal Entity Employees Time Card Punches by Employee ID",
        "description": "This pulls Punches data from Paycor's Perform Time system for one employee.\n* Clients *do not* need to run payroll before hours are returned by this endpoint.\n* Our Public API currently does not include whether the hours have already been Approved or not.\n* Time Card punches may be delayed by 20 minutes.\n\nDate requirements:\n* Start Date and End Date must not be more than one year ago\n* Start Date must not be in future\n* Start date and end date range can be no greater than 90 days\n\nData Access: View Employee Time Card Punches\n\nEndpoint can only be used if the Client has the Perform Time Service",
        "operationId": "Get Employee Time Card Punches by Employee Id",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of employee for which you want to get hours",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Date range filter, showing which records to return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of Employee Time Cards. ContinuationToken would be valid only for 24 hours. If a call is made after 24 hours with old continuationToken, no data will be retrieved.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Employee Time Card collection, based on Legal Entity Id and provided date ranges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTimeCardV3"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/timeoffaccruals": {
      "get": {
        "tags": [
          "Employee Time Off Accruals"
        ],
        "summary": "Get Employee Accruals by EmployeeID",
        "description": "Data Access: View Employee Timeoff Accruals by Employee Id",
        "operationId": "Get Employee Accruals by Employee ID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of an Employee for whom you want to get the Balances",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Employee Balances",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Employee Accrual Balances based on EmployeeID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeBalance"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/timeoffaccruals": {
      "get": {
        "tags": [
          "Employee Time Off Accruals"
        ],
        "summary": "Get Employee Accruals by Legal Entity ID",
        "description": "Data Access: View Employee Timeoff Accruals by Legal Entity Id",
        "operationId": "Get Employee Accruals by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Legal entity ID for which you want to get the balances",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of employee balances",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Employee Accrual Balances based on legal entity ID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeBalance"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/timeoffrequests": {
      "get": {
        "tags": [
          "Time Off Requests"
        ],
        "summary": "Get Employee Time Off Requests by EmployeeId",
        "description": "Date requirements:\n* Start Date and End Date must not be more than one year ago\n* Start date and end date range can be no greater than 90 days\n\nData Access: View Timeoff Requests by Employee Id",
        "operationId": "Get Employee TimeOff Requests by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee for which you want to get the Time Off Requests.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "Date range filter, showing which records to return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "Date range filter, showing which records to return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of results.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Time Off Requests for specific Employee.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeTimeOffRequest"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/events/mockevent": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Mock Event Notification",
        "description": "Following body attributes are optionally required:\n* ItemId is required when EventType is Employee.Modified\n* LegalEntityId is required when EventType is LegalEntity.Modified",
        "operationId": "Mock Event Notification",
        "requestBody": {
          "x-name": "mockEventRequest",
          "description": "Mock Event that user wants to trigger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Command"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns the Event Notification Object that will be triggered by Paycor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/legalentities/{legalEntityId}": {
      "get": {
        "tags": [
          "General Ledger (Legacy)"
        ],
        "summary": "Get General Ledger by Legal Entity ID",
        "description": "* Type of report can be Regular or Setup\n    * Setup report returns only department number, company department number, account name, account number, itemize, and sort sequence all other values are set to null.\n    * Regular report returns all data. \n* Planner id is required if report type is set to regular\n\nData Access: View General Ledger",
        "operationId": "Get General Ledger By Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the legal entity for which you want to get the general ledger items",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "plannerId",
            "in": "query",
            "description": "ID of planner, required if report type is regular",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "reportType",
            "in": "query",
            "description": "Type of General Ledger, Regular or Setup ",
            "schema": {
              "$ref": "#/components/schemas/GeneralLedgerReportType"
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: EmployeeData",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes17"
              }
            },
            "x-position": 4
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of General Ledger records",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paged list of General Ledger items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfGeneralLedger"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/jobcosting/legalentities/{legalEntityId}": {
      "get": {
        "tags": [
          "General Ledger Job Costing (Legacy)"
        ],
        "summary": "Get General Ledger Job Costing by Legal Entity ID",
        "description": "Data Access: View General Ledger Job Costing",
        "operationId": "Get General Ledger Job Costing By Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the legal entity for which you want to get the job costing items.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "plannerId",
            "in": "query",
            "required": true,
            "description": "ID of planner.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: EmployeeData",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes18"
              }
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of Job Costing records.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paged list of JobCosting items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfJobCosting"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/laborcategories": {
      "get": {
        "tags": [
          "Labor Categories"
        ],
        "summary": "Get Labor Categories by Legal Entity ID",
        "description": "To make this call you will need the Job Costing or Workforce Management Service.\n\nData Access: View Labor Categories by Legal Entity Id",
        "operationId": "Get Labor Categories By Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get labor categories (also known as job categories)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of Labor Category items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLaborCategories"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/laborcodes": {
      "post": {
        "tags": [
          "Labor Codes"
        ],
        "summary": "Add Labor Code to Legal Entity",
        "description": "This immediately creates a new labor code related to a Legal Entity in Paycor's system. There is no way to undo or reverse this operation.\n* Required body attributes:\n    * LaborCategoryId\n    * Code\n    * LaborCodeName\n    \nTo make this call you will need the Job Costing or Workforce Management Service.\n\nData Access: Create and Update Labor Codes",
        "operationId": "Add Labor Code to Legal Entity",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to create Labor Code",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "laborCode",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaborCode4"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Labor Codes"
        ],
        "summary": "Get Labor Code By Legal Entity ID",
        "description": "Returns list of all Labor Code items. \n* Labor code is not active if effective start date is after current date or if effective end date is before current date.\n\nTo make this call you will need the Job Costing or Workforce Management Service.\n\nData Access: View Labor Codes by Legal Entity Id",
        "operationId": "Get Labor Code By Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get labor codes (also known as job codes)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of all Labor Code items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLaborCode"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Labor Codes"
        ],
        "summary": "Update Labor Code",
        "description": "This operation updates specified labor code in Paycor's system.\n\nTo make this call you will need the Job Costing or Workforce Management Service.\n\nLaborCodeId is required.\n\nData Access: Create and Update Labor Codes",
        "operationId": "Update Labor Code",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to update Labor Code",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "laborCode",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaborCode6"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "Get Legal Entity by Legal Entity ID",
        "description": "Data Access: View Legal Entity Basic Information",
        "operationId": "Get Legal Entity by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity you want to get (synonymous to Paycor's ClientID)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, BusinessNames\n\nData Access required\n\nBusinessNames = View Legal Entity Business Names & Addresses",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes19"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Legal Entity based on the Legal Entity ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/ActivatedLegalEntityTenantList": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "Get Legal Entities/Tenants for the user logged in",
        "operationId": "Get Legal Entities/Tenant for user logged in",
        "responses": {
          "200": {
            "description": "Returns list of Legal Entities/Tenant that user has access to ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/certificationOrganizations": {
      "get": {
        "tags": [
          "Legal Entity Certifications"
        ],
        "summary": "Get a list of Certification Organizations for a Legal Entity",
        "description": "Data Access: View Certification Organizations for Legal Entity",
        "operationId": "Get Certification Organizations for a Legal Entity",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the certification organizations",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of certification organizations",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Certification Organizations for a Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTenantCertificationOrganization"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/certifications": {
      "get": {
        "tags": [
          "Legal Entity Certifications"
        ],
        "summary": "Get a list of Certifications for a Legal Entity",
        "description": "Tip: you can retrieve a list of certiifcates via endpoints like 'Get Certificates by Legal Entity ID'\n\nData Access: View Certification Information for Legal Entity",
        "operationId": "Get Certifications by LegalEntityId",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Certifications for a Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTenantCertification"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/deductions": {
      "get": {
        "tags": [
          "Legal Entity Deductions"
        ],
        "summary": "Get Legal Entity Deductions by Legal Entity ID",
        "description": "Data Access: View Legal Entity Deductions",
        "operationId": "Get Legal Entity Deductions by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the deductions",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity Deductions",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Legal Entity Deductions based on the Legal Entity ID provided. Will also include any Tenant-level deductions. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLegalEntityDeduction"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/departments": {
      "get": {
        "tags": [
          "Legal Entity Departments"
        ],
        "summary": "Get Legal Entity Departments by Legal Entity ID",
        "description": "Data Access: View Legal Entity Departments Information",
        "operationId": "Get Legal Entity Departments by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Departments",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity Departments",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Legal Entity Departments based on the Legal Entity ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfDepartment"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Legal Entity Departments"
        ],
        "summary": "Create Departments by Legal Entity Id",
        "description": "Creates new Department for a Legal Entity.\n* the newly created Department will take at least 60 seconds to propagate through the system\n\nData Access: Create and Update Legal Entity Departments",
        "operationId": "Create Departments by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to create the Departments",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "departmentData",
          "description": "Create department model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Legal Entity Departments"
        ],
        "summary": "Update Legal Entity Department by Legal Entity ID",
        "description": "Updates existing Department for a Legal Entity.\n* The update of the Department will take at least 60 seconds to propagate through the system\n* When updating top level departments, payroll id should be used as parent id\n\nData Access: Create and Update Legal Entity Departments",
        "operationId": "Update Legal Entity Departments by Department ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to update the Department",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "putDepartmentRequestBody",
          "description": "Update Department model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a resource reference of work location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfDepartment"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/departments/{departmentId}": {
      "get": {
        "tags": [
          "Legal Entity Departments"
        ],
        "summary": "Get Legal Entity Department by Legal Entity ID and Department ID",
        "description": "Data Access: View Legal Entity Departments by Department Id",
        "operationId": "Get Legal Entity Departments by Legal Entity ID And ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Departments",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "description": "ID of the Department",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Legal Entity Department based on the Legal Entity ID and Department ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/earnings": {
      "get": {
        "tags": [
          "Legal Entity Earnings"
        ],
        "operationId": "Get Legal Entity Earnings by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLegalEntityEarning"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/forecasting": {
      "get": {
        "tags": [
          "Legal Entity Forecasting"
        ],
        "summary": "Get Forecasting data by Legal Entity Id",
        "description": "Data Access: View Legal Entity Forecasting Data",
        "operationId": "Get Forecasting data by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the schedule forecasting data",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "Date that is earlier or equal to get forecasting data",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "Date that is after or equal to get forecasting data",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Transactiondate, Value and ScheduleGroupName.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfScheduleForecasting"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Legal Entity Forecasting"
        ],
        "summary": "Post Forecasting data by Legal Entity Id",
        "description": "Data requirements:\n* Accepts Maximum of 5000 Objects in Request Body.\nData Access: Add Legal Entity Forecasting Data",
        "operationId": "Post Forecasting data by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of Legal Entity for which you want to add forecasting data",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "scheduleForecastingCreateCdmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 5000,
                "xml": {
                  "name": "ArrayOfScheduleForecasting",
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "ScheduleForecasting"
                  },
                  "$ref": "#/components/schemas/ScheduleForecasting2"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a ResourceUrl that could be used to retrieve Forecasting Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/jobtitles": {
      "get": {
        "tags": [
          "Legal Entity Job Titles"
        ],
        "summary": "Get Job Titles by Legal Entity ID",
        "description": "Job Titles are configured at a Tenant level, unlike most other objects which are configured at a Legal Entity level.\n\nData Access: View Legal Entity Job Titles",
        "operationId": "Get Job Titles by LegalEntityId",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity you want to get Job Titles.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Job Titles",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Job Titles based on the LegalEntityId provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTenantJobTitle"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/paydata": {
      "get": {
        "tags": [
          "Legal Entity Pay Data"
        ],
        "summary": "Get Legal Entity Pay Data by Legal Entity ID",
        "description": "This endpoint returns the dates that particular employees were actually paid.\n* You can retrieve all employees by not passing EmployeeId, or you can pass EmployeeId to filter.\n* The returned values (Check Date or Process Date) can be used as an input for GET Employee Pay Stubs.\n* Only dates from provided fromCheckDate and toCheckDate are used.\n* Requires exactly one filtering parameter to be passed in. Choose *one* of these three:\n  * Check Date range: parameters fromCheckDate and toCheckDate\n  * Process Date: the single date the payrun was processed.\n  * PlannerID: You can retrieve your Planner ID by using the Legal Entity Payroll Processing Data endpoint.\n* Returns one object per pay date, even if there were multiple paychecks on that same date.\n* Does include Additional Payruns, which don't have to follow the schedule and can be used for bonuses.\n\nData Access: View Paydata Information",
        "operationId": "Get Legal Entity Pay Data by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Pay Data",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of an Employee, if you want to filter to paydata from a specific Employee",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "fromCheckDate",
            "in": "query",
            "description": "Filter Option 1: Date Range, From Check Date of Payrun",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "toCheckDate",
            "in": "query",
            "description": "Filter Option 1: Date Range, To Check Date of Payrun",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "processDate",
            "in": "query",
            "description": "Filter Option 2: Process Date of Payrun",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "plannerId",
            "in": "query",
            "description": "Filter Option 3: ID of the Planner for which you want to get the Pay Data.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity Pay Data",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Legal Entity Pay Data based on Legal Entity ID, EmployeeID, and filter provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLegalEntityPayData"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/payGroups": {
      "get": {
        "tags": [
          "Legal Entity Pay Groups"
        ],
        "summary": "Get Pay Groups by Legal Entity ID",
        "description": "Data Access: View Legal Entity Pay Groups",
        "operationId": "Get Legal Entity Pay Data by Legal Entity ID2",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Pay Groups",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity Pay Groups",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of the Pay Groups available for the Legal Entity ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayGroup"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/payrollProcessing": {
      "get": {
        "tags": [
          "Legal Entity Payroll Processing Data"
        ],
        "summary": "GET Payroll Processing Data by Legal Entity",
        "description": "* If fromCheckDate is not provided, current date will be used.\n\nData Access: View Legal Entity Payroll Processing Data",
        "operationId": "Get Legal Entity Pay Data by Legal Entity ID22",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Pay Groups",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "fromCheckDate",
            "in": "query",
            "required": true,
            "description": "Date range filter, From Check Date ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "toCheckDate",
            "in": "query",
            "description": "Date range filter, To Check Date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity Payroll Processing Data",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of the Pay Periods available for the Legal Entity ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayPeriod2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/payschedule": {
      "get": {
        "tags": [
          "Legal Entity Pay Schedule"
        ],
        "summary": "Get Legal Entity Pay Schedule by Legal Entity ID and Paygroup ID",
        "description": "This returns the schedule of regularly-scheduled payruns for a given Paygroup and date range. \n* Tip: first list the Paygroups within a Legal Entity using GET Legal Entity Pay Groups, in order to populate the payGroupId parameter\n* Tip: You can take the returned Check Dates or Process Dates and pass into Get Employee Pay Stubs by EmployeeID\n\nNote that query parameters PayGroupId, AsOfDate and UntilDate are required.\n\nData Access: View Pay Schedule Information",
        "operationId": "Get Legal Entity Pay Schedule by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Pay Schedule",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "payGroupId",
            "in": "query",
            "description": "ID of the Paygroup for whom you want to get the Pay Schedule. Available via 'GET Legal Entity Pay Groups'",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "asOfDate",
            "in": "query",
            "description": "Acts as a 'start date' filter - looks for Payruns that are in-progress or unpaid as of this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "untilDate",
            "in": "query",
            "description": "Acts as an 'end date' filter - looks for Payruns that are in-progress or unpaid until this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 4
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity Pay Schedule",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Legal Entity Pay Schedules (payrun period dates) based on parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayPeriod"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/activitytypes": {
      "get": {
        "tags": [
          "Legal Entity Activity Types"
        ],
        "summary": "Get Legal Entity Activity Types by Legal Entity ID",
        "operationId": "Get Legal Entity Activity Types by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "Legal Entity Id for whom you want to get the Activity Types",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Activity Types based on the provided Legal Entity Id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfActivityType"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/schedulegroups": {
      "get": {
        "tags": [
          "Legal Entity Schedule Groups"
        ],
        "summary": "Get Schedules Groups for Legal Entity",
        "description": "Data Access: View Legal Entity Schedule Groups",
        "operationId": "Get Legal Entity Schedule Groups by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity you want to get Schedule Groups",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "A token to get next set of results",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Schedule Groups for the specified Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfScheduleGroup"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/services": {
      "get": {
        "tags": [
          "Legal Entity Services"
        ],
        "summary": "Get subscribed services for Legal Entity",
        "description": "Data Access: View Legal Entity Services",
        "operationId": "Get Legal Entity Services by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity you want to get (synonymous to Paycor's ClientID)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A listing of services for the specified Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/statusReasons/{statusCategory}": {
      "get": {
        "tags": [
          "Legal Entity Status Reason"
        ],
        "summary": "Get Legal Entity Status Reason values",
        "description": "Data Access: Legal Entity Status Reason",
        "operationId": "Get Legal Entity Status Reasons",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the legal entity for which you want to get the status reasons items",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "statusCategory",
            "in": "path",
            "required": true,
            "description": "Status category of status reasons.",
            "schema": {
              "$ref": "#/components/schemas/StatusCategory2"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns collection of status reasons by status category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "name": "ArrayOfStatusReason",
                    "wrapped": true
                  },
                  "items": {
                    "xml": {
                      "name": "StatusReason"
                    },
                    "$ref": "#/components/schemas/StatusReason"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/taxes": {
      "get": {
        "tags": [
          " Legal Entity Taxes"
        ],
        "summary": "Get Legal Entity Taxes by Legal Entity ID",
        "description": "Data access: View Legal Entity Taxes",
        "operationId": "Get Legal Entity Taxes by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity you want to get (synonymous to Paycor's ClientID) the taxes",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Legal Entity taxes",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of the taxes available for the Legal Entity ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLegalEntityTax"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/CreatePunches": {
      "post": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "Create Punches for Employee(s) under Legal Entity",
        "description": "Data access: Create Punches for Employee(s)",
        "operationId": "Create Punches for Employee(s)",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for whose employees you want to create punches",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeePunch",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "xml": {
                  "name": "ArrayOfEmployeePunch",
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "EmployeePunch"
                  },
                  "$ref": "#/components/schemas/EmployeePunch"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "202": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/CreateHours": {
      "post": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "Create Hours for Employee(s) under Legal Entity",
        "description": "Data access: Create Hours for Employee(s)",
        "operationId": "Create Hours for Employee(s)",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for whose employees you want to create hours",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeHours",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "xml": {
                  "name": "ArrayOfEmployeeHour",
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "EmployeeHour"
                  },
                  "$ref": "#/components/schemas/EmployeeHour"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "202": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/punchErrorLog/{trackingId}": {
      "get": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "Get Punch error logs by Legal Entity Id And Tracking Id",
        "description": "Data Access: View Punch Error Log",
        "operationId": "Get Punch Error log by Legal Entity ID And Tracking ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Punch Error log.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "trackingId",
            "in": "path",
            "required": true,
            "description": "ID of the Punch Create api failure result.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Punch Error log for specific Legal Entity and tracking ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPunchErrorLog"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/HourErrorLog/{trackingId}": {
      "get": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "Get Employee Hour error logs by Legal Entity Id And Tracking Id",
        "description": "Data Access: View Hour Error Log.",
        "operationId": "Get Employee Hour Error log by Legal Entity ID And Tracking ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Hour Error log.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "trackingId",
            "in": "path",
            "required": true,
            "description": "ID of the Hour Request Create api failure result.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Hour Error log for specific Legal Entity and tracking ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfHourErrorLog"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/payItemErrorLog/{trackingId}": {
      "get": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "Get Employee PayItem Request error logs by Legal Entity Id And Tracking Id",
        "description": "Data Access: View Pay Item Error Log ",
        "operationId": "Get PayItem Error log by Legal Entity ID And Tracking ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the PayItem error logs.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "trackingId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee PayItem Failure result.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Pay Item Request Error log for specific Legal Entity and tracking ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayItemErrorLog"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/payItems": {
      "get": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "View Employee Pay Items by Legal Entity ID",
        "description": "Tip:\n* It can take up to 5 minutes for a created Pay Item to return from the API.\n\nDate requirements:\n* Start date and end date range can be no greater than 30 days\n\nData Access: View Employee Pay Items by Legal Entity ID ",
        "operationId": "View Employee Pay Items by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the PayItems.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "Date that is earlier or equal to get PayItems data. No timestamp is needed, FORMAT: 2020-09-13 ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "Date that is after or equal to get PayItems data. No timestamp is needed, FORMAT: 2020-09-13",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get next set of Employee PayItems",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns PayItems for specific Legal Entity with given date range.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPayItem"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/CreatePayItems": {
      "post": {
        "tags": [
          "Legal Entity Time Data"
        ],
        "summary": "Create Pay Item(s) for Employee under Legal Entity",
        "description": "Tip:\n* It can take up to 5 minutes for a created Pay Item to return from the API.\n* Maximum allowed number of records per request: 100\n\nData Access: Create Pay Items for Employee(s)",
        "operationId": "Create Employee Pay Items by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to create the PayItems.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "payItems",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 100,
                "xml": {
                  "name": "ArrayOfPayItem",
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "PayItem"
                  },
                  "$ref": "#/components/schemas/PayItem2"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a status code without body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/timeoffrequests": {
      "get": {
        "tags": [
          "Time Off Requests"
        ],
        "summary": "Get Employee Time Off Requests by Legal Entity Id",
        "description": "Date requirements:\n* Start Date and End Date must not be more than one year ago\n* Start date and end date range can be no greater than 90 days\n\nData Access: View Timeoff Requests by Legal Entity Id",
        "operationId": "Get Employee TimeOff Requests by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Time Off Requests.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "Date range filter, showing which records to return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "Date range filter, showing which records to return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of results.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Time Off Requests of Employees for specific Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfEmployeeTimeOffRequest2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/timeoffRequests/{timeoffRequestId}": {
      "get": {
        "tags": [
          "Time Off Requests"
        ],
        "summary": "Get Employee Timeoff Request by Legal Entity Id And Timeoff Request Id",
        "description": "Data Access: View Timeoff Requests by Timeoff Request Id",
        "operationId": "Get Employee Timeoff Request by Legal Entity ID And Timeoff Request ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Timeoff Request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "timeoffRequestId",
            "in": "path",
            "required": true,
            "description": "ID of the Employee Timeoff Request.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an Employee Timeoff Request for specific Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeTimeOffRequest"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/timeOffRequests": {
      "post": {
        "tags": [
          "Time Off Requests"
        ],
        "summary": "Post Time Off Requests By Legal Entity Id",
        "description": "Data requirements:\n* Accepts Maximum of 200 Objects in Request Body.\n* StartTime and EndTime must not be more than one year ago.\nTip:\n* It can take up to 5 minutes for successfully created Time Off Requests to return from the API.\nData Access: Add Timeoff Requests",
        "operationId": "Post Employee Time Off Requests by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of Legal Entity for which you want to add the Employee Time Off Requests",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeTimeOffRequests",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 200,
                "xml": {
                  "name": "ArrayOfEmployeeTimeOffRequest",
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "EmployeeTimeOffRequest"
                  },
                  "$ref": "#/components/schemas/EmployeeTimeOffRequest2"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "202": {
            "description": "Returns a trackingId and ResourceUrl that could be used to find the status of this call",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/timeOffRequestsErrorLog/{trackingId}": {
      "get": {
        "tags": [
          "Time Off Requests"
        ],
        "summary": "Get Employee Timeoff Request error logs by Legal Entity Id And Tracking Id",
        "description": "Data Access: View Timeoff Requests Error log by Legal entity Id and Tracking Id",
        "operationId": "Get Employee Timeoff Request Error log by Legal Entity ID And Tracking ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the Timeoff Request Error log.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "trackingId",
            "in": "path",
            "required": true,
            "description": "ID of the Timeoff Request Create api failure result.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Timeoff Request Error log for specific Legal Entity and tracking ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "name": "ArrayOfTimeOffRequestsErrorLog",
                    "wrapped": true
                  },
                  "items": {
                    "xml": {
                      "name": "TimeOffRequestsErrorLog"
                    },
                    "$ref": "#/components/schemas/TimeOffRequestsErrorLog"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/timeofftypes": {
      "get": {
        "tags": [
          "Legal Entity Time Off Types"
        ],
        "summary": "Get Legal Entity Time Off Types",
        "description": "Data Access: View Time Off Types",
        "operationId": "Get Time Off Types by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of an Legal Entity for which you want to get the Time Off Types",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of results",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Time Off Types based on Legal Entity Id provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTimeOffType"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/worklocations": {
      "get": {
        "tags": [
          "Legal Entity Work Locations"
        ],
        "summary": "Get a list of Work Locations for a Legal Entity",
        "description": "Data Access: View Legal Entity Work Locations",
        "operationId": "Get Work Locations for a Legal Entity",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the work locations",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of work locations",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Work Locations for a Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfLegalEntityWorkLocation"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Legal Entity Work Locations"
        ],
        "summary": "Add Work Location By Legal Entity ID",
        "description": "Data Access: Create Legal Entity Work Location",
        "operationId": "Create Work Location",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "addressData",
            "in": "query",
            "description": "Use Physical Address as mailing address?",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "workLocationPost",
          "description": "Create Work Location model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkLocation"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Returns a CreateOrUpdateResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Legal Entity Work Locations"
        ],
        "summary": "Update Work Location By Legal Entity ID",
        "description": "Data Access: Update Legal Entity Work Location",
        "operationId": "Update Work Location",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the work locations",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "workLocationPut",
          "description": "Update Work Location model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkLocation2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Returns a resource reference for work location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}": {
      "delete": {
        "tags": [
          "Legal Entity Work Locations"
        ],
        "summary": "Delete Work Location By Work Location ID And Legal Entity ID",
        "description": "Data Access: Delete Legal Entity Work Location",
        "operationId": "Delete Work Location",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to delete Work Location",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "workLocationId",
            "in": "path",
            "required": true,
            "description": "ID of the Work Location",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Status Code only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Legal Entity Work Locations"
        ],
        "summary": "Get a Work Location for a Legal Entity By Legal Entity ID and Work Location ID",
        "description": "Data Access: View Legal Entity Work Location",
        "operationId": "Get a Work Location by Legal Entity ID and ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the work location",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "workLocationId",
            "in": "path",
            "required": true,
            "description": "ID of the Work Location",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Legal Entity Work Location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntityWorkLocation"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalentities/{legalEntityId}/worksites": {
      "get": {
        "tags": [
          "Legal Entity Work Sites"
        ],
        "summary": "Get Work Sites for Legal Entity",
        "description": "Data Access: View Legal Entity Work Sites",
        "operationId": "Get Legal Entity Work Sites by Legal Entity Id",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity you want to get Work Sites",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "A token to get next set of results",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A listing of services for the specified Legal Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfWorkSite"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/legalEntities/{legalEntityId}/persons": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get Persons by Legal Entity ID",
        "description": "Data Access: View Legal Entity Persons",
        "operationId": "Get Persons by Legal Entity ID",
        "parameters": [
          {
            "name": "legalEntityId",
            "in": "path",
            "required": true,
            "description": "ID of the Legal Entity for which you want to get the persons",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, Demographic, Benefit, Military, SocialMedia, Addresses, EmployeeAssignments, SocialSecurityNumber, Phones\n\nData Access required\n\nDemographic = View Person Demographic Information\n\nBenefit = View Person Disability and Tobacco Status\n\nMilitary = View Person Military\n\nSocialMedia = View Person Social Media\n\nAddresses = View Person Addresses\n\nEmployeeAssignments = View Employee Records",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludesList",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "IncludesList"
                },
                "$ref": "#/components/schemas/IncludesList"
              }
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of persons",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Person objects, based on the Legal Entity ID & Include provided.\n\nThis endpoint returns all Person details (based on Include parameter) except for Emergency Contact. Those fields are not currently available in bulk.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPerson"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantId}/persons": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get Persons By TenantID",
        "description": "PersonList provides a subset of the full Person fields.\n\nData Access: View Tenant Persons",
        "operationId": "Get Persons by TenantID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "ID of the Tenant for which you want to get persons",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of persons",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of PersonList (a subset of Person fields) objects, based on the TenantID provided. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfPersonList"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantId}/persons/{personId}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get Person By TenantID And PersonID",
        "description": "Note that PersonID and TenantID must always be passed together.\n\nData Access: View Person Information",
        "operationId": "Get Person by TenantID and PersonID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "ID of the Tenant that the Person is in",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "description": "ID of the Person you want to get",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data:  All, Demographic, Benefit, Military, SocialMedia, Addresses, EmployeeAssignments, EmergencyContact, SocialSecurityNumber, Phones\n\nDemographic = View Person Demographic Information\n\nBenefit = View Person Disability and Tobacco Status\n\nMilitary = View Person Military\n\nSocialMedia = View Person Social Media\n\nAddresses = View Person Addresses\n\nEmployeeAssignments = View Employee Records\n\nEmergencyContact = View Person Emergency Contacts\n\nSocialSecurityNumber = View Person SSN\n\nPhones = View Person Phone",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes20"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Person Details based on the TenantID and PersonID provided, with some fields populated based on the Include parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/person": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get Person by EmployeeID",
        "description": "Data Access: View Employee Person",
        "operationId": "Get Person by EmployeeID",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "EmployeeID linked to the Person you want to get",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Options to include more data: All, Demographic, Benefit, Military, SocialMedia, Addresses, EmployeeAssignments, EmergencyContact, SocialSecurityNumber, Phones",
            "schema": {
              "type": "array",
              "nullable": true,
              "xml": {
                "name": "ArrayOfIncludes",
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "Includes"
                },
                "$ref": "#/components/schemas/Includes21"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Person based on the EmployeeID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantId}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get Tenant by TenantID",
        "description": "Data Access: View Tenant Information",
        "operationId": "Get Tenant by TenantID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "ID of the Tenant you want to get",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Tenant based on the TenantID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantId}/worklocations": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get Tenant Work Locations by TenantID",
        "description": "Work Locations are configured at a Tenant level, unlike most other objects which are configured at a Legal Entity level. \n\nData Access: View Tenant Work Locations",
        "operationId": "Get All Work Locations by TenantID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "ID of the Tenant you want to get work locations.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of work locations",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Tenant's Work Locations based on the TenantID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTenantWorkLocation"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantId}/jobtitles": {
      "get": {
        "tags": [
          "Job Titles"
        ],
        "summary": "Get All Job Titles by Tenant ID",
        "description": "Job Titles are configured at a Tenant level, unlike most other objects which are configured at a Legal Entity level.\n\nData Access: View Tenant Job Titles",
        "operationId": "Get All Job Titles by TenantID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "ID of the Tenant you want to get Job Titles.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 1
            },
            "x-position": 1
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Token to get the next set of Job Titles",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Tenant's Job Titles based on the TenantID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultOfTenantJobTitle"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaycorError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PaycorError": {
        "type": "object",
        "description": "The Paycor Error model is used to catch exceptions and related contextual data for logging.",
        "additionalProperties": false,
        "properties": {
          "CorrelationId": {
            "type": "string",
            "description": "Correlation ID will help identify specific transactions and logs when troubleshooting.  This is generated by Paycor systems.",
            "format": "guid",
            "example": "a8bc429b-b515-49a6-8874-8dd1d0c4b8ed"
          },
          "Title": {
            "type": "string",
            "description": "Title is friendly overall information that can be displayed to users.",
            "nullable": true,
            "example": "Validation Error"
          },
          "Detail": {
            "type": "string",
            "description": "Gives more information to describe what the error is.",
            "nullable": true,
            "example": "A validation error occurred. See the source for more information about specific errors."
          },
          "Source": {
            "type": "object",
            "description": "Specific details of the fields that have errors (when applicable).",
            "nullable": true,
            "example": "\"source\": {\n    \"person.lastName\": \"string length to long\",\n    \"person.firstName\": \"must be unique\"\n}",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PagedResultOfJob": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Job"
              },
              "$ref": "#/components/schemas/Job"
            }
          }
        }
      },
      "Job": {
        "type": "object",
        "description": "Details about the Job.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the Job in Paycor's system.",
            "nullable": true,
            "example": "ff80828188da71090188da8f2c240001"
          },
          "ATSAccountId": {
            "type": "string",
            "description": "The ATS client ID.",
            "nullable": true,
            "example": "ff808281889cbe5701889cd426ee0000"
          },
          "Number": {
            "type": "string",
            "description": "The job's human readable job number.",
            "nullable": true,
            "example": 103
          },
          "Title": {
            "type": "string",
            "description": "The job's name.",
            "nullable": true,
            "example": "CCPA Job"
          },
          "Description": {
            "type": "string",
            "description": "The job's description in HTML format.",
            "nullable": true,
            "example": "Job for CCPA supa"
          },
          "Status": {
            "description": "Status of the job. Default is ACTIVE.",
            "example": "APPROVING",
            "$ref": "#/components/schemas/JobStatus"
          },
          "Openings": {
            "type": "integer",
            "description": "The number of openings for the job.",
            "format": "int32",
            "example": 1
          },
          "Priority": {
            "description": "The job's priority",
            "example": "LOW",
            "$ref": "#/components/schemas/JobPriority"
          },
          "Confidential": {
            "type": "boolean",
            "description": "If the job is confidential.",
            "example": true
          },
          "Internal": {
            "type": "boolean",
            "description": "If the job is an internal only job.",
            "example": false
          },
          "TimeToFill": {
            "type": "integer",
            "description": "The targeted time to fill the job.",
            "format": "int32",
            "example": 0
          },
          "RemoteStatus": {
            "description": "The job's remote status.",
            "example": "FullyRemote",
            "$ref": "#/components/schemas/JobRemoteStatus"
          },
          "EeoCategory": {
            "type": "string",
            "description": "The EEO (Equal Employment Opportunity) category specification for the job. Can be one of these values: Executive/Senior-Level Officials and Managers, First/Mid-Level Officials and Managers, Professionals, Technicians, Sales Workers, Administrative Support Workers, Craft Workers, Operatives, Laborers and Helpers, Service Workers.",
            "nullable": true,
            "example": "Technicians"
          },
          "PayRange": {
            "description": "The job's Pay Range.",
            "nullable": true,
            "$ref": "#/components/schemas/JobPayRange"
          },
          "ATSLocation": {
            "description": "The job's location.",
            "nullable": true,
            "$ref": "#/components/schemas/JobLocation"
          },
          "ATSDepartment": {
            "description": "The job's department.",
            "nullable": true,
            "$ref": "#/components/schemas/JobDepartment"
          },
          "HiringManagers": {
            "type": "array",
            "description": "The hiring managers assigned to the job.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "JobUser"
              },
              "$ref": "#/components/schemas/JobUser"
            }
          },
          "Recruiters": {
            "type": "array",
            "description": "The recruiters assigned to the job.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "JobUser"
              },
              "$ref": "#/components/schemas/JobUser"
            }
          },
          "TeamMembers": {
            "type": "array",
            "description": "The team members assigned to the job.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "JobUser"
              },
              "$ref": "#/components/schemas/JobUser"
            }
          },
          "Executives": {
            "type": "array",
            "description": "The executives assigned to the job.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "JobUser"
              },
              "$ref": "#/components/schemas/JobUser"
            }
          },
          "ActivatedDate": {
            "type": "string",
            "description": "The date when the job was activated.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-20T13:45:32.000Z"
          },
          "CreatedDate": {
            "type": "string",
            "description": "The date when the job was created.",
            "format": "date-time",
            "example": "2023-06-20T13:45:32.000Z"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "The date when the job was last modified.",
            "format": "date-time",
            "example": "2023-06-20T13:45:32.000Z"
          },
          "PostedToCareers": {
            "type": "boolean",
            "description": "Is the job posted to the company careers page.",
            "example": true
          },
          "PostedToIndeed": {
            "type": "boolean",
            "description": "Is the job posted to the free Indeed feed.",
            "example": true
          },
          "PostedToSmartSourcing": {
            "type": "boolean",
            "description": "Is the job posted to Smart Sourcing.",
            "example": true
          },
          "PostedToLinkedIn": {
            "type": "boolean",
            "description": "Is the job posted to the free LinkedIn.",
            "example": true
          },
          "PostedToZipRecruiter": {
            "type": "boolean",
            "description": "Is the job posted to the free ZipRecruiter feed.",
            "example": true
          },
          "PostedToGravity": {
            "type": "boolean",
            "description": "Is the job posted to Gravity.\n            ",
            "example": false
          }
        }
      },
      "JobStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "ACTIVE",
          "ACTIVATING",
          "APPROVING",
          "CLOSED",
          "DENIED",
          "DRAFT",
          "FILLED",
          "REVIEWING"
        ],
        "enum": [
          "ACTIVE",
          "ACTIVATING",
          "APPROVING",
          "CLOSED",
          "DENIED",
          "DRAFT",
          "FILLED",
          "REVIEWING"
        ]
      },
      "JobPriority": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NONE",
          "LOW",
          "NORMAL",
          "ON_HOLD",
          "URGENT"
        ],
        "enum": [
          "NONE",
          "LOW",
          "NORMAL",
          "ON_HOLD",
          "URGENT"
        ]
      },
      "JobRemoteStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "OnSite",
          "FullyRemote",
          "WFHFlexible"
        ],
        "enum": [
          "Undefined",
          "OnSite",
          "FullyRemote",
          "WFHFlexible"
        ]
      },
      "JobPayRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "Minimum": {
            "type": "number",
            "format": "double"
          },
          "Maximum": {
            "type": "number",
            "format": "double"
          },
          "PayPeriod": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "JobLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Id of Job Location.",
            "nullable": true,
            "example": "ff808281889cbe5701889cd6fec40020"
          },
          "Address1": {
            "type": "string",
            "description": "Address Line One of Job Location.",
            "nullable": true,
            "example": "707 MLK dr."
          },
          "Address2": {
            "type": "string",
            "description": "Address Line Two of Job Location.",
            "nullable": true,
            "example": "Apt 5"
          },
          "City": {
            "type": "string",
            "description": "City of Job Location.",
            "nullable": true,
            "example": "fort collins"
          },
          "State": {
            "type": "string",
            "description": "State of Job Location.",
            "nullable": true,
            "example": "CO"
          },
          "PostalCode": {
            "type": "string",
            "description": "Postal Code of Job Location.",
            "nullable": true,
            "example": 80524
          },
          "Country": {
            "type": "string",
            "description": "Country of Job Location.",
            "nullable": true,
            "example": "USA"
          }
        }
      },
      "JobDepartment": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Id of Job Department.",
            "nullable": true,
            "example": "ff808281889cbe5701889cd6f382001b"
          },
          "Title": {
            "type": "string",
            "description": "Title of Job Department.",
            "nullable": true,
            "example": "other"
          }
        }
      },
      "JobUser": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of the User.",
            "format": "int32",
            "example": 347854
          },
          "Email": {
            "type": "string",
            "description": "Email Id of the User.",
            "nullable": true,
            "example": "jeff@admin.com"
          },
          "FirstName": {
            "type": "string",
            "description": "First Name of the User.",
            "nullable": true,
            "example": "Jeff"
          },
          "LastName": {
            "type": "string",
            "description": "Last Name of the User.",
            "nullable": true,
            "example": "Jones"
          }
        }
      },
      "Includes": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    HiringManagers - Include the list of hiring managers in the response\n\n\n    Recruiters - Include the list of recruiters in the response\n\n\n    TeamMembers - Include the list of team members in the response\n\n\n    Executives - Include the list of executives in the response",
        "x-enumNames": [
          "All",
          "HiringManagers",
          "Recruiters",
          "TeamMembers",
          "Executives"
        ],
        "enum": [
          "All",
          "HiringManagers",
          "Recruiters",
          "TeamMembers",
          "Executives"
        ]
      },
      "Includes2": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    HiringManagers - Include the list of hiring managers in the response\n\n\n    Recruiters - Include the list of recruiters in the response\n\n\n    TeamMembers - Include the list of team members in the response\n\n\n    Executives - Include the list of executives in the response",
        "x-enumNames": [
          "All",
          "HiringManagers",
          "Recruiters",
          "TeamMembers",
          "Executives"
        ],
        "enum": [
          "All",
          "HiringManagers",
          "Recruiters",
          "TeamMembers",
          "Executives"
        ]
      },
      "PagedResultOfATSAccount": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ATSAccount"
              },
              "$ref": "#/components/schemas/ATSAccount"
            }
          }
        }
      },
      "ATSAccount": {
        "type": "object",
        "description": "Details about the ATS Account",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the ATS Account.",
            "nullable": true,
            "example": "ff80828188da71090188da8f2c240001"
          },
          "Title": {
            "type": "string",
            "description": "The ATS Account title.",
            "nullable": true,
            "example": "CCPA ATS Account"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "description": "The OAuth2 refresh token that can be exchanged for access token.",
        "additionalProperties": false,
        "required": [
          "refresh_token",
          "client_id",
          "client_secret"
        ],
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The refresh token previously issued to the client.",
            "minLength": 1
          },
          "client_id": {
            "type": "string",
            "description": "OAuth Client Id. It can be read from Application page > Security Connections tab.",
            "minLength": 1
          },
          "client_secret": {
            "type": "string",
            "description": "OAuth Client Secret. It can be read from Application page > Security Connections tab.",
            "minLength": 1
          }
        }
      },
      "CreateOrUpdateResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResourceUrl": {
            "description": "URL to access the resource information about the entity that was created or updated.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "ResourceReference": {
        "type": "object",
        "description": "The Resource Reference model is used to provide URL links to resources. ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "ID of the resource being referenced. This is generated by Paycor.",
            "nullable": true,
            "example": "d63759d5-40cc-4ec2-98df-772342f1b974"
          },
          "Url": {
            "type": "string",
            "description": "URL to reach the resource being referenced",
            "nullable": true,
            "example": "v1/myresources/resource?resourceID=d63759d5-40cc-4ec2-98df-772342f1b974"
          }
        }
      },
      "EmergencyContact": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "FirstName",
          "LastName"
        ],
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the emergency contact.",
            "minLength": 1,
            "example": "Charles"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the emergency contact.",
            "nullable": true,
            "example": "Lutwidge"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the emergency contact.",
            "minLength": 1,
            "example": "Dodgson"
          },
          "Relationship": {
            "description": "Relationship of the emergency contact with the employee.",
            "example": "Father",
            "$ref": "#/components/schemas/Relationship"
          },
          "HomePhone": {
            "type": "string",
            "description": "Home Phone of the emergency contact.\nMust be 10 characters.\n            ",
            "nullable": true,
            "example": 1234567890
          },
          "WorkPhone": {
            "type": "string",
            "description": "Work Phone of the emergency contact.\nMust be 10 characters.\n            ",
            "nullable": true,
            "example": 1234567890
          },
          "WorkPhoneExtension": {
            "type": "string",
            "description": "Work Phone extension of the emergency contact.\n            ",
            "nullable": true,
            "example": 123
          },
          "MobilePhone": {
            "type": "string",
            "description": "Mobile Phone of the emergency contact.\nMust be 10 characters.\n            ",
            "nullable": true,
            "example": 1234567890
          },
          "EmailAddress": {
            "type": "string",
            "description": "Email Address of the emergency contact.\n            ",
            "nullable": true,
            "example": "abc@paycor.com"
          }
        }
      },
      "Relationship": {
        "type": "string",
        "description": "Enumeration of valid Types of Relationship values.\n            ",
        "x-enumNames": [
          "Daughter",
          "Father",
          "Friend",
          "Grandparent",
          "Mother",
          "Other",
          "Sibling",
          "Son",
          "Spouse"
        ],
        "enum": [
          "Daughter",
          "Father",
          "Friend",
          "Grandparent",
          "Mother",
          "Other",
          "Sibling",
          "Son",
          "Spouse"
        ]
      },
      "PagedResultOfEmployeeCertification": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeCertification"
              },
              "$ref": "#/components/schemas/EmployeeCertification"
            }
          }
        }
      },
      "EmployeeCertification": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CertificationId": {
            "type": "string",
            "description": "Identifier of certification.\n            ",
            "format": "guid",
            "nullable": true,
            "example": "dd71aee2-22c8-4937-a3d7-28a4ad3f1df7"
          },
          "CertificationName": {
            "type": "string",
            "description": "Name of certification\n            ",
            "nullable": true,
            "example": "First Aid certificate"
          },
          "CertificationNumber": {
            "type": "string",
            "description": "Number of certification\n            ",
            "nullable": true,
            "example": "436576"
          },
          "CertificationOrganizationName": {
            "type": "string",
            "description": "Name of certification organization\n            ",
            "nullable": true,
            "example": "Training CO."
          },
          "CertificationOrganizationId": {
            "type": "string",
            "description": "Id of certification organization\n            ",
            "format": "guid",
            "nullable": true,
            "example": "590BC80F-94A1-4ABD-9A6B-7242C818EDF5"
          },
          "EmployeeCertificationId": {
            "type": "string",
            "description": "Id of employee certification\n            ",
            "format": "guid",
            "example": "FDB487C7-E853-4097-8697-B705AC3C7ABF"
          },
          "Notes": {
            "type": "string",
            "description": "Certification notes\n            ",
            "nullable": true,
            "example": "Compleated required training"
          },
          "EffectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Expiration date of certification\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-19"
          }
        }
      },
      "EmployeeCertification2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "EmployeeCertificationId"
        ],
        "properties": {
          "CertificationNumber": {
            "type": "string",
            "description": "Number of certification\n            ",
            "nullable": true,
            "example": "436576"
          },
          "EmployeeCertificationId": {
            "type": "string",
            "description": "Id of employee certification\n            ",
            "format": "guid",
            "minLength": 1,
            "example": "FDB487C7-E853-4097-8697-B705AC3C7ABF"
          },
          "EffectiveDate": {
            "type": "string",
            "description": "Effective date of certification\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-09"
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Expiration date of certification\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-19"
          },
          "Notes": {
            "type": "string",
            "description": "Note on certification\n            ",
            "nullable": true,
            "example": "note: expires soon"
          }
        }
      },
      "Certification": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "CertificationName"
        ],
        "properties": {
          "EffectiveDate": {
            "type": "string",
            "description": "Effective date of certification\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-09"
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Expiration date of certification\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-19"
          },
          "CertificationName": {
            "type": "string",
            "description": "Name of certification\n            ",
            "minLength": 1,
            "example": "First Aid certificate"
          },
          "CertificationNumber": {
            "type": "string",
            "description": "Number of certification\n            ",
            "nullable": true,
            "example": "436576"
          },
          "CertificationOrganizationName": {
            "type": "string",
            "description": "Name of certification organization\n            ",
            "nullable": true,
            "example": "Red Cross"
          },
          "Notes": {
            "type": "string",
            "description": "Note on certification\n            ",
            "nullable": true,
            "example": "note: expires soon"
          }
        }
      },
      "PagedResultOfEmployeeCustomField": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeCustomField"
              },
              "$ref": "#/components/schemas/EmployeeCustomField"
            }
          }
        }
      },
      "EmployeeCustomField": {
        "type": "object",
        "description": "Allows reading the value of a Custom Field set on a particular Employee. ",
        "additionalProperties": false,
        "properties": {
          "CustomFieldId": {
            "type": "string",
            "description": "Unique identifier of the Custom Field. Generated by Paycor.\n            ",
            "format": "guid",
            "example": "7b64160b-0a3a-0000-0000-000014e00100"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "LegalEntityId that created the Custom Field.",
            "format": "int32",
            "example": 123666
          },
          "FieldName": {
            "type": "string",
            "description": "Name of the custom field, set at the Legal Entity level.",
            "nullable": true,
            "example": "Payroll"
          },
          "DataType": {
            "description": "Data type for the custom field. Values submitted (in PUT Employee Custom Field) must be of this type. ",
            "example": "FreeFormAlphaNumeric",
            "$ref": "#/components/schemas/CustomFieldDataType"
          },
          "Value": {
            "type": "string",
            "description": "Value of the custom field set for this employee.\nExpected Datatype could be string, float, or date - depending on the setup of the LegalEntity Custom Field.",
            "nullable": true,
            "example": "Division 1"
          },
          "IsRequired": {
            "type": "boolean",
            "description": "Whether this custom field is required to be setup on each Employee.",
            "example": false
          },
          "CustomFieldsOptions": {
            "type": "array",
            "description": "Valid list of values for a custom field (for appropriate types)",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            }
          },
          "DateModified": {
            "type": "string",
            "description": "Date when custom field value was last modified.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-14T07:24:44.807"
          },
          "Employee": {
            "description": "URL to access the Employees resource for information about the employee. ",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "CustomFieldDataType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "FreeFormAlphaNumeric",
          "FreeFormCurrency",
          "DropDownAlphaNumeric",
          "DropDownYesNo",
          "DropDownCurrency",
          "Date",
          "PickListAlphaNumeric",
          "PickListCurrency"
        ],
        "enum": [
          "FreeFormAlphaNumeric",
          "FreeFormCurrency",
          "DropDownAlphaNumeric",
          "DropDownYesNo",
          "DropDownCurrency",
          "Date",
          "PickListAlphaNumeric",
          "PickListCurrency"
        ]
      },
      "EmployeeCustomField2": {
        "type": "object",
        "description": "Allows upserting (inserting or updating) a value for a specific Custom Field on a specific Employee. \nCalling this twice will replace the previously-supplied value. \nYou must first call GET Employee Custom Fields, to identify a CustomFieldId and the datatype for its Value. ",
        "additionalProperties": false,
        "required": [
          "CustomFieldId",
          "Value"
        ],
        "properties": {
          "CustomFieldId": {
            "type": "string",
            "description": "Unique identifier of the Custom Field, available via GET Employee Custom Fields. \nUsed to lookup which field value to update on this employee. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "7b64160b-0a3a-0000-0000-000014e00100"
          },
          "Value": {
            "type": "string",
            "description": "Value of the custom field set for this employee.\nExpected Datatype could be string, float, or date - depending on the setup of the LegalEntity Custom Field.",
            "minLength": 1,
            "example": "Division 1"
          }
        }
      },
      "EmployeeDeduction": {
        "type": "object",
        "description": "The Employee Deduction model represents Employee level Deduction information.\nProvides link to associated Employee information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee deduction in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "cb4a1b67-000c-0000-0000-000066000000"
          },
          "Code": {
            "type": "string",
            "description": "Unique deduction code set at the legal entity or tenant level.  ",
            "nullable": true,
            "example": "Pension"
          },
          "Description": {
            "type": "string",
            "description": "Description of the employee deduction code.",
            "nullable": true,
            "example": "Pension Plan Deduction"
          },
          "Type": {
            "description": "Enumeration of valid types of employee deduction values.",
            "example": "D125",
            "$ref": "#/components/schemas/DeductionType"
          },
          "Frequency": {
            "description": "Enumeration of valid employee deduction frequency values.\n            ",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "IncludeInPay": {
            "description": "Enumeration of valid values indicating which pay run should include the employee deduction.",
            "example": "AllPay",
            "$ref": "#/components/schemas/IncludeInPay"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether the employee deduction should be not deducted in a paycheck. This is specified by the 'Calculate' checkbox in the Paycor UI. Default is OnHold=false, meaning Calculate=true.\n            ",
            "example": false
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee deduction takes effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee deduction is no longer in effect (soft-delete flag). Null if deduction is still in effect. \nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "AmountData": {
            "type": "array",
            "description": "List of type EmployeeDeductionAmount containing the employee's deduction rates and amounts.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeDeductionAmount"
              },
              "$ref": "#/components/schemas/EmployeeDeductionAmount"
            }
          },
          "Employee": {
            "description": "URL to access the Employee resource containing additional employee information. \n            ",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "LegalEntityDeduction": {
            "description": "URL to access the Legal Entity Deduction resource for information about the legal entity's deductions. Currently returns the list. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/deductions/",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "DeductionType": {
        "type": "string",
        "description": "Enumeration of valid Types of Deduction values.\n            ",
        "x-enumNames": [
          "CS",
          "D",
          "D125",
          "DCNTCAF",
          "DDIR",
          "DINV",
          "DM",
          "DME",
          "DTADJ",
          "FB",
          "OB",
          "OD",
          "PPD",
          "PPEC",
          "PPL",
          "SD"
        ],
        "enum": [
          "CS",
          "D",
          "D125",
          "DCNTCAF",
          "DDIR",
          "DINV",
          "DM",
          "DME",
          "DTADJ",
          "FB",
          "OB",
          "OD",
          "PPD",
          "PPEC",
          "PPL",
          "SD"
        ]
      },
      "PayFrequency": {
        "type": "string",
        "description": "Enumeration of valid Pay Frequency values.",
        "x-enumNames": [
          "EveryPayPeriod",
          "FirstPayPeriodOfMonth",
          "SecondPayPeriodOfMonth",
          "ThirdPayPeriodOfMonth",
          "FourthPayPeriodOfMonth",
          "EveryNotThirdNotFifth",
          "FirstAndThirdPayPeriod",
          "SecondAndFourthPayPeriod",
          "LastPayPeriod",
          "SpecialOccurrence",
          "FirstAndSecondPayPeriod"
        ],
        "enum": [
          "EveryPayPeriod",
          "FirstPayPeriodOfMonth",
          "SecondPayPeriodOfMonth",
          "ThirdPayPeriodOfMonth",
          "FourthPayPeriodOfMonth",
          "EveryNotThirdNotFifth",
          "FirstAndThirdPayPeriod",
          "SecondAndFourthPayPeriod",
          "LastPayPeriod",
          "SpecialOccurrence",
          "FirstAndSecondPayPeriod"
        ]
      },
      "IncludeInPay": {
        "type": "string",
        "description": "Enumeration of valid IncludeInPay values indicating which pay run to include an Earning or Deduction.",
        "x-enumNames": [
          "AddtlPayOnly",
          "AllPay",
          "RegularOnly"
        ],
        "enum": [
          "AddtlPayOnly",
          "AllPay",
          "RegularOnly"
        ]
      },
      "EmployeeDeductionAmount": {
        "type": "object",
        "description": "The Employee Deduction Amount model represents Employee Deductions Amount data.",
        "additionalProperties": false,
        "properties": {
          "Rate": {
            "type": "number",
            "description": "Percentage value set by the user.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.58
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 3141.59
          },
          "Factor": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee deduction rates and amounts take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee deduction rates and amounts are no longer in effect (soft-delete flag). Null if still active.\nDate is formatted as MM/DD/YYY\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00:00Z"
          }
        }
      },
      "Includes3": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "All",
          "AmountData"
        ],
        "enum": [
          "All",
          "AmountData"
        ]
      },
      "PagedResultOfEmployeeDeduction": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeDeduction"
              },
              "$ref": "#/components/schemas/EmployeeDeduction"
            }
          }
        }
      },
      "Includes4": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "All",
          "AmountData"
        ],
        "enum": [
          "All",
          "AmountData"
        ]
      },
      "EmployeeDeduction2": {
        "type": "object",
        "description": "The employee deduction create model",
        "additionalProperties": false,
        "required": [
          "Code"
        ],
        "properties": {
          "Code": {
            "type": "string",
            "description": "Unique deduction code set at the legal entity or tenant level.  ",
            "minLength": 1,
            "example": "Pension"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Specifies whether the deduction should be deducted in a paycheck.\n            "
          },
          "Frequency": {
            "description": "Enumeration of valid employee deduction frequency values.\n            ",
            "example": "FirstPayPeriodOfMonth",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "IncludeInPay": {
            "description": "Enumeration of valid values indicating which pay run should include the employee deduction.",
            "example": "AllPay",
            "$ref": "#/components/schemas/IncludeInPay"
          },
          "AmountData": {
            "type": "array",
            "description": "Specifies the rate and amount for the employee deduction.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeDeductionAmount"
              },
              "$ref": "#/components/schemas/EmployeeDeductionAmount2"
            }
          }
        }
      },
      "EmployeeDeductionAmount2": {
        "type": "object",
        "description": "The Employee Deduction Amount model represents Employee Deductions Amount data.",
        "additionalProperties": false,
        "required": [
          "EffectiveStartDate"
        ],
        "properties": {
          "Rate": {
            "type": "number",
            "description": "Percentage value set by the user.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.58
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 3141.59
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee deduction rates and amounts take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee deduction rates and amounts are no longer in effect.\nIf null, then the rate & amount are still in effect. If not null, the rate & amount are considered \"deleted.\"\nDate is formatted as MM/DD/YYY\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00:00Z"
          }
        }
      },
      "EmployeeDeduction3": {
        "type": "object",
        "description": "The employee deduction update model",
        "additionalProperties": false,
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "The unique identifier of this employee deduction generated in Paycor's system. Used as the Key for Update (PUT) endpoint. ",
            "format": "guid",
            "minLength": 1
          },
          "IncludeInPay": {
            "description": "Enumeration of valid values indicating which pay run should include the employee deduction.",
            "nullable": true,
            "example": "AllPay",
            "$ref": "#/components/schemas/IncludeInPay"
          },
          "Frequency": {
            "description": "Enumeration of valid employee deduction frequency values.\n            ",
            "nullable": true,
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Specifies whether the deduction should be deducted in a paycheck. Required, defaults to false (meaning it should be deducted).\n            ",
            "nullable": true
          },
          "AmountData": {
            "type": "array",
            "description": "Specifies the rate and amount for the employee deduction.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeDeductionAmount"
              },
              "$ref": "#/components/schemas/EmployeeDeductionAmount3"
            }
          }
        }
      },
      "EmployeeDeductionAmount3": {
        "type": "object",
        "description": "The Employee Deduction Amount model represents Employee Deductions Amount data.",
        "additionalProperties": false,
        "required": [
          "EffectiveStartDate"
        ],
        "properties": {
          "Rate": {
            "type": "number",
            "description": "Percentage value set by the user.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.58
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 3141.59
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee deduction rates and amounts take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee deduction rates and amounts are no longer in effect (soft-delete flag). Null if rate & amount is still active.\nDate is formatted as MM/DD/YYY\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00:00Z"
          }
        }
      },
      "PagedResultOfEmployeeDirectDeposit": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeDirectDeposit"
              },
              "$ref": "#/components/schemas/EmployeeDirectDeposit"
            }
          }
        }
      },
      "EmployeeDirectDeposit": {
        "type": "object",
        "description": "The Employee Direct Deposit model represents an Employee's Direct Deposit information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee direct deposit in Paycor's system. Generated by Paycor.\n            ",
            "format": "guid",
            "example": "5e699a0d-0000-0000-0000-0007d54d9839"
          },
          "AccountType": {
            "description": "Enumeration of valid account type values. This specifies the type of account the employee's direct deposit is destined for. \n            ",
            "example": "C",
            "$ref": "#/components/schemas/AccountType"
          },
          "MaskedAccountNumber": {
            "type": "string",
            "description": "The masked bank account number where the direct deposit is directed.\n            ",
            "nullable": true,
            "example": "****5678"
          },
          "RoutingNumber": {
            "type": "string",
            "description": "The bank routing number where the direct deposit is directed. \n            ",
            "nullable": true,
            "example": 322271627
          },
          "BankName": {
            "type": "string",
            "description": "Name of the bank receiving the employee's direct deposit.\n            ",
            "nullable": true,
            "example": "J.P. MORGAN CHASE BANK, N.A."
          },
          "Frequency": {
            "description": "Enumeration of valid pay frequency values.",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "DeductionCode": {
            "type": "string",
            "description": "Unique deduction code set at the legal entity or tenant level.  ",
            "nullable": true,
            "example": "Pension"
          },
          "DirectDepositType": {
            "description": "Enumeration of valid types of direct deposit values.",
            "example": "Net",
            "$ref": "#/components/schemas/DirectDepositType"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether any money should be deposited into the direct deposit account.",
            "nullable": true,
            "example": true
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 22.22
          },
          "Rate": {
            "type": "number",
            "description": "Percentage of the paycheck to be deposited into the direct deposit account\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.84
          },
          "Employee": {
            "description": "URL to access the Employee resource for information about the employee. ",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "AccountType": {
        "type": "string",
        "description": "Enumeration of valid Types of Account values.",
        "x-enumNames": [
          "Checking",
          "Savings"
        ],
        "enum": [
          "Checking",
          "Savings"
        ]
      },
      "DirectDepositType": {
        "type": "string",
        "description": "Enumeration of valid Types of Direct Deposit values.",
        "x-enumNames": [
          "Net",
          "Partial"
        ],
        "enum": [
          "Net",
          "Partial"
        ]
      },
      "EmployeeHsaDirectDeposit": {
        "type": "object",
        "description": "The Employee HSA Direct Deposit model represents an Employee's HSA Direct Deposit information.",
        "additionalProperties": false,
        "required": [
          "AccountType",
          "Frequency",
          "DeductionCode",
          "OnHold"
        ],
        "properties": {
          "AccountType": {
            "description": "Enumeration of valid account type values. This specifies the type of account the employee's HSA direct deposit is destined for. \n            ",
            "example": "C",
            "$ref": "#/components/schemas/AccountType"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The bank account number where the HSA direct deposit is directed.\n            ",
            "nullable": true,
            "example": 1234567890
          },
          "RoutingNumber": {
            "type": "string",
            "description": "The bank routing number where the HSA direct deposit is directed. \n            ",
            "nullable": true,
            "example": 322271627
          },
          "Frequency": {
            "description": "Enumeration of valid pay frequency values.",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "DeductionCode": {
            "type": "string",
            "description": "Unique deduction code set at the legal entity or tenant level.  ",
            "minLength": 1,
            "example": "Pension"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether any money should be deposited into the HSA direct deposit account.",
            "example": true
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 22.22
          },
          "Rate": {
            "type": "number",
            "description": "Percentage of the paycheck to be deposited into the HSA direct deposit account\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.84
          }
        }
      },
      "EmployeeHsaDirectDeposit2": {
        "type": "object",
        "description": "The Employee HSA Direct Deposit model represents an Employee's HSA Direct Deposit information.",
        "additionalProperties": false,
        "required": [
          "Id",
          "AccountType",
          "AccountNumber",
          "RoutingNumber",
          "Frequency",
          "OnHold"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee hsa direct deposit in Paycor's system. Generated by Paycor.\n            ",
            "format": "guid",
            "minLength": 1,
            "example": "5e699a0d-0000-0000-0000-0007d54d9839"
          },
          "AccountType": {
            "description": "Enumeration of valid account type values. This specifies the type of account the employee's HSA direct deposit is destined for. \n            ",
            "example": "C",
            "$ref": "#/components/schemas/AccountType"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The bank account number where the HSA direct deposit is directed.\n            ",
            "minLength": 1,
            "example": 1234567890
          },
          "RoutingNumber": {
            "type": "string",
            "description": "The bank routing number where the HSA direct deposit is directed. \n            ",
            "minLength": 1,
            "example": 322271627
          },
          "Frequency": {
            "description": "Enumeration of valid pay frequency values.",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether any money should be deposited into the HSA direct deposit account.",
            "example": true
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 22.22
          },
          "Rate": {
            "type": "number",
            "description": "Percentage of the paycheck to be deposited into the HSA direct deposit account\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.84
          }
        }
      },
      "EmployeeDirectDeposit2": {
        "type": "object",
        "description": "The Employee Direct Deposit model represents an Employee's Direct Deposit information.",
        "additionalProperties": false,
        "required": [
          "AccountType",
          "Frequency",
          "OnHold"
        ],
        "properties": {
          "AccountType": {
            "description": "Enumeration of valid account type values. This specifies the type of account the employee's direct deposit is destined for. \n            ",
            "example": "C",
            "$ref": "#/components/schemas/AccountType"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The bank account number where the direct deposit is directed.\n            ",
            "nullable": true,
            "example": 1234567890
          },
          "RoutingNumber": {
            "type": "string",
            "description": "The bank routing number where the direct deposit is directed. \n            ",
            "nullable": true,
            "example": 322271627
          },
          "Frequency": {
            "description": "Enumeration of valid pay frequency values.\nIf DirectDepositType is Partial, Value is required.\nIf DirectDepositType is Net, Value is required to be EveryPayPeriod.",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "DeductionCode": {
            "type": "string",
            "nullable": true
          },
          "DirectDepositType": {
            "description": "Enumeration of valid types of direct deposit values.",
            "example": "Net",
            "$ref": "#/components/schemas/DirectDepositType"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether any money should be deposited into the direct deposit account.",
            "example": true
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 22.22
          },
          "Rate": {
            "type": "number",
            "description": "Percentage of the paycheck to be deposited into the direct deposit account\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.84
          }
        }
      },
      "EmployeeDirectDeposit3": {
        "type": "object",
        "description": "The Employee Direct Deposit model represents an Employee's Direct Deposit information.",
        "additionalProperties": false,
        "required": [
          "Id",
          "AccountType",
          "AccountNumber",
          "RoutingNumber",
          "Frequency",
          "OnHold"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee direct deposit in Paycor's system. Generated by Paycor.\n            ",
            "format": "guid",
            "minLength": 1,
            "example": "5e699a0d-0000-0000-0000-0007d54d9839"
          },
          "AccountType": {
            "description": "Enumeration of valid account type values. This specifies the type of account the employee's direct deposit is destined for. \n            ",
            "example": "C",
            "$ref": "#/components/schemas/AccountType"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The bank account number where the direct deposit is directed.\n            ",
            "minLength": 1,
            "example": 1234567890
          },
          "RoutingNumber": {
            "type": "string",
            "description": "The bank routing number where the direct deposit is directed. \n            ",
            "minLength": 1,
            "example": 322271627
          },
          "Frequency": {
            "description": "Enumeration of valid pay frequency values.\nIf DirectDepositType is Partial, Value is required.\nIf DirectDepositType is Net, Value is required to be EveryPayPeriod.",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "DirectDepositType": {
            "description": "Enumeration of valid types of direct deposit values.",
            "example": "Net",
            "$ref": "#/components/schemas/DirectDepositType"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether any money should be deposited into the direct deposit account.",
            "example": true
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 22.22
          },
          "Rate": {
            "type": "number",
            "description": "Percentage of the paycheck to be deposited into the direct deposit account\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.84
          }
        }
      },
      "PagedResultOfPayStubFile": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubFile"
              },
              "$ref": "#/components/schemas/PayStubFile"
            }
          }
        }
      },
      "PayStubFile": {
        "type": "object",
        "description": "PayStubFile represents an object that holds information about pay stub file.",
        "additionalProperties": false,
        "properties": {
          "PayrollId": {
            "type": "string",
            "description": "Unique identifier of the parent payroll in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52a2s23-0000-0000-0000-0007d0009840"
          },
          "PlannerId": {
            "type": "string",
            "description": "Id of the planner for this payment",
            "format": "guid",
            "nullable": true,
            "example": "5f407b07-014a-0000-0000-00009add0300"
          },
          "CheckDate": {
            "type": "string",
            "description": "The paycheck date. Also referred to as Pay Date.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "ProcessDate": {
            "type": "string",
            "description": "The internal pay processing date for this employee.",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "DocumentId": {
            "type": "string",
            "description": "Unique identifier of the Document.",
            "format": "guid",
            "example": "3bb813a8-0000-0000-0000-000066000000"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system. This is also known as the Client Id.\n            ",
            "format": "int32",
            "example": 501123
          },
          "FileName": {
            "type": "string",
            "description": "Name of the file.",
            "nullable": true,
            "example": "Paystub.pdf"
          },
          "PayStubDocumentURL": {
            "description": "Resource url used for downloading the file.",
            "nullable": true,
            "example": "URL to access the Employee Pay Stub document link",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfTaxFile": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TaxFile"
              },
              "$ref": "#/components/schemas/TaxFile"
            }
          }
        }
      },
      "TaxFile": {
        "type": "object",
        "description": "TaxFile represents an object that holds information about taxes.",
        "additionalProperties": false,
        "properties": {
          "ReportType": {
            "type": "string",
            "description": "Type of the report.",
            "nullable": true,
            "example": "W2C"
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the Employee in Paycor's system.\n            ",
            "format": "guid",
            "example": "9bf397b0-fd86-0000-0000-000047e80100"
          },
          "Year": {
            "type": "integer",
            "description": "Tax year of the document.",
            "format": "int32",
            "example": 2020
          },
          "DocumentId": {
            "type": "string",
            "description": "Unique identifier of the Document.",
            "format": "guid",
            "nullable": true,
            "example": "3bb813a8-0000-0000-0000-000066000000"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system. This is also known as the Client Id.\n            ",
            "format": "int32",
            "example": 501123
          },
          "ReportName": {
            "type": "string",
            "description": "Name of the report.",
            "nullable": true,
            "example": "Tax form - W2C"
          },
          "FileName": {
            "type": "string",
            "description": "Name of the tax document.",
            "nullable": true,
            "example": "Paystub.pdf"
          },
          "TaxDocumentURL": {
            "description": "Resource url used for downloading the file.",
            "nullable": true,
            "example": "URL to access the Employee Tax document link",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "EmployeeInformation": {
        "type": "object",
        "description": "Represents information related to an Employee for whom the Tax document has been requested for.",
        "additionalProperties": false,
        "required": [
          "SocialSecurityNumber"
        ],
        "properties": {
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social security number of the employee.",
            "minLength": 1,
            "example": 555555555
          }
        }
      },
      "EmployeeEarning": {
        "type": "object",
        "description": "A record of one specific earning that one particular employee has setup, including employee-specific details such as amount. Must be tied to an earning at the LegalEntity level.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee earning in Paycor's system.",
            "format": "guid",
            "example": "eae83607-000c-0000-0000-000066000000"
          },
          "Code": {
            "type": "string",
            "description": "Descriptive earning identifier which appears on paychecks. Only set at the legal entity or tenant level.",
            "nullable": true,
            "example": "BonusDis"
          },
          "Description": {
            "type": "string",
            "description": "Description of the employee earning code.",
            "nullable": true,
            "example": "Bonus Discretionary"
          },
          "Type": {
            "description": "Enumeration of valid type of employee earning values.",
            "example": "FB",
            "$ref": "#/components/schemas/EarningType"
          },
          "Frequency": {
            "description": "Enumeration of valid Pay Frequency values.\n            ",
            "example": "LastPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Order earnings are calculated based on sequence values.\nThis is needed so earnings dependent on other earnings are calculated in the proper sequence.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "IncludeInPay": {
            "description": "Enumeration of valid values indicating which pay run should include the employee earning.",
            "example": "A",
            "$ref": "#/components/schemas/IncludeInPay"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether the employee earning should included in a paycheck. This is specified by the 'Calculate' checkbox in the Paycor UI.\n            ",
            "example": false
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee earning take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee earning is no longer in effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00Z"
          },
          "AmountData": {
            "type": "array",
            "description": "List of the employee's earning rates, factors and amounts of type EmployeeEarningAmount.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeEarningAmount"
              },
              "$ref": "#/components/schemas/EmployeeEarningAmount"
            }
          },
          "Employee": {
            "description": "URL to access the Employees resource for information about the employee. \n            ",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "LegalEntityEarning": {
            "description": "URL to access the Legal Entity Earning resource for information about the legal entity's earnings.\n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/earnings",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "EarningType": {
        "type": "string",
        "description": "Enumeration of valid Types of Earning values.\n            ",
        "x-enumNames": [
          "A",
          "E",
          "ESL",
          "FB",
          "MOTE",
          "NOBENHR",
          "NONQ",
          "NTOTEAR",
          "OE",
          "OEX",
          "OTE",
          "OTPE",
          "RE",
          "REG",
          "REX",
          "SE",
          "TENX",
          "TpE",
          "TPS"
        ],
        "enum": [
          "A",
          "E",
          "ESL",
          "FB",
          "MOTE",
          "NOBENHR",
          "NONQ",
          "NTOTEAR",
          "OE",
          "OEX",
          "OTE",
          "OTPE",
          "RE",
          "REG",
          "REX",
          "SE",
          "TENX",
          "TpE",
          "TPS"
        ]
      },
      "EmployeeEarningAmount": {
        "type": "object",
        "description": "The Employee Earning Amount model represents Employee Earning Amount data.",
        "additionalProperties": false,
        "required": [
          "EffectiveStartDate"
        ],
        "properties": {
          "Rate": {
            "type": "number",
            "description": "Amount per hour the employee will obtain from this earning.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 55.55
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 5555.55
          },
          "Factor": {
            "type": "number",
            "description": "Multiplier used with the hourly rate to calculate other earnings.\nDefault value is 1, unless changed at the global level.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 1
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee earning rates and amounts take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-12-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee earning rates and amounts are no longer in effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00:00Z"
          }
        }
      },
      "Includes5": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    AmountData - Include amount data",
        "x-enumNames": [
          "All",
          "AmountData"
        ],
        "enum": [
          "All",
          "AmountData"
        ]
      },
      "PagedResultOfEmployeeEarning": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeEarning"
              },
              "$ref": "#/components/schemas/EmployeeEarning"
            }
          }
        }
      },
      "Includes6": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    AmountData - Include amount data",
        "x-enumNames": [
          "All",
          "AmountData"
        ],
        "enum": [
          "All",
          "AmountData"
        ]
      },
      "EmployeeEarning2": {
        "type": "object",
        "description": "A record of one specific earning that one particular employee has setup, including employee-specific details such as amount. Must be tied to an earning at the LegalEntity level.",
        "additionalProperties": false,
        "required": [
          "Code",
          "AmountData"
        ],
        "properties": {
          "Code": {
            "type": "string",
            "description": "Descriptive earning identifier which appears on paychecks. Only set at the legal entity or tenant level.",
            "minLength": 1,
            "example": "BonusDis"
          },
          "Frequency": {
            "description": "Enumeration of valid Pay Frequency values.\n            ",
            "example": "LastPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Order earnings are calculated based on sequence values.\nThis is needed so earnings dependent on other earnings are calculated in the proper sequence.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "IncludeInPay": {
            "description": "Enumeration of valid values indicating which pay run should include the employee earning.",
            "example": "A",
            "$ref": "#/components/schemas/IncludeInPay"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether the employee earning should included in a paycheck. This is specified by the 'Calculate' checkbox in the Paycor UI.\n            ",
            "example": false
          },
          "AmountData": {
            "type": "array",
            "description": "List of the employee's earning rates, factors and amounts of type EmployeeEarningAmount.\n            ",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeEarningAmount"
              },
              "$ref": "#/components/schemas/EmployeeEarningAmount"
            }
          }
        }
      },
      "EmployeeEarning3": {
        "type": "object",
        "description": "A record of one specific earning that one particular employee has setup, including employee-specific details such as amount. Must be tied to an earning at the LegalEntity level.",
        "additionalProperties": false,
        "required": [
          "Id",
          "Code",
          "Frequency",
          "IncludeInPay",
          "OnHold",
          "AmountData"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "The unique identifier of this employee earning generated in Paycor's system.",
            "format": "guid",
            "minLength": 1
          },
          "Code": {
            "type": "string",
            "description": "Descriptive earning identifier which appears on paychecks. Only set at the legal entity or tenant level.",
            "minLength": 1,
            "example": "BonusDis"
          },
          "Frequency": {
            "description": "Enumeration of valid Pay Frequency values.\n            ",
            "example": "LastPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Order earnings are calculated based on sequence values.\nThis is needed so earnings dependent on other earnings are calculated in the proper sequence.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "IncludeInPay": {
            "description": "Enumeration of valid values indicating which pay run should include the employee earning.",
            "example": "A",
            "$ref": "#/components/schemas/IncludeInPay"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether the employee earning should included in a paycheck. This is specified by the 'Calculate' checkbox in the Paycor UI.\n            ",
            "example": false
          },
          "AmountData": {
            "type": "array",
            "description": "List of the employee's earning rates, factors and amounts of type EmployeeEarningAmount.\n            ",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeEarningAmount"
              },
              "$ref": "#/components/schemas/EmployeeEarningAmount"
            }
          }
        }
      },
      "ImportPayrollHours": {
        "type": "object",
        "description": "Request body object for importing Payroll data into Paycor's Payroll system (not Time system).",
        "additionalProperties": false,
        "required": [
          "IntegrationVendor",
          "ProcessId",
          "ImportEmployees"
        ],
        "properties": {
          "IntegrationVendor": {
            "type": "string",
            "description": "Required freeform field for tracking purposes. You can input your company or application name.",
            "minLength": 1
          },
          "ProcessId": {
            "type": "string",
            "description": "Unique identifier of the transaction to prevent double-posting in Paycor's systems. \nPlease generate a new GUID (using any method) for every API call.\nUse the same GUID only when you want to replace existing data.",
            "format": "guid",
            "minLength": 1,
            "example": "b962666d-8c1e-46db-a750-53edfe25d47e"
          },
          "ImportEmployees": {
            "type": "array",
            "description": "List of Employees, with nested lists of Earnings, to import into Paycor's Paygrid system. ",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ImportEmployee"
              },
              "$ref": "#/components/schemas/ImportEmployee"
            }
          }
        }
      },
      "ImportEmployee": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "EmployeeNumber",
          "ImportEarnings"
        ],
        "properties": {
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee in the tenant. Generated by Paycor. You can use any GET Employee endpoint to retrieve.",
            "format": "int32",
            "example": 33420
          },
          "ImportEarnings": {
            "type": "array",
            "description": "List of Earnings for this Employee. ",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ImportEarning"
              },
              "$ref": "#/components/schemas/ImportEarning"
            }
          },
          "BaseDepartmentCode": {
            "type": "string",
            "description": "Department to be used when employee is being paid outside of their assigned payroll.  All scheduled earnings for this employee will be paid in this department.",
            "nullable": true
          }
        }
      },
      "ImportEarning": {
        "type": "object",
        "description": "Employee-specific Payroll Import row for a specific working date range. Includes all Pay-related info. ",
        "additionalProperties": false,
        "required": [
          "DepartmentCode",
          "EarningCode",
          "BusinessStartDate",
          "PayGroupId"
        ],
        "properties": {
          "DepartmentCode": {
            "type": "integer",
            "description": "Department code that the Hours should be paid under. You can use GET Legal Entity Departments to retrieve valid Code values. ",
            "format": "int64",
            "example": 334
          },
          "EarningCode": {
            "type": "string",
            "description": "Employee's earning Code. You can retrieve via Get Employee Earnings endpoints.",
            "minLength": 1,
            "example": "ERC300"
          },
          "EarningHours": {
            "type": "number",
            "description": "Number of hours that Employee worked.",
            "format": "decimal",
            "example": 3.5
          },
          "EarningAmount": {
            "type": "number",
            "description": "Dollar amount that Employee earned.",
            "format": "decimal",
            "nullable": true,
            "example": 150.57
          },
          "EarningRate": {
            "type": "number",
            "description": "Dollar rate to assign to the earning. ",
            "format": "decimal",
            "nullable": true,
            "example": 15.09
          },
          "BusinessStartDate": {
            "type": "string",
            "description": "Start date of TimeCard",
            "format": "date-time",
            "minLength": 1,
            "example": "2020-11-17T12:00:00.000Z"
          },
          "BusinessEndDate": {
            "type": "string",
            "description": "End date of TimeCard",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-22T12:00:00.000Z"
          },
          "DateWorked": {
            "type": "string",
            "description": "The date worked (associated with this earning). \nOptional. May be used by clients who have Workweek calculation feature enabled or by specific partner integrations.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-01-22T12:00:00.000Z"
          },
          "LaborCodes": {
            "type": "array",
            "description": "Optional. This allows supplying Labor Codes tied to this earning, used for Job Costing and other functionality. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode"
            }
          },
          "PayGroupId": {
            "type": "string",
            "description": "Unique identifier of the pay group in Paycor's system. You can retrieve by calling 'Get Pay Groups by Legal Entity ID'",
            "format": "guid",
            "minLength": 1,
            "example": "71c9338a-4c28-0000-0000-0000712f0300"
          },
          "PayNumber": {
            "type": "integer",
            "description": "Optional, defaults to 1. \nIndicates which paycheck for this employee the earning will appear on (essentially a sort order for the particular Employee). \nUse sequential values such as 1, 2, 3...",
            "format": "int32",
            "nullable": true
          },
          "ClientDefinedValue": {
            "type": "string",
            "description": "Optional. This field allows passing in additional information used by specific partner integrations.",
            "nullable": true
          }
        }
      },
      "LaborCode": {
        "type": "object",
        "description": "Labor Code (also called Job Code) is used for Job Costing functionality. \nNote that both Category and Code are required in order to be unique. ",
        "additionalProperties": false,
        "properties": {
          "Category": {
            "type": "string",
            "description": "Job Category (also known as Labor Category) are used to organize Job Codes. \nThis feature is used for Job Costing support, which not all clients will use. Categories must be configured in advance by an HR Admin in Perform. \nYou can use GET Legal Entity Job Categories API to retrieve. ",
            "nullable": true,
            "example": "Job"
          },
          "Code": {
            "type": "string",
            "description": "Job Code is used for Job Costing functionality, to map paid amounts to a project.\nYou can use GET Legal Entity Job Codes APIs to retrieve. This field expects the Code, not the Labor Code Name. \nNot all clients will use Job Costing. ",
            "nullable": true,
            "example": "WCH"
          }
        }
      },
      "EmployeeTimeCard": {
        "type": "object",
        "description": "The EmployeeTimeCard model represents an employee's Timecard information. ",
        "additionalProperties": false,
        "properties": {
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee in the tenant. Generated by Paycor.\n            ",
            "format": "int32",
            "example": 33422310
          },
          "BadgeNumber": {
            "type": "integer",
            "description": "Employee's assigned badge number.\n            ",
            "format": "int32",
            "nullable": true,
            "example": 778665
          },
          "Details": {
            "type": "array",
            "description": "       List of type Timecard containing the employee's timecard information.\n      ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeCard"
              },
              "$ref": "#/components/schemas/TimeCard"
            }
          }
        }
      },
      "TimeCard": {
        "type": "object",
        "description": "The Timecard model represents Employee level time, punch details and associated labor code information. ",
        "additionalProperties": false,
        "properties": {
          "DisplayDate": {
            "type": "string",
            "description": "The date when the timecard was created.\nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "example": "2020-11-17"
          },
          "InActualPunch": {
            "type": "string",
            "description": "Date and time when the employee punched in.\nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T13:03:03.943"
          },
          "OutActualPunch": {
            "type": "string",
            "description": "Date and time when the employee punched out.\nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T18:03:03.000"
          },
          "InRoundedPunch": {
            "type": "string",
            "description": "Date and rounded time when the employee punched in. \nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T13:00:00.000"
          },
          "OutRoundedPunch": {
            "type": "string",
            "description": "Date and rounded time when the employee punched out.\nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T18:00:00.000"
          },
          "HoursAmount": {
            "type": "number",
            "description": "Amount of hours entered for employee's timecard.",
            "format": "decimal",
            "example": 4.5
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "Department code where the employee's timecard was created.",
            "format": "int64",
            "example": 3027442356
          },
          "DepartmentName": {
            "type": "string",
            "description": "Department name where the employee's timecard was created.",
            "nullable": true,
            "example": "Accounting"
          },
          "EarningCode": {
            "type": "string",
            "description": "Identifies the type of earning for this timecard.",
            "nullable": true,
            "example": "ERC300"
          },
          "LaborCodes": {
            "type": "array",
            "description": "List of type LaborCode containing the employee's labor code information.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode2"
            }
          }
        }
      },
      "LaborCode2": {
        "type": "object",
        "description": "The LaborCode model is used to define rules for Employees including minimum and maximum hours, overtime and benefits.",
        "additionalProperties": false,
        "properties": {
          "LaborCategoryLevel": {
            "type": "integer",
            "description": "Labor category level",
            "format": "int32",
            "example": 2
          },
          "LaborCategoryName": {
            "type": "string",
            "description": "Name of labor category",
            "nullable": true,
            "example": "Job"
          },
          "LaborCategoryItemCode": {
            "type": "string",
            "description": "Item code of labor category",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCategoryItemName": {
            "type": "string",
            "description": "Item name of labor category",
            "nullable": true,
            "example": "CIN Location"
          }
        }
      },
      "EmployeeTimeCard2": {
        "type": "object",
        "description": "Employee's timecard base object used for Payroll Api",
        "additionalProperties": false,
        "required": [
          "IntegrationVendor",
          "ProcessId",
          "EmployeeNumber",
          "DepartmentCode",
          "TimeCardData"
        ],
        "properties": {
          "AppId": {
            "type": "string",
            "description": "Optional field that can be used for tracking purposes. Not required for payroll processing. ",
            "format": "guid",
            "nullable": true,
            "example": "763a5661-b518-0000-0000-000014e00100"
          },
          "IntegrationVendor": {
            "type": "string",
            "description": "Required freeform field for tracking purposes. You can input your company or application name.",
            "minLength": 1
          },
          "ProcessId": {
            "type": "string",
            "description": "Unique identifier of the transaction to prevent double-posting in Paycor's systems. \nPlease generate a new GUID (using any method) for every API call.",
            "format": "guid",
            "minLength": 1,
            "example": "b962666d-8c1e-46db-a750-53edfe25d47e"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the Legal Entity in Paycor's system.",
            "format": "int32",
            "example": 100289
          },
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee in the tenant. Generated by Paycor. You can use any GET Employee endpoint to retrieve.",
            "format": "int32",
            "example": 33420
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "Department code that the Hours should be paid under. You can use GET Legal Entity Departments to retrieve valid Code values. ",
            "format": "int64",
            "example": 334
          },
          "JobCode": {
            "type": "string",
            "description": "JobCode parameter is not currently used - included for future functionality. ",
            "nullable": true
          },
          "TimeCardData": {
            "type": "array",
            "description": "List of the employee's earning rates, factors and amounts of type EmployeeEarningAmount.\n            ",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeCardData"
              },
              "$ref": "#/components/schemas/TimeCardData"
            }
          }
        }
      },
      "TimeCardData": {
        "type": "object",
        "description": "Employee's timecard with information about earnings, start and end dates.",
        "additionalProperties": false,
        "required": [
          "EarningCode",
          "EarningHours",
          "BusinessStartDate"
        ],
        "properties": {
          "EarningCode": {
            "type": "string",
            "description": "Employee's earning Code. You can retrieve via Get Employee Earnings endpoints.",
            "minLength": 1,
            "example": "ERC300"
          },
          "EarningHours": {
            "type": "number",
            "description": "Employee's earning hours",
            "format": "decimal",
            "example": 3.5
          },
          "BusinessStartDate": {
            "type": "string",
            "description": "Start date of TimeCard",
            "format": "date-time",
            "minLength": 1,
            "example": "2020-11-17T12:00:00.000Z"
          },
          "BusinessEndDate": {
            "type": "string",
            "description": "End date of TimeCard",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-22T12:00:00.000Z"
          }
        }
      },
      "I9Verification": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CitizenOfCountry": {
            "type": "string",
            "description": "Country of which the employee is citizen of.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "WorkEligibility": {
            "description": "Work Eligibility of the employee.\n            ",
            "nullable": true,
            "example": "USCitizen",
            "$ref": "#/components/schemas/WorkEligibility"
          },
          "WorkVisaType": {
            "type": "string",
            "description": "Work visa type of the employee. Maximum characters should be 20.\n            ",
            "nullable": true,
            "example": "H1B"
          },
          "WorkVisaExpirationDate": {
            "type": "string",
            "description": "Expiration date of the work visa.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "05/25/2023"
          },
          "AlienAdmissionNumber": {
            "type": "string",
            "description": "Alien admission number of the employee.\n            ",
            "nullable": true,
            "example": 12365478961
          },
          "AlienAdmissionExpirationDate": {
            "type": "string",
            "description": "Expiration date of the alien admission.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "05/25/2023"
          },
          "ListA": {
            "description": "List A document of the employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ListA"
          },
          "ListB": {
            "description": "List B document of the employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ListB"
          },
          "ListC": {
            "description": "List C document of the employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ListC"
          },
          "ForeignPassportNumber": {
            "type": "string",
            "description": "Foreign passport number of the employee.\n            ",
            "nullable": true,
            "example": "N4123456"
          },
          "CountryOfIssuance": {
            "type": "string",
            "description": "Country of issuance of the foreign passport.\n            ",
            "nullable": true,
            "example": "AU"
          },
          "AdditionalInformation": {
            "type": "string",
            "description": "Additional information for the I9 verification. Must be under 768 characters.\n            ",
            "nullable": true
          },
          "HireDate": {
            "type": "string",
            "description": "Hire date of the employee.",
            "format": "date-time",
            "example": "05/25/2019"
          },
          "DateModified": {
            "type": "string",
            "description": "Date when document were last updated.\n            ",
            "format": "date-time",
            "example": "05/25/2023"
          }
        }
      },
      "WorkEligibility": {
        "type": "string",
        "description": "Enumeration of valid Types of WorkEligibility values.\n            ",
        "x-enumNames": [
          "USCitizen",
          "PermanentResident",
          "AuthorizedAlien",
          "NonCitizenNational"
        ],
        "enum": [
          "USCitizen",
          "PermanentResident",
          "AuthorizedAlien",
          "NonCitizenNational"
        ]
      },
      "ListA": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DocumentTitle": {
            "description": "Document title of List A document.\n            ",
            "nullable": true,
            "example": "USPassport",
            "$ref": "#/components/schemas/ListADocument"
          },
          "DocumentNumber": {
            "type": "string",
            "description": "Document number of the ListA document.Must be under 20 characters.\n            ",
            "nullable": true,
            "example": 1234567
          },
          "IssuingAuthority": {
            "type": "string",
            "description": "Issuing authority of the ListA document.Must be under 30 characters.\n            ",
            "nullable": true,
            "example": "state"
          },
          "ListExpirationDate": {
            "type": "string",
            "description": "Expiration date of ListA document.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "01/01/2020"
          },
          "ListASecondDocumentTitle": {
            "type": "string",
            "description": "Document title of second document.Must be under 50 characters.",
            "nullable": true
          },
          "ListASecondDocumentNumber": {
            "type": "string",
            "description": "Document number of second document.Must be under 20 characters.\n            ",
            "nullable": true
          },
          "ListASecondIssuingAuthority": {
            "type": "string",
            "description": "Issuing authority of second document.Must be under 30 characters.\n            ",
            "nullable": true
          },
          "ListASecondExpirationDate": {
            "type": "string",
            "description": "Expiration date of scond document.Must be between \"01/01/1900\", \"12/31/9999\".\n            ",
            "format": "date-time",
            "nullable": true
          },
          "ListAThirdDocumentTitle": {
            "type": "string",
            "description": "Document title of third document.Must be under 50 characters.\n            ",
            "nullable": true
          },
          "ListAThirdDocumentNumber": {
            "type": "string",
            "description": "Document number of third document.Must be under 20 characters.",
            "nullable": true
          },
          "ListAThirdIssuingAuthority": {
            "type": "string",
            "description": "Issuing authority of third document.Must be under 30 characters.\n            ",
            "nullable": true
          },
          "ListAThirdExpirationDate": {
            "type": "string",
            "description": "Expiration date of third document.Must be between \"01/01/1900\", \"12/31/9999\".\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ListADocument": {
        "type": "string",
        "description": "Enumeration of valid List A document values.\n            ",
        "x-enumNames": [
          "USPassport",
          "ForeignPassportWithI551stamp",
          "PermanentResidentOrAlienRegistrationI551",
          "EmploymentAuthorisationDocI766",
          "ForeignPassportAndI94orI94A",
          "PassportFromFSMorRMI",
          "DocsFromFSMorRMI",
          "I94withTempI551orRefugeeAdmissionStamp",
          "ForeignPassportorI94orI94AOR120orDS2019",
          "ReceiptReplacementPermanentResidentCardFormI551",
          "ReceiptReplacementEADFormI766",
          "ReceiptForeignPassportorI94or120orDS2019",
          "ReceiptFSMPassportWithFormI94orI94orI94A",
          "ReceiptRMIPassportWithFormI94orI94orI94A",
          "ReceiptUSPassportOrUSPassportCard",
          "ReceiptI94PermanentResidentCardI551StampAndPhoto",
          "ReceiptI94withRENotationOrRefugeeStamp"
        ],
        "enum": [
          "USPassport",
          "ForeignPassportWithI551stamp",
          "PermanentResidentOrAlienRegistrationI551",
          "EmploymentAuthorisationDocI766",
          "ForeignPassportAndI94orI94A",
          "PassportFromFSMorRMI",
          "DocsFromFSMorRMI",
          "I94withTempI551orRefugeeAdmissionStamp",
          "ForeignPassportorI94orI94AOR120orDS2019",
          "ReceiptReplacementPermanentResidentCardFormI551",
          "ReceiptReplacementEADFormI766",
          "ReceiptForeignPassportorI94or120orDS2019",
          "ReceiptFSMPassportWithFormI94orI94orI94A",
          "ReceiptRMIPassportWithFormI94orI94orI94A",
          "ReceiptUSPassportOrUSPassportCard",
          "ReceiptI94PermanentResidentCardI551StampAndPhoto",
          "ReceiptI94withRENotationOrRefugeeStamp"
        ]
      },
      "ListB": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DocumentTitle": {
            "description": "Document title of ListB document.\n            ",
            "nullable": true,
            "example": "DriverLicense",
            "$ref": "#/components/schemas/ListBDocument"
          },
          "DocumentNumber": {
            "type": "string",
            "description": "Document number of the ListB document.Must be under 20 characters.\n            ",
            "nullable": true,
            "example": 1234567
          },
          "IssuingAuthority": {
            "type": "string",
            "description": "Issuing authority of the ListB document.Must be under 30 characters.\n            ",
            "nullable": true,
            "example": "state"
          },
          "ListExpirationDate": {
            "type": "string",
            "description": "Expiration date of ListB document.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "01/01/2020"
          }
        }
      },
      "ListBDocument": {
        "type": "string",
        "description": "Enumeration of valid List B document values.\n            ",
        "x-enumNames": [
          "DriverLicenseorIDcard",
          "FederalORstateORLocalGovtID",
          "SchoolIDcardWithPhotograph",
          "VotersRegistrationCard",
          "USMilitaryCardOrDraftRecord",
          "MilitaryDependentsIDcard",
          "USCoastGuardMerchantMariner",
          "NativeAmericanTribalDoc",
          "DriverLicenseCanadianGovt",
          "SchoolRecordOrReportCard",
          "ClinicDoctorOrHospitalRecord",
          "DaycareOrNurserySchoolRecord",
          "DriverLicense",
          "IDCardIssuedByUSStateOrOutlyingPossession",
          "ReceiptDriverLicenseOrIDCard",
          "ReceiptFederalOrStateOrLocalGovtID",
          "ReceiptSchoolIDCardWithPhotograph",
          "ReceiptVotersRegistrationCard",
          "ReceiptUSMilitaryCardOrDraftRecord",
          "ReceiptMilitaryDependentsIDCard",
          "ReceiptUSCoastGuardMerchantMariner",
          "ReceiptNativeAmericanTribalDoc",
          "ReceiptDriverLicenseCanadianGovt",
          "ReceiptSchoolRecordOrReportCard",
          "ReceiptClinicDoctorOrHospitalRecord",
          "ReceiptDayCareOrNurserySchoolRecord",
          "ReceiptDriversLicense",
          "ReceiptUSStateCardOrOutlyingPossession"
        ],
        "enum": [
          "DriverLicenseorIDcard",
          "FederalORstateORLocalGovtID",
          "SchoolIDcardWithPhotograph",
          "VotersRegistrationCard",
          "USMilitaryCardOrDraftRecord",
          "MilitaryDependentsIDcard",
          "USCoastGuardMerchantMariner",
          "NativeAmericanTribalDoc",
          "DriverLicenseCanadianGovt",
          "SchoolRecordOrReportCard",
          "ClinicDoctorOrHospitalRecord",
          "DaycareOrNurserySchoolRecord",
          "DriverLicense",
          "IDCardIssuedByUSStateOrOutlyingPossession",
          "ReceiptDriverLicenseOrIDCard",
          "ReceiptFederalOrStateOrLocalGovtID",
          "ReceiptSchoolIDCardWithPhotograph",
          "ReceiptVotersRegistrationCard",
          "ReceiptUSMilitaryCardOrDraftRecord",
          "ReceiptMilitaryDependentsIDCard",
          "ReceiptUSCoastGuardMerchantMariner",
          "ReceiptNativeAmericanTribalDoc",
          "ReceiptDriverLicenseCanadianGovt",
          "ReceiptSchoolRecordOrReportCard",
          "ReceiptClinicDoctorOrHospitalRecord",
          "ReceiptDayCareOrNurserySchoolRecord",
          "ReceiptDriversLicense",
          "ReceiptUSStateCardOrOutlyingPossession"
        ]
      },
      "ListC": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DocumentTitle": {
            "description": "Document title of ListC document.\n            ",
            "nullable": true,
            "example": "USCitizenIDCardI197",
            "$ref": "#/components/schemas/ListCDocument"
          },
          "DocumentNumber": {
            "type": "string",
            "description": "Document number of the ListC document.Must be under 20 characters.\n            ",
            "nullable": true,
            "example": 1234567
          },
          "IssuingAuthority": {
            "type": "string",
            "description": "Issuing authority of the ListC document.Must be under 30 characters.\n            ",
            "nullable": true,
            "example": "state"
          },
          "ListExpirationDate": {
            "type": "string",
            "description": "Expiration date of ListC document.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "01/01/2020"
          }
        }
      },
      "ListCDocument": {
        "type": "string",
        "description": "Enumeration of valid List C document values.\n            ",
        "x-enumNames": [
          "SocialSecurityAccountNumber",
          "CertificateOfBirthDS1350orFS545FS240",
          "CertificationOfBirthAbroadFS545",
          "CertificateOfReportOfBirthDS1350",
          "ConsularReportOfBirthAbroadFS240",
          "USBirthCertificate",
          "NativeAmericanTribalDoc",
          "USCitizenIDCardI197",
          "IDCardForResidentCitizenI179",
          "EmploymentAuthorisationDocumentDHS",
          "ReceiptSocialSecurityAccountNumber",
          "ReceiptUSBirthCertificate",
          "ReceiptNativeAmericanTribalDoc",
          "ReceiptUSCitizenIDCardI197",
          "ReceiptIDCardForResidentCitizenI179",
          "ReceiptEmploymentAuthorizationDocumentDHS",
          "CertificationOfBirthDS1350FS545FS240",
          "ReceiptCertificationOfBirthAbroadFS545",
          "ReceiptCertificateOfReportOfBirthDS1350",
          "ReceiptConsularReportOfBirthAbroadFS240"
        ],
        "enum": [
          "SocialSecurityAccountNumber",
          "CertificateOfBirthDS1350orFS545FS240",
          "CertificationOfBirthAbroadFS545",
          "CertificateOfReportOfBirthDS1350",
          "ConsularReportOfBirthAbroadFS240",
          "USBirthCertificate",
          "NativeAmericanTribalDoc",
          "USCitizenIDCardI197",
          "IDCardForResidentCitizenI179",
          "EmploymentAuthorisationDocumentDHS",
          "ReceiptSocialSecurityAccountNumber",
          "ReceiptUSBirthCertificate",
          "ReceiptNativeAmericanTribalDoc",
          "ReceiptUSCitizenIDCardI197",
          "ReceiptIDCardForResidentCitizenI179",
          "ReceiptEmploymentAuthorizationDocumentDHS",
          "CertificationOfBirthDS1350FS545FS240",
          "ReceiptCertificationOfBirthAbroadFS545",
          "ReceiptCertificateOfReportOfBirthDS1350",
          "ReceiptConsularReportOfBirthAbroadFS240"
        ]
      },
      "Includes7": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "DocumentNumber"
        ],
        "enum": [
          "DocumentNumber"
        ]
      },
      "I9Verification2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CitizenOfCountry": {
            "type": "string",
            "description": "Country of which the employee is citizen of.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "WorkEligibility": {
            "description": "Work Eligibility of the employee.\n            ",
            "nullable": true,
            "example": "USCitizen",
            "$ref": "#/components/schemas/WorkEligibility"
          },
          "WorkVisaType": {
            "type": "string",
            "description": "Work visa type of the employee. Maximum characters should be 20.\n            ",
            "nullable": true,
            "example": "H1B"
          },
          "WorkVisaExpirationDate": {
            "type": "string",
            "description": "Expiration date of the work visa.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "10/25/2023"
          },
          "AlienAdmissionNumber": {
            "type": "string",
            "description": "Alien admission number of the employee.\n            ",
            "nullable": true,
            "example": 12365478961
          },
          "AlienAdmissionExpirationDate": {
            "type": "string",
            "description": "Expiration date of the alien admission.\n            ",
            "format": "date-time",
            "nullable": true,
            "example": "05/25/2023"
          },
          "ListA": {
            "description": "List A document of the employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ListA"
          },
          "ListB": {
            "description": "List B document of the employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ListB"
          },
          "ListC": {
            "description": "List C document of the employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ListC"
          },
          "ForeignPassportNumber": {
            "type": "string",
            "description": "Foreign passport number of the employee.\n            ",
            "nullable": true,
            "example": "N4123456"
          },
          "CountryOfIssuance": {
            "type": "string",
            "description": "Country of issuance of the foreign passport.\nAccepted values ISO-3166 alpha2 or alpha3 codes for countries.\n            ",
            "nullable": true,
            "example": "AU"
          },
          "AdditionalInformation": {
            "type": "string",
            "description": "Additional information for the I9 verification. Must be under 768 characters.\n            ",
            "nullable": true
          }
        }
      },
      "PayAdvance": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "PayImportId": {
            "type": "integer",
            "description": "Unique identifier of Pay Import",
            "format": "int32",
            "example": 435
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "Code": {
            "type": "string",
            "description": "Pay code for this payment",
            "nullable": true,
            "example": "On demand"
          },
          "DeductOnDate": {
            "type": "string",
            "description": "Advance payment date for this employee",
            "format": "date-time",
            "example": "2021-04-21"
          },
          "Amount": {
            "type": "number",
            "description": "Advance payment amount",
            "format": "decimal",
            "example": 3000
          },
          "PlannerId": {
            "type": "string",
            "description": "Id of the planner for this payment",
            "format": "guid",
            "example": "d6001214-0331-0000-0000-0000673f0300"
          }
        }
      },
      "PayAdvance2": {
        "type": "object",
        "description": "Pay advance create object for specific employee",
        "additionalProperties": false,
        "required": [
          "DeductOnDate",
          "Amount"
        ],
        "properties": {
          "DeductOnDate": {
            "type": "string",
            "description": "Advance payment date for this employee",
            "format": "date-time",
            "minLength": 1,
            "example": "2021-04-21"
          },
          "Amount": {
            "type": "number",
            "description": "Advance payment amount",
            "format": "decimal",
            "example": 3000
          },
          "Partner": {
            "type": "string",
            "description": "Optional Partner Name value",
            "nullable": true,
            "example": "PartnerName"
          }
        }
      },
      "CancelOnDemandPayResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "OriginalPayImportId": {
            "type": "integer",
            "format": "int32"
          },
          "CancellationPayImportId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CancelPayAdvances": {
        "type": "object",
        "description": "Cancel pay data model represents collection of advance payment imports which needs to be canceled for specific legal entity",
        "additionalProperties": false,
        "required": [
          "AdvancePayImportIds"
        ],
        "properties": {
          "AdvancePayImportIds": {
            "type": "array",
            "description": "Collection of advance payment ids which needs to be canceled",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "integer",
              "format": "int32",
              "xml": {
                "name": "int"
              }
            }
          }
        }
      },
      "PagedResultOfEmployeePayRate": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeePayRate"
              },
              "$ref": "#/components/schemas/EmployeePayRate"
            }
          }
        }
      },
      "EmployeePayRate": {
        "type": "object",
        "description": "The Pay Rates model represents information about the Employee's Pay Rate.\nProvides link to the Employee's information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee pay rate in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "75571ee9-d359-0000-0000-000066000000"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date when the employee pay rate takes effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-22T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date when the employee pay rate is no longer in effect, or NULL if rate is currently active.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-12-01T12:15:00Z"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Orders how multiple earnings are calculated. Needed so earnings dependent on other earnings are calculated in the proper sequence.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "PayRate": {
            "type": "number",
            "description": "Employee's rate of pay (in dollars). \nIf Pay Type is Hourly, then Pay Rate is a Per-Hour dollar amount and is required. \nIf Pay Type is Salary, then Pay Rate is a Per-Pay dollar amount, and either Pay Rate or Annual Rate is required.\nPayrate can't have more than 6 decimal places and can't be negative. \n            ",
            "format": "decimal",
            "nullable": true,
            "example": 25.52
          },
          "AnnualPayRate": {
            "type": "number",
            "description": "Employee's annual amount of pay (in dollars).\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 53081.6
          },
          "Description": {
            "type": "string",
            "description": "Brief description of the employee's pay rate.\n            ",
            "nullable": true,
            "example": "Rate 1"
          },
          "AnnualHours": {
            "type": "integer",
            "description": "Employee's annual working hours. Value defaults to 2080.",
            "format": "int32",
            "example": 2080
          },
          "Type": {
            "description": "Whether pay rate is: \n  * Hourly (in which case PayRate will be per-hour)\n  * Salary (in which case PayRate will be per-pay) ",
            "example": "Hourly",
            "$ref": "#/components/schemas/PayType"
          },
          "Reason": {
            "type": "string",
            "description": "Reason associated with the employee's pay rate. \n            ",
            "nullable": true,
            "example": "Merit Increase."
          },
          "Notes": {
            "type": "string",
            "description": "Notes associated with the employee's pay rate, which will be displayed on Pay Rate History page.  \nThere is a known bug and would be fixed in coming release. \nValue is always null due to existing issue and actual values in Paycor system may or may not be null based on the user input.\n            ",
            "nullable": true
          },
          "Employees": {
            "description": "URL to access the Employee resource for information about the employee.\n            ",
            "nullable": true,
            "example": "v1/employees/36f45f30-9a35-0000-0000-000001000000",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PayType": {
        "type": "string",
        "description": "Enumeration of valid Pay Type values.\n            ",
        "x-enumNames": [
          "Salary",
          "Hourly"
        ],
        "enum": [
          "Salary",
          "Hourly"
        ]
      },
      "EmployeePayRate2": {
        "type": "object",
        "description": "The Create PayRate model represents Employee PayRate related information needed to create a new PayRate.",
        "additionalProperties": false,
        "required": [
          "EffectiveStartDate",
          "SequenceNumber",
          "Description"
        ],
        "properties": {
          "EffectiveStartDate": {
            "type": "string",
            "description": "Represents the date that the payrate goes into effect. \nYou can pass in future dates to take effect in future, or today's date to take effect immediately. \nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-22T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date when the employee pay rate is no longer in effect. Default to null. Only pass in a date if the payrate is no longer active.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-12-01T12:15:00Z"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Orders how multiple earnings are calculated. Needed so earnings dependent on other earnings are calculated in the proper sequence.\nMust be unique and be ascending without gaps (ie 1, 2, 3…). Use GET Payrates to identify existing sequences.",
            "format": "int32",
            "example": 1
          },
          "PayRate": {
            "type": "number",
            "description": "Employee's rate of pay (in dollars). \nIf Pay Type is Hourly, then Pay Rate is a Per-Hour dollar amount and is required. \nIf Pay Type is Salary, then Pay Rate is a Per-Pay dollar amount, and either Pay Rate or Annual Rate is required.\nPayrate can't have more than 6 decimal places and can't be negative. \n            ",
            "format": "decimal",
            "nullable": true,
            "example": 25.52
          },
          "AnnualPayRate": {
            "type": "number",
            "description": "Employee's annual pay amount (in dollars). Only used if Type=Salary. \n* For Salary Type, AnnualPayRate overrides payRate if passed into API call. The value not provided will be calculated based on Employee's Annual Hours setup on Employee's Profile.\n* For Hourly Type, this parameter is ignored - Paycor calculates based on Employee's Annual Hours setup on Employee's Profile.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 53081.6
          },
          "Description": {
            "type": "string",
            "description": "Required. Brief description of the employee's pay rate. Defaults to \"Rate {SequenceNumber}\"\nMust be 20 characters or less\n            ",
            "minLength": 1,
            "example": "Rate 1"
          },
          "Type": {
            "description": "Whether pay rate is: \n  * Hourly (in which case PayRate will be per-hour)\n  * Salary (in which case PayRate will be per-pay) ",
            "example": "Hourly",
            "$ref": "#/components/schemas/PayType"
          },
          "Reason": {
            "type": "string",
            "description": "Reason associated with the employee's pay rate. Optional. \n            ",
            "nullable": true,
            "example": "Merit Increase."
          },
          "Notes": {
            "type": "string",
            "description": "Notes associated with the employee's pay rate, which will be displayed on Pay Rate History page. \nMust be 512 characters or less. Optional. \n            ",
            "nullable": true
          }
        }
      },
      "EmployeePayRate3": {
        "type": "object",
        "description": "The Update PayRate model includes fields that can be updated on an existing PayRate. ",
        "additionalProperties": false,
        "required": [
          "EffectiveStartDate",
          "PayRate",
          "Description"
        ],
        "properties": {
          "EffectiveStartDate": {
            "type": "string",
            "description": "Represents the date that the payrate goes into effect. \nPUT requires EffectiveStartDate value to be unique for this PayRateId. \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-22T00:00:00Z"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Orders how multiple earnings are calculated. Needed so earnings dependent on other earnings are calculated in the proper sequence.\nFor PUT, this should match an existing SequenceNumber (retrieved via GET Employee PayRates).",
            "format": "int32",
            "example": 1
          },
          "PayRate": {
            "type": "number",
            "description": "Employee's rate of pay (in dollars). \nIf Pay Type is Hourly, then Pay Rate is a Per-Hour dollar amount and is required. \nIf Pay Type is Salary, then Pay Rate is a Per-Pay dollar amount, and either Pay Rate or Annual Rate is required.\nPayrate can't have more than 6 decimal places and can't be negative. \n            ",
            "format": "decimal",
            "example": 25.52
          },
          "AnnualPayRate": {
            "type": "number",
            "description": "Employee's annual pay amount (in dollars). Only used if Type=Salary. \n* For Salary Type, AnnualPayRate overrides payRate if passed into API call. The value not provided will be calculated based on Employee's Annual Hours setup on Employee's Profile.\n* For Hourly Type, this parameter is ignored - Paycor calculates based on Employee's Annual Hours setup on Employee's Profile.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 53081.6
          },
          "Description": {
            "type": "string",
            "description": "Required. Brief description of the employee's pay rate. Defaults to \"Rate {SequenceNumber}\"\nMust be 20 characters or less\n            ",
            "minLength": 1,
            "example": "Rate 1"
          },
          "Type": {
            "description": "Whether pay rate is: \n  * Hourly (in which case PayRate will be per-hour)\n  * Salary (in which case PayRate will be per-pay) ",
            "example": "Hourly",
            "$ref": "#/components/schemas/PayType"
          },
          "Reason": {
            "type": "string",
            "description": "Reason associated with the employee's pay rate. Optional. \n            ",
            "nullable": true,
            "example": "Merit Increase."
          },
          "Notes": {
            "type": "string",
            "description": "Notes associated with the employee's pay rate, which will be displayed on Pay Rate History page. \nMust be 512 characters or less. Optional. \n            ",
            "nullable": true
          }
        }
      },
      "PagedResultOfPayPeriod": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayPeriod"
              },
              "$ref": "#/components/schemas/PayPeriod"
            }
          }
        }
      },
      "PayPeriod": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "PeriodStartDate": {
            "type": "string",
            "description": "Start date of the pay period",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "End date of the pay period",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "CheckDate": {
            "type": "string",
            "description": "The paycheck date for this employee. Also referred to as Pay Date.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "ProcessDate": {
            "type": "string",
            "description": "The pay process date for this employee.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "PlannerId": {
            "type": "string",
            "description": "Planner id",
            "format": "guid",
            "example": "dbec8470-e8b4-0000-0000-00009add0300"
          },
          "PayrollStatus": {
            "description": "B - Posted Sent to Billing,\nD - Payroll Distributed,\nE - Expected To Run,\nH - Payroll On Hold,\nI - Payroll In Process,\nP - Payroll Posted,\nR - Ready to Post,\nS - Payroll Skipped,\nW - Waiting for Wired Funds",
            "example": "P",
            "$ref": "#/components/schemas/PayrollStatus"
          }
        }
      },
      "PayrollStatus": {
        "type": "string",
        "description": "B - Posted Sent to Billing,\nD - Payroll Distributed,\nE - Expected To Run,\nH - Payroll On Hold,\nI - Payroll In Process,\nP - Payroll Posted,\nR - Ready to Post,\nS - Payroll Skipped,\nW - Waiting for Wired Funds",
        "x-enumNames": [
          "B",
          "D",
          "E",
          "H",
          "I",
          "P",
          "R",
          "S",
          "W"
        ],
        "enum": [
          "B",
          "D",
          "E",
          "H",
          "I",
          "P",
          "R",
          "S",
          "W"
        ]
      },
      "Includes8": {
        "type": "string",
        "description": "    AdditionalRuns - Include additinal runs",
        "x-enumNames": [
          "AdditionalRuns"
        ],
        "enum": [
          "AdditionalRuns"
        ]
      },
      "PagedResultOfPayStub": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStub"
              },
              "$ref": "#/components/schemas/PayStub"
            }
          }
        }
      },
      "PayStub": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "ClientId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system",
            "format": "int32",
            "example": 100
          },
          "CheckNumber": {
            "type": "integer",
            "description": "Check number.",
            "format": "int64",
            "example": 27463631
          },
          "PlannerId": {
            "type": "string",
            "description": "Unique identifier of the Planner Id for this Paystub.",
            "format": "guid",
            "example": "cfc11370-c241-4c9d-a5d2-90d340ee005c"
          },
          "CheckType": {
            "description": "The type of check: Regular, Manual, Void, ThirdPartySickPay, NetDirectDepositOverride",
            "example": "Regular",
            "$ref": "#/components/schemas/CheckType"
          },
          "PeriodStartDate": {
            "type": "string",
            "description": "Start date of the pay period\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "End date of the pay period\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "GrossAmount": {
            "type": "number",
            "description": "Employee's grosspay",
            "format": "decimal",
            "nullable": true,
            "example": 4200
          },
          "NetAmount": {
            "type": "number",
            "description": "Employee's netpay",
            "format": "decimal",
            "nullable": true,
            "example": 3000
          },
          "Earnings": {
            "description": "Earning object which contains total amount of earnings and collection of earning items included on paycheck",
            "nullable": true,
            "$ref": "#/components/schemas/PayStubEarning"
          },
          "Taxes": {
            "description": "Tax object which contains total amount of taxes and collection of tax items included on paycheck",
            "nullable": true,
            "$ref": "#/components/schemas/PayStubTax"
          },
          "Deductions": {
            "description": "Deductions object which contains total amount of deductions and collection of deductions items included on paycheck",
            "nullable": true,
            "$ref": "#/components/schemas/PayStubDeduction"
          },
          "Employee": {
            "description": "URL to access the Employee resource for additional information. \n            ",
            "nullable": true,
            "example": "/v1/employees/26413223-196c-0000-0000-0007d54d9839",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "CheckType": {
        "type": "string",
        "description": "Enumeration indicating types of paychecks",
        "x-enumNames": [
          "Unknown",
          "Regular",
          "Manual",
          "Void",
          "ThirdPartySickPay",
          "NetDirectDepositOverride"
        ],
        "enum": [
          "Unknown",
          "Regular",
          "Manual",
          "Void",
          "ThirdPartySickPay",
          "NetDirectDepositOverride"
        ]
      },
      "PayStubEarning": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalEarningsAmount": {
            "type": "number",
            "description": "Sum of all earning amounts in Earnings collection",
            "format": "decimal",
            "nullable": true,
            "example": 15000
          },
          "TotalEarningsHours": {
            "type": "number",
            "description": "Sum of all earning hours in Earnings collection",
            "format": "decimal",
            "nullable": true,
            "example": 53.6
          },
          "Earnings": {
            "type": "array",
            "description": "List of Earnings included on the paycheck",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubEarningItem"
              },
              "$ref": "#/components/schemas/PayStubEarningItem"
            }
          }
        }
      },
      "PayStubEarningItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EarningCode": {
            "type": "string",
            "description": "Earning code printed on paycheck, assigned via LegalEntityEarning",
            "nullable": true,
            "example": "Reg"
          },
          "EarningDescription": {
            "type": "string",
            "description": "Earning description assigned by Legal Entity, assigned via LegalEntityEarning",
            "nullable": true,
            "example": "Regular"
          },
          "GlobalEarningCode": {
            "type": "string",
            "description": "Paycor's Global earning code that is linked to this LegalEntityEarning",
            "nullable": true,
            "example": "Reg"
          },
          "EarningAmount": {
            "type": "number",
            "description": "Amount paid via this earning (USD). Includes Hours*Rate and Salary income.",
            "format": "decimal",
            "nullable": true,
            "example": 4800
          },
          "EarningHours": {
            "type": "number",
            "description": "Hours covered by this earning, if provided",
            "format": "decimal",
            "nullable": true,
            "example": 160
          },
          "EarningRate": {
            "type": "number",
            "description": "Hourly rate paid by this earning, if provided",
            "format": "decimal",
            "nullable": true,
            "example": 30
          }
        }
      },
      "PayStubTax": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalTaxesAmount": {
            "type": "number",
            "description": "Sum of all tax amounts in Taxes collection",
            "format": "decimal",
            "nullable": true,
            "example": 12600
          },
          "Taxes": {
            "type": "array",
            "description": "List of Taxes included on the paycheck",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubTaxItem"
              },
              "$ref": "#/components/schemas/PayStubTaxItem"
            }
          }
        }
      },
      "PayStubTaxItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TaxCode": {
            "type": "string",
            "description": "Tax code printed on paycheck, Paycor-assigned",
            "nullable": true,
            "example": "FITWH"
          },
          "GlobalTaxCode": {
            "type": "string",
            "description": "Paycor's Global tax code",
            "nullable": true,
            "example": "FITWH"
          },
          "TaxDescription": {
            "type": "string",
            "description": "Tax description, Paycor-assigned",
            "nullable": true,
            "example": "Federal Income Tax"
          },
          "TaxAmount": {
            "type": "number",
            "description": "Amount withheld from check for tax",
            "format": "decimal",
            "nullable": true,
            "example": 477.83
          }
        }
      },
      "PayStubDeduction": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalDeductionsAmount": {
            "type": "number",
            "description": "Sum of all deduction amounts in Deductions collection",
            "format": "decimal",
            "nullable": true
          },
          "Deductions": {
            "type": "array",
            "description": "List of Deductions included on the paycheck",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubDeductionItem"
              },
              "$ref": "#/components/schemas/PayStubDeductionItem"
            }
          }
        }
      },
      "PayStubDeductionItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DeductionCode": {
            "type": "string",
            "description": "Deduction code printed on paycheck, assigned via LegalEntityDeduction",
            "nullable": true,
            "example": "CSDispOH"
          },
          "GlobalDeductionCode": {
            "type": "string",
            "description": "Global deduction code",
            "nullable": true,
            "example": "401K"
          },
          "DeductionDescription": {
            "type": "string",
            "description": "Deduction description assigned by Legal Entity, assigned via LegalEntityDeduction",
            "nullable": true,
            "example": "Child Support Ohio"
          },
          "DeductionAmount": {
            "type": "number",
            "description": "Amount deducted from check",
            "format": "decimal",
            "nullable": true,
            "example": 1000
          }
        }
      },
      "Includes9": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    GrossAmount - Include gross amount\n\n\n    NetAmount - Include net amount\n\n\n    Earnings - Include earnings\n\n\n    Taxes - Include taxes\n\n\n    Deductions - Include deductions",
        "x-enumNames": [
          "All",
          "GrossAmount",
          "NetAmount",
          "Earnings",
          "Taxes",
          "Deductions"
        ],
        "enum": [
          "All",
          "GrossAmount",
          "NetAmount",
          "Earnings",
          "Taxes",
          "Deductions"
        ]
      },
      "PagedResultOfPayStub2": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStub"
              },
              "$ref": "#/components/schemas/PayStub2"
            }
          }
        }
      },
      "PayStub2": {
        "type": "object",
        "description": "Pay Stub model represents collection of information included on Employee's pay stub",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of employee",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "ClientId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system",
            "format": "int32",
            "example": 100
          },
          "CheckNumber": {
            "type": "integer",
            "description": "Check number.",
            "format": "int64",
            "example": 27463631
          },
          "PlannerId": {
            "type": "string",
            "description": "Unique identifier of the Planner Id for this Paystub.",
            "format": "guid",
            "example": "cfc11370-c241-4c9d-a5d2-90d340ee005c"
          },
          "CheckType": {
            "description": "The type of check: Regular, Manual, Void, ThirdPartySickPay, NetDirectDepositOverride",
            "example": "Regular",
            "$ref": "#/components/schemas/CheckType"
          },
          "PeriodStartDate": {
            "type": "string",
            "description": "Start date of the pay period\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "End date of the pay period\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "GrossAmount": {
            "type": "number",
            "description": "Employee's grosspay",
            "format": "decimal",
            "nullable": true,
            "example": 4200
          },
          "NetAmount": {
            "type": "number",
            "description": "Employee's netpay",
            "format": "decimal",
            "nullable": true,
            "example": 3000
          },
          "Earnings": {
            "description": "Earning object which contains total amount of earnings and collection of earning items included on paycheck",
            "nullable": true,
            "$ref": "#/components/schemas/PayStubEarning2"
          },
          "Taxes": {
            "description": "Tax object which contains total amount of taxes and collection of tax items included on paycheck",
            "nullable": true,
            "$ref": "#/components/schemas/PayStubTax2"
          },
          "Deductions": {
            "description": "Deductions object which contains total amount of deductions and collection of deductions items included on paycheck",
            "nullable": true,
            "$ref": "#/components/schemas/PayStubDeduction2"
          },
          "Employee": {
            "description": "URL to access the Employee resource for additional information. \n            ",
            "nullable": true,
            "example": "/v1/employees/26413223-196c-0000-0000-0007d54d9839",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PayStubEarning2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalEarningsAmount": {
            "type": "number",
            "description": "Sum of all earning amounts in Earnings collection",
            "format": "decimal",
            "nullable": true,
            "example": 15000
          },
          "TotalEarningsHours": {
            "type": "number",
            "description": "Sum of all earning hours in Earnings collection",
            "format": "decimal",
            "nullable": true,
            "example": 53.6
          },
          "Earnings": {
            "type": "array",
            "description": "List of Earnings included ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubEarningItem"
              },
              "$ref": "#/components/schemas/PayStubEarningItem2"
            }
          }
        }
      },
      "PayStubEarningItem2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EarningCode": {
            "type": "string",
            "description": "Earning code printed on paycheck, assigned via LegalEntityEarning",
            "nullable": true,
            "example": "Reg"
          },
          "EarningDescription": {
            "type": "string",
            "description": "Earning description assigned by Legal Entity, assigned via LegalEntityEarning",
            "nullable": true,
            "example": "Regular"
          },
          "GlobalEarningCode": {
            "type": "string",
            "description": "Paycor's Global earning code that is linked to this LegalEntityEarning",
            "nullable": true,
            "example": "Reg"
          },
          "EarningAmount": {
            "type": "number",
            "description": "Amount paid via this earning (USD). Includes Hours*Rate and Salary income.",
            "format": "decimal",
            "nullable": true,
            "example": 4800
          },
          "EarningHours": {
            "type": "number",
            "description": "Hours covered by this earning",
            "format": "decimal",
            "nullable": true,
            "example": 160
          },
          "EarningRate": {
            "type": "number",
            "description": "Hourly rate paid by this earning",
            "format": "decimal",
            "nullable": true,
            "example": 30
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "Numeric code of department ",
            "format": "int64",
            "example": 334
          }
        }
      },
      "PayStubTax2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalTaxesAmount": {
            "type": "number",
            "description": "Sum of all tax amounts in Taxes collection",
            "format": "decimal",
            "nullable": true,
            "example": 12600
          },
          "TotalEmployeeTaxAmount": {
            "type": "number",
            "description": "Sum of all tax amounts in Deductions collection for employees",
            "format": "decimal",
            "nullable": true
          },
          "TotalEmployerTaxAmount": {
            "type": "number",
            "description": "Sum of all tax amounts in Deductions collection for employers",
            "format": "decimal",
            "nullable": true
          },
          "Taxes": {
            "type": "array",
            "description": "List of Taxes included on the paycheck",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubTaxItem"
              },
              "$ref": "#/components/schemas/PayStubTaxItem2"
            }
          }
        }
      },
      "PayStubTaxItem2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TaxCode": {
            "type": "string",
            "description": "Tax code printed on paycheck, Paycor-assigned",
            "nullable": true,
            "example": "FITWH"
          },
          "GlobalTaxCode": {
            "type": "string",
            "description": "Paycor's Global tax code",
            "nullable": true,
            "example": "FITWH"
          },
          "TaxDescription": {
            "type": "string",
            "description": "Tax description, Paycor-assigned",
            "nullable": true,
            "example": "Federal Income Tax"
          },
          "TaxAmount": {
            "type": "number",
            "description": "Amount withheld from check for tax",
            "format": "decimal",
            "nullable": true,
            "example": 477.83
          },
          "EmployeeTax": {
            "type": "boolean",
            "description": "Indicates if tax refers to employee",
            "example": true
          },
          "EmployerTax": {
            "type": "boolean",
            "description": "Indicates if tax refers to employer",
            "example": false
          }
        }
      },
      "PayStubDeduction2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalDeductionsAmount": {
            "type": "number",
            "description": "Sum of all deduction amounts in Deductions collection",
            "format": "decimal",
            "nullable": true
          },
          "TotalEmployerDeductionsAmount": {
            "type": "number",
            "description": "Sum of all deduction amounts in Deductions collection for employers",
            "format": "decimal",
            "nullable": true
          },
          "TotalEmployeeDeductionsAmount": {
            "type": "number",
            "description": "Sum of all deduction amounts in Deductions collection for employees",
            "format": "decimal",
            "nullable": true
          },
          "Deductions": {
            "type": "array",
            "description": "List of Deductions included ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayStubDeductionItem"
              },
              "$ref": "#/components/schemas/PayStubDeductionItem2"
            }
          }
        }
      },
      "PayStubDeductionItem2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DeductionCode": {
            "type": "string",
            "description": "Deduction code printed on paycheck, assigned via LegalEntityDeduction",
            "nullable": true,
            "example": "CSDispOH"
          },
          "GlobalDeductionCode": {
            "type": "string",
            "description": "Global deduction code",
            "nullable": true,
            "example": "401K"
          },
          "DeductionDescription": {
            "type": "string",
            "description": "Deduction description assigned by Legal Entity, assigned via LegalEntityDeduction",
            "nullable": true,
            "example": "Child Support Ohio"
          },
          "DeductionAmount": {
            "type": "number",
            "description": "Amount deducted from check",
            "format": "decimal",
            "nullable": true,
            "example": 1000
          },
          "EmployeeDeduction": {
            "type": "boolean",
            "description": "Indicates if deduction is employee deduction",
            "example": true
          },
          "EmployerDeduction": {
            "type": "boolean",
            "description": "Indicates if deduction is employer deduction",
            "example": false
          }
        }
      },
      "Includes10": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    GrossAmount - Include gross amount\n\n\n    NetAmount - Include net amount\n\n\n    Earnings - Include earnings\n\n\n    Taxes - Include taxes\n\n\n    Deductions - Include deductions",
        "x-enumNames": [
          "All",
          "GrossAmount",
          "NetAmount",
          "Earnings",
          "Taxes",
          "Deductions"
        ],
        "enum": [
          "All",
          "GrossAmount",
          "NetAmount",
          "Earnings",
          "Taxes",
          "Deductions"
        ]
      },
      "EmployeePayStubHistory": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system.",
            "format": "int32",
            "example": 100
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "Earnings": {
            "description": "Earning object which contains total amount of earnings and collection of earning items.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeEarningsHistory"
          },
          "Deductions": {
            "description": "Deductions object which contains total amount of deductions and collection of deductions items.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeDeductionsHistory"
          },
          "Taxes": {
            "description": "Tax object which contains total amount of taxes and collection of tax items.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeTaxesHistory"
          },
          "Employee": {
            "description": "URL to access the Employee resource for additional information. \n            ",
            "nullable": true,
            "example": "/v1/employees/26413223-196c-0000-0000-0007d54d9839",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "EmployeeEarningsHistory": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalEarningsAmount": {
            "type": "number",
            "description": "Sum of all earning amounts in EarningHistoryItems collection.",
            "format": "decimal",
            "nullable": true,
            "example": 15000
          },
          "EarningHistoryItems": {
            "type": "array",
            "description": "List of Earnings.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeEarningHistoryItem"
              },
              "$ref": "#/components/schemas/EmployeeEarningHistoryItem"
            }
          }
        }
      },
      "EmployeeEarningHistoryItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of this tax item.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "Name": {
            "type": "string",
            "description": "Name of this earning item.",
            "nullable": true,
            "example": "Overtime Hours"
          },
          "TotalEarningAmount": {
            "type": "number",
            "description": "Total earning amount.",
            "format": "decimal",
            "nullable": true,
            "example": 456
          },
          "TotalEarningHours": {
            "type": "number",
            "description": "Total earning hours.",
            "format": "decimal",
            "nullable": true,
            "example": 82
          },
          "DeductionAmount": {
            "type": "number",
            "description": "Amount deducted from this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 100
          },
          "EarningsTaxableAmount": {
            "type": "number",
            "description": "Taxable amount of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 100
          },
          "EarningsTaxableWages": {
            "type": "number",
            "description": "Taxable wages of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 100
          },
          "EarningsExemptWages": {
            "type": "number",
            "description": "Exempt wages of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 100
          },
          "EarningsExcessWages": {
            "type": "number",
            "description": "Excess wages of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 100
          },
          "TotalWages": {
            "type": "number",
            "description": "Total wages of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 100
          },
          "EarningTotalNonMemoAmount": {
            "type": "number",
            "description": "Total non memo amount of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 50
          },
          "EarningTotalNonMemoHours": {
            "type": "number",
            "description": "Total non memo hours of this earning item.",
            "format": "decimal",
            "nullable": true,
            "example": 40
          },
          "EarningCode": {
            "type": "string",
            "description": "Earning code of this item, assigned via LegalEntityEarning.",
            "nullable": true,
            "example": "Reg"
          },
          "EarningDescription": {
            "type": "string",
            "description": "Earning description of this item, assigned by Legal Entity via LegalEntityEarning.",
            "nullable": true,
            "example": "Regular"
          }
        }
      },
      "EmployeeDeductionsHistory": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalDeductionsAmount": {
            "type": "number",
            "description": "Sum of all deduction amounts in DeductionHistoryItems collection.",
            "format": "decimal",
            "nullable": true
          },
          "DeductionHistoryItems": {
            "type": "array",
            "description": "List of Deductions.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeDeductionHistoryItem"
              },
              "$ref": "#/components/schemas/EmployeeDeductionHistoryItem"
            }
          }
        }
      },
      "EmployeeDeductionHistoryItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of this deduction item.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "Name": {
            "type": "string",
            "description": "Name of this deduction item.",
            "nullable": true,
            "example": "401k plan"
          },
          "TotalDeductionAmount": {
            "type": "number",
            "description": "Total amount deducted from this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 234
          },
          "DeductionTotalNonMemoHours": {
            "type": "number",
            "description": "Total non memo hours hours of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 22
          },
          "DeductionTaxableAmount": {
            "type": "number",
            "description": "Taxable amount of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 500
          },
          "DeductionTaxableWages": {
            "type": "number",
            "description": "Taxable wages of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 500
          },
          "DeductionExemptWages": {
            "type": "number",
            "description": "Exempt wages of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 300
          },
          "DeductionExcessWages": {
            "type": "number",
            "description": "Excess wages of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 300
          },
          "DeductionTotalWages": {
            "type": "number",
            "description": "Total wages of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 600
          },
          "DeductionTotalNonMemoAmount": {
            "type": "number",
            "description": "Total non memo amount of this deduction item.",
            "format": "decimal",
            "nullable": true,
            "example": 200
          },
          "DeductionCode": {
            "type": "string",
            "description": "Deduction code of this deduction item.",
            "nullable": true,
            "example": "CSDispOH"
          },
          "DeductionDescription": {
            "type": "string",
            "description": "Deduction description assigned by Legal Entity, assigned via LegalEntityDeduction.",
            "nullable": true,
            "example": "Child Support Ohio"
          }
        }
      },
      "EmployeeTaxesHistory": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalEmployeeAmount": {
            "type": "number",
            "description": "Sum of all employee tax amounts in TaxHistoryItems collection.",
            "format": "decimal",
            "nullable": true,
            "example": 12600
          },
          "TotalEmployerAmount": {
            "type": "number",
            "description": "Sum of all employer tax amounts in TaxHistoryItems collection.",
            "format": "decimal",
            "nullable": true,
            "example": 12600
          },
          "TaxHistoryItems": {
            "type": "array",
            "description": "List of Taxes.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeTaxHistoryItem"
              },
              "$ref": "#/components/schemas/EmployeeTaxHistoryItem"
            }
          }
        }
      },
      "EmployeeTaxHistoryItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of this tax item.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "Name": {
            "type": "string",
            "description": "Name of this tax item.",
            "nullable": true,
            "example": "FITWH - Federal Income Tax"
          },
          "EmployerTaxAmount": {
            "type": "number",
            "description": "Employer's tax amount.",
            "format": "decimal",
            "nullable": true,
            "example": 430.5
          },
          "EmployeeTaxAmount": {
            "type": "number",
            "description": "Employee's tax amount.",
            "format": "decimal",
            "nullable": true,
            "example": 430.5
          },
          "TaxableWages": {
            "type": "number",
            "description": "Employee's taxable wage.",
            "format": "decimal",
            "nullable": true,
            "example": 430.5
          },
          "TaxableExemptWages": {
            "type": "number",
            "description": "Employee's taxable exempt wage.",
            "format": "decimal",
            "nullable": true,
            "example": 430.5
          },
          "TaxableExcessWages": {
            "type": "number",
            "description": "Employee's taxable excess wage.",
            "format": "decimal",
            "nullable": true,
            "example": 430.5
          },
          "TotalWages": {
            "type": "number",
            "description": "Employee's total wage.",
            "format": "decimal",
            "nullable": true,
            "example": 430.5
          },
          "TaxCode": {
            "type": "string",
            "description": "Tax code printed on paycheck, Paycor-assigned",
            "nullable": true,
            "example": "FITWH"
          },
          "TaxDescription": {
            "type": "string",
            "description": "Tax description, Paycor-assigned",
            "nullable": true,
            "example": "Federal Income Tax"
          },
          "TaxAmount": {
            "type": "number",
            "description": "Amount withheld from check for tax",
            "format": "decimal",
            "nullable": true,
            "example": 477.83
          }
        }
      },
      "Includes11": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    Earnings - Include earnings\n\n\n    Taxes - Include taxes\n\n\n    Deductions - Include deductions",
        "x-enumNames": [
          "All",
          "Earnings",
          "Taxes",
          "Deductions"
        ],
        "enum": [
          "All",
          "Earnings",
          "Taxes",
          "Deductions"
        ]
      },
      "PagedResultOfEmployeePayStubHistory": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeePayStubHistory"
              },
              "$ref": "#/components/schemas/EmployeePayStubHistory"
            }
          }
        }
      },
      "Includes12": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    Earnings - Include earnings\n\n\n    Taxes - Include taxes\n\n\n    Deductions - Include deductions",
        "x-enumNames": [
          "All",
          "Earnings",
          "Taxes",
          "Deductions"
        ],
        "enum": [
          "All",
          "Earnings",
          "Taxes",
          "Deductions"
        ]
      },
      "EmployeeSchedule": {
        "type": "object",
        "description": "The Employee Schedule model represents all schedules for a single employee for a given date range.",
        "additionalProperties": false,
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the shift when employee worked.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique Identifier of the Legal Entity in Paycor's system.\n            ",
            "format": "int32",
            "example": 122900
          },
          "Schedules": {
            "type": "array",
            "description": "List of type Schedule containing the employee's schedule information.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Schedule"
              },
              "$ref": "#/components/schemas/Schedule"
            }
          },
          "TotalShifts": {
            "type": "integer",
            "description": "This is the number of shifts an employee has worked for a given date range.",
            "format": "int32",
            "example": 5
          },
          "TotalHours": {
            "type": "number",
            "description": "This is the amount of hours an employee has worked for a given date range.",
            "format": "double",
            "example": 40
          },
          "Employee": {
            "description": "URL to access the Employee resource for additional information about the employee.",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "description": "The Schedule model represents all related employee schedule information.\nProvides link to the Shift's Department",
        "additionalProperties": false,
        "properties": {
          "ScheduleId": {
            "type": "string",
            "description": "Unique identifier of the Schedule in Paycor's system. Generated by Paycor.\n            ",
            "format": "guid",
            "example": "5e699a0d-0000-0000-0000-0007d54d9839"
          },
          "StartDateTime": {
            "type": "string",
            "description": "Date and time the employee will begin work.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "EndDateTime": {
            "type": "string",
            "description": "Date and time the employee will stop work.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "BeforeStartTimeInMinutes": {
            "type": "integer",
            "description": "Punches will be tied to the schedule if employee clocks in this many Minutes before shift starts.",
            "format": "int32",
            "example": 120
          },
          "AfterEndTimeInMinutes": {
            "type": "integer",
            "description": "Punches will be tied to the schedule if employee clocks out this many Minutes after shift ends.",
            "format": "int32",
            "example": 120
          },
          "ShiftDepartmentName": {
            "type": "string",
            "description": "Department name where the employee's timecard was created.",
            "nullable": true,
            "example": "Sales"
          },
          "ShiftName": {
            "type": "string",
            "description": "This is the shift name that is associated to the shift.",
            "nullable": true,
            "example": "Shift A"
          },
          "TotalMinutesWorked": {
            "type": "integer",
            "description": "This is the amount of minutes an employee has worked.",
            "format": "int32",
            "example": 480
          },
          "TotalHoursWorked": {
            "type": "number",
            "description": "This is the amount of hours an employee has worked.",
            "format": "double",
            "example": 38.5
          },
          "StartDateTimeWithBefore": {
            "type": "string",
            "description": "Date and time when employee punches will start being tied to a schedule.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "EndDateTimeWithAfter": {
            "type": "string",
            "description": "Date and time when employee punches will stop being tied to a schedule.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "CrossesMidnight": {
            "type": "boolean",
            "description": "True if shift starts in one day and ends the next day.",
            "example": true
          },
          "ShiftDepartment": {
            "description": "URL to access the Department resource for additional information.",
            "nullable": true,
            "example": "/v1/Departments/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfEmployeeSchedule": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeSchedule"
              },
              "$ref": "#/components/schemas/EmployeeSchedule"
            }
          }
        }
      },
      "Schedule2": {
        "type": "object",
        "description": "The Schedule create model.",
        "additionalProperties": false,
        "properties": {
          "StartDateTime": {
            "type": "string",
            "description": "Date and time the employee will begin work.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "EndDateTime": {
            "type": "string",
            "description": "Date and time the employee will stop work.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)\n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "BeforeStartTimeInMinutes": {
            "type": "integer",
            "description": "Punches will be tied to the schedule if employee clocks in this many Minutes before shift starts.",
            "format": "int32",
            "nullable": true,
            "example": 120
          },
          "AfterEndTimeInMinutes": {
            "type": "integer",
            "description": "Punches will be tied to the schedule if employee clocks out this many Minutes after shift ends.",
            "format": "int32",
            "nullable": true,
            "example": 120
          },
          "Label": {
            "type": "string",
            "description": "This is the label that will be assigned to the shift.\n            ",
            "nullable": true,
            "example": "MorningShift"
          },
          "ShiftDepeartmentId": {
            "type": "string",
            "description": "Unique identifier of the Department where the employee's timecard will be created.",
            "format": "guid",
            "nullable": true,
            "example": "2f28bd9c-a39e-41f1-b40f-b44bf2e9c265"
          }
        }
      },
      "PagedResultOfSchedulingJob": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SchedulingJob"
              },
              "$ref": "#/components/schemas/SchedulingJob"
            }
          }
        }
      },
      "SchedulingJob": {
        "type": "object",
        "description": "Paycor Scheduling Job.",
        "additionalProperties": false,
        "properties": {
          "SchedulingJobId": {
            "type": "string",
            "description": "Unique identifier of the Scheduling Job.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "SchedulingJobName": {
            "type": "string",
            "description": "Name of the Scheduling Job.",
            "nullable": true,
            "example": "Software Engineer"
          }
        }
      },
      "PagedResultOfSchedulingShift": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SchedulingShift"
              },
              "$ref": "#/components/schemas/SchedulingShift"
            }
          }
        }
      },
      "SchedulingShift": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the shift, from the Paycor system.",
            "format": "guid",
            "example": "3eb9650f-5fdf-4ad4-b486-08dc48bbf6fd"
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee associated with the shift, from the Paycor system.",
            "format": "guid",
            "example": "3fda0f7b-4da1-0000-0000-0000361a0300"
          },
          "EmployeeName": {
            "type": "string",
            "description": "Full name of the employee associated with the shift.",
            "nullable": true,
            "example": "FirstName LastName"
          },
          "SchedulingJobId": {
            "type": "string",
            "description": "Unique identifier of the job associated with the shift, from the Paycor system.",
            "format": "guid",
            "example": "c36fdab3-45c0-e911-9117-0050569f27b8"
          },
          "SchedulingJobName": {
            "type": "string",
            "description": "Name of the Job associated with the shift.",
            "nullable": true,
            "example": "000001 - Acme Co-"
          },
          "ScheduleGroupId": {
            "type": "string",
            "description": "Unique identifier of the schedule group associated with the shift, from the Paycor system.",
            "format": "guid",
            "example": "5b03d478-58d0-4d6f-a629-8083ba1c9821"
          },
          "ScheduleGroupName": {
            "type": "string",
            "description": "Name of the schedule group associated with the shift.",
            "nullable": true,
            "example": "Housekeeping Crew"
          },
          "IsPublished": {
            "type": "boolean",
            "description": "Indicates whether shift has been published or not.",
            "example": true
          },
          "Title": {
            "type": "string",
            "description": "Shift's name.",
            "nullable": true,
            "example": "Shift ABC"
          },
          "StartDateTime": {
            "type": "string",
            "description": "Begin date and time of the shift, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "example": "2024-03-19T05:30:00Z"
          },
          "EndDateTime": {
            "type": "string",
            "description": "End date and time of the shift, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "example": "2024-03-19T06:30:00Z"
          },
          "Color": {
            "type": "string",
            "description": "Shift's color.",
            "nullable": true,
            "example": 193782
          },
          "DepartmentId": {
            "type": "string",
            "description": "Unique identifier of the department associated with the shift, from the Paycor system.",
            "format": "guid",
            "example": "fbb2c75e-ce97-0000-0000-0000361a0300"
          },
          "DepartmentName": {
            "type": "string",
            "description": "Name of the department associated with the shift.",
            "nullable": true,
            "example": "\"300 - New York City"
          },
          "Notes": {
            "type": "string",
            "description": "Shift's notes.",
            "nullable": true,
            "example": "Please update documentation"
          },
          "BreakRules": {
            "type": "array",
            "description": "List of shift's breaks",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "BreakRuleWithDates"
              },
              "$ref": "#/components/schemas/BreakRuleWithDates"
            }
          },
          "NetPaidHoursOnly": {
            "type": "number",
            "description": "Shift's length after the deduction of unpaid breaks, in minutes.",
            "format": "decimal",
            "example": 0
          },
          "WorkSiteId": {
            "type": "string",
            "description": "Unique identifier of the work site associated with the shift, from the Paycor system.",
            "format": "guid",
            "nullable": true,
            "example": "34305ED0A-0D47-4B5E-C31E-08D93653A396"
          },
          "WorkSiteName": {
            "type": "string",
            "description": "Name of the work site associated with the shift.",
            "nullable": true,
            "example": "Box Office"
          },
          "Distance": {
            "type": "number",
            "description": "Distance between an employee and schedule group geo locations.",
            "format": "decimal",
            "nullable": true,
            "example": 0.5
          },
          "AcknowledgementStatus": {
            "description": "Status of shift acknowledgement i.e.  Pending, Confirmed or Rejected.",
            "nullable": true,
            "example": "Approved",
            "$ref": "#/components/schemas/ShiftAcknowledgementStatus"
          },
          "ActivityTypeId": {
            "type": "string",
            "description": "Unique identifier of the activity type associated with the shift, from the Paycor system.",
            "format": "guid",
            "nullable": true,
            "example": "1AD2C9A5-CC25-4557-94E4-151A5E1ED1EA"
          },
          "ActivityTypeName": {
            "type": "string",
            "description": "Name of the activity type associated with the shift.",
            "nullable": true,
            "example": "Lunch"
          },
          "ActivityTypeColor": {
            "type": "string",
            "description": "Color of the activity type associated with the shift.",
            "nullable": true,
            "example": "bc4b19"
          },
          "LaborCodes": {
            "type": "array",
            "description": "List of labor categories associated with the shift with labor codes.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ShiftLaborCode"
              },
              "$ref": "#/components/schemas/ShiftLaborCode"
            }
          }
        }
      },
      "BreakRuleWithDates": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Paid": {
            "type": "boolean",
            "description": "True/false based on whether the break is paid or not",
            "example": true
          },
          "BreakInMinutes": {
            "type": "integer",
            "description": "Duration of break, in minutes.",
            "format": "int32",
            "example": 10
          },
          "StartTime": {
            "type": "string",
            "description": "Begin date and time of the break, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "example": "2024-03-19T05:50:00Z"
          },
          "EndTime": {
            "type": "string",
            "description": "End date and time of the break, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "example": "2024-03-19T06:00:00Z"
          }
        }
      },
      "ShiftAcknowledgementStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "Confirmed",
          "Rejected"
        ],
        "enum": [
          "Pending",
          "Confirmed",
          "Rejected"
        ]
      },
      "ShiftLaborCode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LaborCode3"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Code": {
                "type": "string",
                "description": "Code of the labor code associated with the labor category within the shift.",
                "nullable": true,
                "example": 668
              },
              "LaborCodeName": {
                "type": "string",
                "description": "Name of the labor code associated with the labor category within the shift.",
                "nullable": true,
                "example": "AHA"
              }
            }
          }
        ]
      },
      "LaborCode3": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LaborCategoryId": {
            "type": "string",
            "description": "Unique identifier of the Job Costing Labor Category of the Labor Code. ",
            "format": "guid"
          },
          "LaborCodeId": {
            "type": "string",
            "description": "Unique identifier for the Labor Code under the Labor Category.\n            ",
            "format": "guid"
          }
        }
      },
      "SchedulingShift2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "IgnoreWarnings",
          "IsPublished",
          "ScheduleGroupId",
          "SchedulingJobId",
          "StartDateTime",
          "EndDateTime",
          "DepartmentId"
        ],
        "properties": {
          "IgnoreWarnings": {
            "type": "boolean",
            "description": "Indicates wheather warnings should be ignored",
            "example": true
          },
          "IsPublished": {
            "type": "boolean",
            "description": "Indicates whether shift should be published",
            "example": true
          },
          "Title": {
            "type": "string",
            "description": "Shift's name.",
            "nullable": true,
            "example": "First shift"
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee associated with the shift.",
            "format": "guid",
            "nullable": true,
            "example": "d2422e07-aff1-450d-8938-c1247f00615a"
          },
          "ScheduleGroupId": {
            "type": "string",
            "description": "Unique identifier of the schedule group associated with the shift.",
            "format": "guid",
            "minLength": 1,
            "example": "e022fbd8-e2c8-486b-ac9e-17cf313c06d6"
          },
          "SchedulingJobId": {
            "type": "string",
            "description": "Unique identifier of the job associated with the shift.",
            "format": "guid",
            "minLength": 1,
            "example": "c966a1f1-52ef-4480-b58c-4736bba1f969"
          },
          "StartDateTime": {
            "type": "string",
            "description": "Begin date and time of the shift, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)\n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2024-03-01T00:00:00Z"
          },
          "EndDateTime": {
            "type": "string",
            "description": "End date and time of the shift, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "minLength": 1,
            "example": "2024-03-01T00:00:00Z"
          },
          "Notes": {
            "type": "string",
            "description": "Shift's notes.",
            "nullable": true,
            "example": "note: Please complete documentation "
          },
          "DepartmentId": {
            "type": "string",
            "description": "Unique identifier of the department associated with the shift.",
            "format": "guid",
            "minLength": 1,
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "WorkSiteId": {
            "type": "string",
            "description": "Unique identifier of the work site associated with the shift.",
            "format": "guid",
            "nullable": true,
            "example": "dbfd1ded-44a5-429d-a781-0d119c8c87e3"
          },
          "ActivityTypeId": {
            "type": "string",
            "description": "Unique identifier of the activity type associated with the shift.",
            "format": "guid",
            "nullable": true,
            "example": "616f31bc-6de4-42d1-9192-15edafa3cd12"
          },
          "Breaks": {
            "type": "array",
            "description": "List of shift's breaks",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SchedulingShiftBreak"
              },
              "$ref": "#/components/schemas/SchedulingShiftBreak"
            }
          },
          "LaborCodes": {
            "type": "array",
            "description": "​LaborCodes must either be empty or contain an array of valid LaborCategoryIds and LaborCodeIds.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode3"
            }
          }
        }
      },
      "SchedulingShiftBreak": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "StartTime": {
            "type": "string",
            "description": "Begin date and time of the break, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "description": "End date and time of the break, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateSchedulingShiftsResponse": {
        "type": "object",
        "description": "Response for creating Scheduling Shifts",
        "additionalProperties": false,
        "properties": {
          "Shifts": {
            "type": "array",
            "description": "List of responses for individual Scheduling Shift",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SchedulingShiftResponseItem"
              },
              "$ref": "#/components/schemas/SchedulingShiftResponseItem"
            }
          }
        }
      },
      "SchedulingShiftResponseItem": {
        "type": "object",
        "description": "Response for the individual Scheduling Shift.",
        "additionalProperties": false,
        "properties": {
          "ShiftId": {
            "type": "string",
            "description": "If shift is successfully created ShiftId will be returned.",
            "format": "guid",
            "nullable": true,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "ShiftModelId": {
            "type": "string",
            "description": "Represents the ShiftModelId that was passed in payload and is used to identify individual shift.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "WarningsOrErrors": {
            "type": "array",
            "description": "If shift was not created this property will contain list of warnings or errors that occured. Warnings can be ignored by setting ignoreWarnings property to true in the payload.",
            "nullable": true,
            "example": "Connie has an overlapping shift. Ignoring this warning will send the overlapping shift to open shifts.",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            }
          }
        }
      },
      "SchedulingShifts": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "IgnoreWarnings",
          "Shifts"
        ],
        "properties": {
          "IgnoreWarnings": {
            "type": "boolean",
            "description": "Indicates whether warnings should be ignored",
            "example": true
          },
          "Shifts": {
            "type": "array",
            "description": "List od Shifts to be created",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SchedulingShiftItem"
              },
              "$ref": "#/components/schemas/SchedulingShiftItem"
            }
          }
        }
      },
      "SchedulingShiftItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "IsPublished",
          "ScheduleGroupId",
          "SchedulingJobId",
          "StartDateTime",
          "EndDateTime",
          "DepartmentId",
          "ShiftModelId"
        ],
        "properties": {
          "IsPublished": {
            "type": "boolean",
            "description": "Indicates whether shift should be published",
            "example": true
          },
          "Title": {
            "type": "string",
            "description": "Shift's name.",
            "nullable": true,
            "example": "First shift"
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee associated with the shift.",
            "format": "guid",
            "nullable": true,
            "example": "d2422e07-aff1-450d-8938-c1247f00615a"
          },
          "ScheduleGroupId": {
            "type": "string",
            "description": "Unique identifier of the schedule group associated with the shift.",
            "format": "guid",
            "minLength": 1,
            "example": "e022fbd8-e2c8-486b-ac9e-17cf313c06d6"
          },
          "SchedulingJobId": {
            "type": "string",
            "description": "Unique identifier of the job associated with the shift.",
            "format": "guid",
            "minLength": 1,
            "example": "c966a1f1-52ef-4480-b58c-4736bba1f969"
          },
          "StartDateTime": {
            "type": "string",
            "description": "Begin date and time of the shift, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)\n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2024-03-01T00:00:00Z"
          },
          "EndDateTime": {
            "type": "string",
            "description": "End date and time of the shift, in UTC. Format: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "minLength": 1,
            "example": "2024-03-01T00:00:00Z"
          },
          "Notes": {
            "type": "string",
            "description": "Shift's notes.",
            "nullable": true,
            "example": "note: Please complete documentation "
          },
          "DepartmentId": {
            "type": "string",
            "description": "Unique identifier of the department associated with the shift.",
            "format": "guid",
            "minLength": 1,
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "WorkSiteId": {
            "type": "string",
            "description": "Unique identifier of the work site associated with the shift.",
            "format": "guid",
            "nullable": true,
            "example": "dbfd1ded-44a5-429d-a781-0d119c8c87e3"
          },
          "ActivityTypeId": {
            "type": "string",
            "description": "Unique identifier of the activity type associated with the shift.",
            "format": "guid",
            "nullable": true,
            "example": "616f31bc-6de4-42d1-9192-15edafa3cd12"
          },
          "Breaks": {
            "type": "array",
            "description": "List of shift's breaks",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SchedulingShiftBreak"
              },
              "$ref": "#/components/schemas/SchedulingShiftBreak"
            }
          },
          "LaborCodes": {
            "type": "array",
            "description": "​LaborCodes must either be empty or contain an array of valid LaborCategoryIds and LaborCodeIds.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode3"
            }
          },
          "ShiftModelId": {
            "type": "string",
            "description": "Unique identifier representing this Shift.\nThis is not ID of the shift, but a unique identifier of the shift during the process of creation.\nShift Model Id must be a unique value inside shift bach.",
            "format": "guid",
            "minLength": 1,
            "example": "d3f16ec3-c2fb-480c-bf15-46b7b69f9753"
          }
        }
      },
      "EmployeeReturnItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Employee"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Email": {
                "nullable": true,
                "$ref": "#/components/schemas/WorkEmailExample"
              }
            }
          }
        ]
      },
      "WorkEmailExample": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Type": {
                "$ref": "#/components/schemas/EmployeeEmailType"
              }
            }
          }
        ]
      },
      "EmployeeEmailType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Work"
        ],
        "enum": [
          "Work"
        ]
      },
      "Email": {
        "type": "object",
        "description": "The Email model represents Email information. ",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "description": "Enumeration of valid email type values.",
            "example": "Home",
            "$ref": "#/components/schemas/EmailType"
          },
          "EmailAddress": {
            "type": "string",
            "description": "Email Address of the person.",
            "nullable": true,
            "example": "abc@email.com"
          }
        }
      },
      "EmailType": {
        "type": "string",
        "description": "Enumeration of valid Email Type values. ",
        "x-enumNames": [
          "Home",
          "Work"
        ],
        "enum": [
          "Home",
          "Work"
        ]
      },
      "Employee": {
        "type": "object",
        "description": "The Employee model represents all Employee related information.\n Provides links to the Employee's associated Person, Legal Entity, Department, Earning, Deduction, Tax, Direct Deposit, Pay Rat and Custom Field information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "EmployeeNumber": {
            "type": "string",
            "description": "Unique number of the employee in the tenant. Generated by Paycor.\n            ",
            "nullable": true,
            "example": 12345
          },
          "AlternateEmployeeNumber": {
            "type": "string",
            "description": "Alternate employee number in the tenant.",
            "nullable": true,
            "example": 135790
          },
          "BadgeNumber": {
            "type": "string",
            "description": "Employee's assigned badge number - currently unavailable\n            ",
            "nullable": true,
            "example": 123666
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the employee.",
            "nullable": true,
            "example": "Charles"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the employee.",
            "nullable": true,
            "example": "Lutwidge"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee.",
            "nullable": true,
            "example": "Dodgson"
          },
          "Email": {
            "description": "Email Information of an employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Email"
          },
          "EmploymentDateData": {
            "description": "Data including the employee's employment dates of type EmploymentDateData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EmploymentDateData"
          },
          "PositionData": {
            "description": "Data including the employee's position of type EmployeePositionData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeePositionData"
          },
          "StatusData": {
            "description": "Data including the employee's status of type EmployeeStatusData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeStatusData"
          },
          "WorkLocation": {
            "description": "Data including the employee's work location of type EmployeeWorkLocationData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeWorkLocationData"
          },
          "Earnings": {
            "description": "URL to access the Earnings resource for employee earnings information. \n            ",
            "nullable": true,
            "example": "/v1/employees/66925f42-196c-0000-0000-0007d54d9839/earnings",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Deductions": {
            "description": "URL to access the Deductions resource for employee deductions information. \n            ",
            "nullable": true,
            "example": "/v1/employees/66925f42-196c-0000-0000-0007d54d9839/deductions",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Taxes": {
            "description": "URL to access the Taxes resource for employee tax information. \n            ",
            "nullable": true,
            "example": "/v1/employees/66925f42-196c-0000-0000-0007d54d9839/taxes",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "DirectDeposits": {
            "description": "URL to access the Direct Deposits resource for employee direct deposit information. \n            ",
            "nullable": true,
            "example": "/v1/employees/66925f42-196c-0000-0000-0007d54d9839/directDeposits",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "PayRates": {
            "description": "URL to access the PayRates resource for employee pay rate information. \n            ",
            "nullable": true,
            "example": "/v1/employees/66925f42-196c-0000-0000-0007d54d9839/payRates",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Person": {
            "description": "URL to access the Persons resource for employee information.\n            ",
            "nullable": true,
            "example": "/v1/500198/persons/66925f42-196c-0000-0000-0007d54d9839",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Department": {
            "description": "URL to access the Department resource for information about the employee's department.\n            ",
            "nullable": true,
            "example": "/v1/employees/66925f42-196c-0000-0000-0007d54d9839/department",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "EmploymentDateData": {
        "type": "object",
        "description": "The Employment Date Data represents the Employee's Employment Date information.\n            ",
        "additionalProperties": false,
        "properties": {
          "HireDate": {
            "type": "string",
            "description": "Date the employee was hired.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2000-11-01T00:00:00Z"
          },
          "AdjustedHireDate": {
            "type": "string",
            "description": "Adjusted hire date is used when the employee's hire date does not accurately reflect benefits eligibility because an employee may have left, \nbeen rehired or taken a Leave of Absence. This provides an alternative date for the employee's accruals to be calculated on.\n Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "nullable": true,
            "example": "2000-11-01T00:00:00Z"
          },
          "TerminationDate": {
            "type": "string",
            "description": "Date the employee was terminated.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-01-01T00:00:00Z"
          },
          "TerminationReason": {
            "type": "string",
            "description": "Reason for the employee's termination.\n            ",
            "nullable": true
          },
          "ReHireDate": {
            "type": "string",
            "description": "Re-hire date of the employee. Terminated employees can be rehired.\n Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-05-21T00:00:00Z"
          },
          "SeniorityDate": {
            "type": "string",
            "description": "Date on which the calculation of an employee's seniority is based.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2000-11-01T00:00:00Z"
          }
        }
      },
      "EmployeePositionData": {
        "type": "object",
        "description": "The Employee Position Data model represents the Employee's Position related data.",
        "additionalProperties": false,
        "properties": {
          "JobTitle": {
            "type": "string",
            "description": "Name of the employee's job title.\n            ",
            "nullable": true,
            "example": "Software Engineer"
          },
          "JobCode": {
            "type": "string",
            "description": "Code of the employee's job.\n            ",
            "nullable": true,
            "example": "P2"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee position data takes effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee position data is no longer in effect. This property will not return values for Active employees\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00:00Z"
          },
          "PayGroupId": {
            "type": "string",
            "description": "Unique identifier of the pay group in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52a2s23-0000-0000-0000-0007d0009840"
          },
          "Manager": {
            "description": "Employee's Manager's data of type Manager.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Manager"
          }
        }
      },
      "Manager": {
        "type": "object",
        "description": "The Manager model represents information about the Employee's Manager.\nProvides link to the Manager's Employee level information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the manager in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52a2s23-0000-0000-0000-0007d0009840"
          },
          "EmployeeNumber": {
            "type": "string",
            "description": "Employee number of the employee's manager.\n            ",
            "nullable": true,
            "example": 234444
          },
          "Employee": {
            "description": "URL to access the Employee resource for additional information about the employee's manager.\n            ",
            "nullable": true,
            "example": "/v1/employees/26413223-196c-0000-0000-0007d54d9839",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "EmployeeStatusData": {
        "type": "object",
        "description": "The Employee Status Data model represents Employee Employment Status information.\n            ",
        "additionalProperties": false,
        "properties": {
          "IsFullTime": {
            "type": "boolean",
            "description": "Whether employee is full time. \n            ",
            "nullable": true,
            "example": true
          },
          "Status": {
            "description": "Enumeration of valid employment status values.\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus"
          },
          "Flsa": {
            "description": "Enumeration of valid Fair Labor Standards Act (FLSA) defined type values.\n            ",
            "example": "SalaryExempt",
            "$ref": "#/components/schemas/FlsaType"
          },
          "Type": {
            "description": "Enumeration of valid employment type values.\n            ",
            "example": "Temporary",
            "$ref": "#/components/schemas/EmploymentType"
          },
          "EligibleForRehire": {
            "type": "string",
            "description": "Determines is employee eligible for rehire.\n            ",
            "nullable": true,
            "example": "Yes"
          }
        }
      },
      "EmploymentStatus": {
        "type": "string",
        "description": "Enumeration of valid Employment Status values.\n            ",
        "x-enumNames": [
          "Active",
          "Deceased",
          "LongTermDisability",
          "ShortTermDisability",
          "Fmla",
          "LaidOff",
          "LeaveWithPay",
          "LeaveWithoutPay",
          "ThirdPartyPayable",
          "Resigned",
          "Retired",
          "Terminated",
          "WorkersCompensation"
        ],
        "enum": [
          "Active",
          "Deceased",
          "LongTermDisability",
          "ShortTermDisability",
          "Fmla",
          "LaidOff",
          "LeaveWithPay",
          "LeaveWithoutPay",
          "ThirdPartyPayable",
          "Resigned",
          "Retired",
          "Terminated",
          "WorkersCompensation"
        ]
      },
      "FlsaType": {
        "type": "string",
        "description": "Enumeration of valid Types of Fair Labor Standards Act (FLSA) employment values.\n            ",
        "x-enumNames": [
          "HourlyExempt",
          "HourlyNonExempt",
          "SalaryExempt",
          "SalaryNonExempt"
        ],
        "enum": [
          "HourlyExempt",
          "HourlyNonExempt",
          "SalaryExempt",
          "SalaryNonExempt"
        ]
      },
      "EmploymentType": {
        "type": "string",
        "description": "Enumeration of valid Employment Type values.\n            ",
        "x-enumNames": [
          "Casual",
          "IndependentContractor",
          "Regular",
          "Seasonal",
          "Temporary",
          "Variable"
        ],
        "enum": [
          "Casual",
          "IndependentContractor",
          "Regular",
          "Seasonal",
          "Temporary",
          "Variable"
        ]
      },
      "EmployeeWorkLocationData": {
        "type": "object",
        "description": "The Employee Work Location Data model represents the Employee's Work Location related data.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the Employee's work location in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "Name": {
            "type": "string",
            "description": "Name of the Employee's work location.",
            "nullable": true,
            "example": "ACME East is an open concept office."
          },
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "nullable": true,
            "example": "4811 Montgomery Road"
          },
          "Type": {
            "description": "Address Type of Employee Work Location.\n            ",
            "$ref": "#/components/schemas/WorkLocationAddressType"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "County": {
            "type": "string",
            "description": "County in the address.\n            ",
            "nullable": true,
            "example": "Hamilton"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "nullable": true,
            "example": "45212-0341"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          }
        }
      },
      "WorkLocationAddressType": {
        "type": "string",
        "description": "Enumeration of valid Type of Work Location Address values.\n            ",
        "x-enumNames": [
          "Physical",
          "Mailing",
          "Unknown"
        ],
        "enum": [
          "Physical",
          "Mailing",
          "Unknown"
        ]
      },
      "Includes13": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    EmploymentDates - Include employment dates (e.g. hireDate)\n\n\n    Position - Include employee position (e.g. job title and manager)\n\n\n    Status - Include status data (e.g. Full time)\n\n\n    WorkLocation - Include work location data",
        "x-enumNames": [
          "All",
          "EmploymentDates",
          "Position",
          "Status",
          "WorkLocation"
        ],
        "enum": [
          "All",
          "EmploymentDates",
          "Position",
          "Status",
          "WorkLocation"
        ]
      },
      "EmailTypeOptions": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Work",
          "Home"
        ],
        "enum": [
          "Work",
          "Home"
        ]
      },
      "PagedResultOfEmployeeList": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeList"
              },
              "$ref": "#/components/schemas/EmployeeList"
            }
          }
        }
      },
      "EmployeeList": {
        "type": "object",
        "description": "The Employee List model represents information about multiple Employees.\nProvides link to additional Employee information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee list record in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52b68a4a-196c-0000-0000-0007d5268Sa2"
          },
          "EmployeeNumber": {
            "type": "string",
            "description": "Unique number of the employee in a partner's tenant.",
            "nullable": true,
            "example": 123666
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the employee.",
            "nullable": true,
            "example": "Charles"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the employee.",
            "nullable": true,
            "example": "Lutwidge"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee.",
            "nullable": true,
            "example": "Dodgson"
          },
          "Employee": {
            "description": "URL to access the Employee resource for additional information about the employee.",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfEmployeeReturnItem": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeReturnItem"
              },
              "$ref": "#/components/schemas/EmployeeReturnItem2"
            }
          }
        }
      },
      "EmployeeReturnItem2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Employee"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Email": {
                "nullable": true,
                "$ref": "#/components/schemas/WorkEmailExample2"
              }
            }
          }
        ]
      },
      "WorkEmailExample2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Type": {
                "$ref": "#/components/schemas/EmployeeEmailType"
              }
            }
          }
        ]
      },
      "Includes14": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    EmploymentDates - Include employment dates (e.g. hireDate)\n\n\n    Position - Include employee position (e.g. job title and manager)\n\n\n    Status - Include status data (e.g. Full time)\n\n\n    WorkLocation - Include work location data",
        "x-enumNames": [
          "All",
          "EmploymentDates",
          "Position",
          "Status",
          "WorkLocation"
        ],
        "enum": [
          "All",
          "EmploymentDates",
          "Position",
          "Status",
          "WorkLocation"
        ]
      },
      "EmailTypeOptions2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Work",
          "Home"
        ],
        "enum": [
          "Work",
          "Home"
        ]
      },
      "Employee2": {
        "type": "object",
        "description": "The Create Employee model represents Employee related information needed to create a new employee (a new hire).",
        "additionalProperties": false,
        "required": [
          "LegalEntityId",
          "FirstName",
          "LastName",
          "HireDate",
          "Status",
          "PaygroupDescription",
          "DepartmentCode",
          "PrimaryAddress"
        ],
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Employee's LegalEntityId.\n            ",
            "format": "int32",
            "example": 123666
          },
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee in the tenant. Generated by Paycor if not provided.\n            ",
            "format": "int32",
            "nullable": true,
            "example": 12345
          },
          "AlternateEmployeeNumber": {
            "type": "string",
            "description": "Can be up to 9 characters, Requires Alternate Employee Number product offering.",
            "nullable": true,
            "example": 1234567890
          },
          "Prefix": {
            "description": "Enumeration of valid name prefix values.",
            "example": "Dr",
            "$ref": "#/components/schemas/Prefix"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the employee.",
            "minLength": 1,
            "example": "Charles"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the employee.",
            "nullable": true,
            "example": "Lutwidge"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee.",
            "minLength": 1,
            "example": "Dodgson"
          },
          "Suffix": {
            "description": "Enumeration of valid name suffix values.",
            "example": "Sr",
            "$ref": "#/components/schemas/Suffix"
          },
          "HomeEmail": {
            "type": "string",
            "description": "Home Email Information of an employee.\n            ",
            "nullable": true
          },
          "WorkEmail": {
            "type": "string",
            "description": "Work Email Information of an employee.\n            ",
            "nullable": true
          },
          "Phones": {
            "type": "array",
            "description": "List of type Phone containing phone numbers of the employee.\nAccepts home,mobile and work phone numbers, upto 1 of each type.\nMobile phone is accepted only if home contact is provided. \n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Phone"
              },
              "$ref": "#/components/schemas/Phone"
            }
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social security number of the employee.",
            "nullable": true,
            "example": 555555555
          },
          "BirthDate": {
            "type": "string",
            "description": "Date of birth of the employee following the ISO 8601 standard.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "nullable": true,
            "example": "1944-04-01T00:00:00Z"
          },
          "Gender": {
            "description": "Employee's Gender (enumeration)\n            ",
            "example": "Female",
            "$ref": "#/components/schemas/Gender"
          },
          "Ethnicity": {
            "description": "Employee's Ethnicity (enumeration)\n            ",
            "example": "DeclinedToIdentify",
            "$ref": "#/components/schemas/EthnicityType"
          },
          "MaritalStatus": {
            "description": "Employee's Marital Status (enumeration)\n            ",
            "example": "Married",
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "WorkLocation": {
            "type": "string",
            "description": "The name of the Work Location to associate with new hire.\n * Must be an existing Work Location. Use API 'GET Legal Entity Work Location by Legal Entity ID' to retrieve a list of valid names.\n            ",
            "nullable": true
          },
          "JobTitle": {
            "type": "string",
            "description": "Name of the Job Title to associate with new hire.\n * Must be an existing Job setup on the Tenant. Use API 'GET Tenant Job Titles by TenantId' to retrieve a list of valid names.\n            ",
            "nullable": true,
            "example": "Software Engineer"
          },
          "HireDate": {
            "type": "string",
            "description": "Date the employee was hired following the ISO 8601 standard..\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2000-11-01T00:00:00Z"
          },
          "ReHireDate": {
            "type": "string",
            "description": "Re-hire date of the employee. Terminated employees can be rehired.\n Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-05-21T00:00:00Z"
          },
          "Status": {
            "description": "New hire employee's Status (enumeration)\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus"
          },
          "Flsa": {
            "description": "Fair Labor Standards Act (FLSA) type value for employee (enumeration)\n            ",
            "example": "SalaryExempt",
            "$ref": "#/components/schemas/FlsaType"
          },
          "Type": {
            "description": "If no input is supplied, Default value \"Regular\" will be assigned.\nNew hire employee's Employment Type (enumeration)\n            ",
            "example": "Temporary",
            "$ref": "#/components/schemas/EmploymentType"
          },
          "ManagerEmpId": {
            "type": "string",
            "description": "Unique identifier of the manager in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "nullable": true,
            "example": "52a2s23-0000-0000-0000-0007d0009840"
          },
          "PaygroupDescription": {
            "type": "string",
            "description": "The description of the paygroup that the employee belongs to.\n * Must be existing Paygroup. Call GET Pay Groups by LegalEntityID to lookup valid values in the field \"PaygroupName\". \n            ",
            "minLength": 1
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "The department code that the employee belongs to.\n  * Must be existing Department. Call Get Legal Entity Departments by LegalEntityID to get valid Code value.\n            ",
            "format": "int64"
          },
          "Veteran": {
            "description": "Veteran Status of new hire employee (enumeration)",
            "example": true,
            "$ref": "#/components/schemas/VeteranStatus"
          },
          "Disability": {
            "description": "Disabiilty Status of new hire employee (enumeration)",
            "example": true,
            "$ref": "#/components/schemas/DisabilityStatus"
          },
          "PrimaryAddress": {
            "description": "Primary address of employee.\n            ",
            "$ref": "#/components/schemas/GenericAddress"
          }
        }
      },
      "Prefix": {
        "type": "string",
        "description": "Enumeration of valid Prefix values.",
        "x-enumNames": [
          "None",
          "Dr",
          "DrWithSpace",
          "Fr",
          "Miss",
          "Mr",
          "Mrs",
          "Ms",
          "Prof",
          "Rev",
          "Sr"
        ],
        "enum": [
          "None",
          "Dr",
          "DrWithSpace",
          "Fr",
          "Miss",
          "Mr",
          "Mrs",
          "Ms",
          "Prof",
          "Rev",
          "Sr"
        ]
      },
      "Suffix": {
        "type": "string",
        "description": "Enumeration of valid Suffix values.",
        "x-enumNames": [
          "None",
          "II",
          "III",
          "IV",
          "V",
          "VI",
          "VII",
          "VIII",
          "IX",
          "X",
          "Jr",
          "Sr"
        ],
        "enum": [
          "None",
          "II",
          "III",
          "IV",
          "V",
          "VI",
          "VII",
          "VIII",
          "IX",
          "X",
          "Jr",
          "Sr"
        ]
      },
      "Phone": {
        "type": "object",
        "description": "The Phone model represents Phone information. ",
        "additionalProperties": false,
        "properties": {
          "CountryCode": {
            "type": "string",
            "description": "Country code for the phone number. ",
            "nullable": true,
            "example": "+1"
          },
          "AreaCode": {
            "type": "string",
            "description": "Area code for the phone number.",
            "nullable": true,
            "example": 513
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Local phone number. ",
            "nullable": true,
            "example": "555-2300"
          },
          "Type": {
            "description": "Enumeration of valid phone type values.",
            "example": "Cell",
            "$ref": "#/components/schemas/PhoneType"
          }
        }
      },
      "PhoneType": {
        "type": "string",
        "description": "Enumeration of valid Phone Type values. ",
        "x-enumNames": [
          "Unknown",
          "Work",
          "Home",
          "Pager",
          "Mobile",
          "Fax",
          "None"
        ],
        "enum": [
          "Unknown",
          "Work",
          "Home",
          "Pager",
          "Mobile",
          "Fax",
          "None"
        ]
      },
      "Gender": {
        "type": "string",
        "description": "Enumeration of valid Gender values.",
        "x-enumNames": [
          "Male",
          "Female"
        ],
        "enum": [
          "Male",
          "Female"
        ]
      },
      "EthnicityType": {
        "type": "string",
        "description": "Enumeration of valid Ethnicity Type values.\n            ",
        "x-enumNames": [
          "AmerIndorAKNative",
          "Asian",
          "BlackorAfricanAmerican",
          "HispanicorLatino",
          "White",
          "NatHIorOthPacIsland",
          "TwoormoreRaces",
          "DeclinedToIdentify"
        ],
        "enum": [
          "AmerIndorAKNative",
          "Asian",
          "BlackorAfricanAmerican",
          "HispanicorLatino",
          "White",
          "NatHIorOthPacIsland",
          "TwoormoreRaces",
          "DeclinedToIdentify"
        ]
      },
      "MaritalStatus": {
        "type": "string",
        "description": "Enumeration of valid Marital Status values.\n            ",
        "x-enumNames": [
          "Single",
          "Married",
          "Divorced",
          "Separated",
          "StateRecognizedUnion",
          "Widowed"
        ],
        "enum": [
          "Single",
          "Married",
          "Divorced",
          "Separated",
          "StateRecognizedUnion",
          "Widowed"
        ]
      },
      "VeteranStatus": {
        "type": "string",
        "description": "Enumeration of valid Veteran Status values.\n            ",
        "x-enumNames": [
          "Yes",
          "No",
          "DeclinedToIdentify"
        ],
        "enum": [
          "Yes",
          "No",
          "DeclinedToIdentify"
        ]
      },
      "DisabilityStatus": {
        "type": "string",
        "description": "Enumeration of valid Disability Status values.",
        "x-enumNames": [
          "Yes",
          "No",
          "DeclinedToIdentify"
        ],
        "enum": [
          "Yes",
          "No",
          "DeclinedToIdentify"
        ]
      },
      "GenericAddress": {
        "type": "object",
        "description": "The Generic Address model represents the Person's Address information (No type).",
        "additionalProperties": false,
        "required": [
          "StreetLine1",
          "ZipCode"
        ],
        "properties": {
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "minLength": 1,
            "example": "4811 Montgomery Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building A"
          },
          "Suite": {
            "type": "string",
            "description": "Suite information in the address.\n            ",
            "nullable": true,
            "example": "Suite 100"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "County": {
            "type": "string",
            "description": "County in the address.\n            ",
            "nullable": true,
            "example": "Hamilton"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "minLength": 1,
            "example": 45212
          }
        }
      },
      "EmployeeContact": {
        "type": "object",
        "description": "The PUT EmployeeContact model allows updating Employee's Contact Information fields. \nAll fields are optional. Fields not supplied with a value will retain previous values. ",
        "additionalProperties": false,
        "properties": {
          "HomeEmail": {
            "type": "string",
            "description": "Home Email Address of an employee.\n            ",
            "nullable": true
          },
          "WorkEmail": {
            "type": "string",
            "description": "Work Email Address of an employee.\n            ",
            "nullable": true
          },
          "Phones": {
            "type": "array",
            "description": "List of type Phone containing phone numbers of the employee.\nAccepts Home, Mobile and Work phone numbers, upto 1 of each type.\nOnly the specific number types passed in will be updated, existing phone numbers will remain unchanged.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Phone"
              },
              "$ref": "#/components/schemas/Phone"
            }
          },
          "PrimaryAddress": {
            "description": "Primary address of employee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GenericAddress"
          }
        }
      },
      "EmployeePositionAndStatus": {
        "type": "object",
        "description": "The PUT Employee Position And Status model allows updating Employee's Position and Status Information fields. \nEmployee Status fields are: EmploymentStatus and RehireDate. Both fields have to be set in order to update Employee Status.\nEmployee Position fields are: EmploymentType, WorkLocation, JobTitle, FLSA, ManagerId, DepartmentId. Fields EmployeeType and WorkLocation have to be set in order to update Employee Position.",
        "additionalProperties": false,
        "required": [
          "EmploymentStatus",
          "RehireDate",
          "EmploymentType",
          "WorkLocation"
        ],
        "properties": {
          "EmploymentStatus": {
            "description": "Employment Status (only valid value is \"Active\")\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus2"
          },
          "RehireDate": {
            "type": "string",
            "description": "Re-hire date of the employee. Terminated employees can be rehired.\n Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "minLength": 1,
            "example": "2020-05-21T00:00:00Z"
          },
          "EmploymentType": {
            "description": "Employee's Employment Type (enumeration)\n            ",
            "example": "Temporary",
            "$ref": "#/components/schemas/EmploymentType"
          },
          "WorkLocation": {
            "type": "string",
            "description": "The name of the Work Location to associate with Employee.\n * Must be an existing Work Location, use Legal Entity Work Locations to retrieve a list of valid names.\n            ",
            "minLength": 1,
            "example": "Cincinnati"
          },
          "JobTitle": {
            "type": "string",
            "description": "Name of the Job Title to associate with Employee.\n * Must be an existing Job setup on the Tenant. Use API 'GET Tenant Job Titles by TenantId' to retrieve a list of valid names.\n            ",
            "nullable": true,
            "example": "Software Engineer"
          },
          "Flsa": {
            "description": "Fair Labor Standards Act (FLSA) type value for employee (enumeration)\n            ",
            "nullable": true,
            "example": "SalaryExempt",
            "$ref": "#/components/schemas/FlsaType"
          },
          "ManagerId": {
            "type": "string",
            "description": "Unique identifier of Employee in Paycor's system. \n* Must be an existing Employee, use the EmployeeID provided from other GET Employee endpoints ",
            "format": "guid",
            "nullable": true,
            "example": "44480aa9-08d8-0000-0000-0000fd0d0300"
          },
          "DepartmentId": {
            "type": "string",
            "description": "Identifier of Department.\n* Use API 'GET Legal Entity Departments by Legal Entity id' to retrieve a list of valid departments.\n            ",
            "format": "guid",
            "nullable": true,
            "example": "3c88ef90-5e35-0000-0000-0000fb0d0300"
          }
        }
      },
      "EmploymentStatus2": {
        "type": "string",
        "description": "Enumeration of valid Employment Status Update values.\n            ",
        "x-enumNames": [
          "Active"
        ],
        "enum": [
          "Active"
        ]
      },
      "EmployeePosition": {
        "type": "object",
        "description": "The PUT Employee Position model allows updating Employee's Position fields.",
        "additionalProperties": false,
        "required": [
          "EmploymentType",
          "WorkLocation"
        ],
        "properties": {
          "EmploymentType": {
            "description": "Employee's Employment Type (enumeration)\n            ",
            "example": "Temporary",
            "$ref": "#/components/schemas/EmploymentType"
          },
          "WorkLocation": {
            "type": "string",
            "description": "The name of the Work Location to associate with Employee.\n * Must be an existing Work Location. Use API 'GET Legal Entity Work Location by Legal Entity ID' to retrieve a list of valid names.\n            ",
            "minLength": 1,
            "example": "Cincinnati"
          },
          "JobTitle": {
            "type": "string",
            "description": "Name of the Job Title to associate with Employee.\n * Must be an existing Job setup on the Tenant. Use API 'GET Tenant Job Titles by TenantId' to retrieve a list of valid names.\n            ",
            "nullable": true,
            "example": "Software Engineer"
          },
          "Flsa": {
            "description": "Fair Labor Standards Act (FLSA) type value for employee (enumeration)\n            ",
            "nullable": true,
            "example": "SalaryExempt",
            "$ref": "#/components/schemas/FlsaType"
          },
          "ManagerId": {
            "type": "string",
            "description": "Unique identifier of Employee in Paycor's system. ",
            "format": "guid",
            "nullable": true,
            "example": "44480aa9-08d8-0000-0000-0000fd0d0300"
          },
          "DepartmentId": {
            "type": "string",
            "description": "Identifier of Department.\n            ",
            "format": "guid",
            "nullable": true,
            "example": "3c88ef90-5e35-0000-0000-0000fb0d0300"
          }
        }
      },
      "EmployeeStatusUpdate": {
        "type": "object",
        "description": "The Employee Status model to update Employee Status related data.",
        "additionalProperties": false,
        "required": [
          "EffectiveDate",
          "EmployeeStatus"
        ],
        "properties": {
          "EffectiveDate": {
            "type": "string",
            "description": "Date at which the employee status update takes effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-01T00:00:00Z"
          },
          "EmployeeStatus": {
            "description": "Enumeration of valid employment status values.\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus"
          },
          "EmployeeStatusReasonId": {
            "type": "string",
            "description": "Unique Identifier for Employee Status Reason. All possible Status Reason Values can be found using Get Legal Entity Status Reason values endpoint.\n            ",
            "format": "guid",
            "nullable": true,
            "example": "aaeeef19-7b65-4ace-a244-ae1e43c6a634"
          },
          "EligibleForRehire": {
            "description": "Determines if an employee is eligible for rehire after termination. This is required when EmployeeStatus is updated to one of these values: Deceased, LaidOff, Resigned, Retired, Terminated. Otherwise optional.\n            ",
            "nullable": true,
            "example": "Yes",
            "$ref": "#/components/schemas/EligibleForRehire"
          },
          "IsVoluntaryByEmployee": {
            "type": "boolean",
            "description": "Determines if an employee termination is voluntary or not.  This is required when EmployeeStatus is updated to one of these values: Deceased, LaidOff, Resigned, Retired, Terminated. Otherwise optional.\n            ",
            "nullable": true,
            "example": false
          },
          "Notes": {
            "type": "string",
            "description": "Notes associated with the employee's status update, which will be stored in Employee's Status History.\n            ",
            "nullable": true,
            "example": "Employee absence from work"
          }
        }
      },
      "EligibleForRehire": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Yes",
          "No"
        ],
        "enum": [
          "Yes",
          "No"
        ]
      },
      "EmployeeIdentifyingData": {
        "type": "object",
        "description": "The PUT EmployeeIdentifyingData model allows updating Employee's personal data fields. \nAll fields are required, except EmployeeNumber, Middle Name and Status. ",
        "additionalProperties": false,
        "required": [
          "FirstName",
          "LastName",
          "Suffix",
          "SocialSecurityNumber",
          "BirthDate"
        ],
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the employee.",
            "minLength": 1,
            "example": "Charles"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee.",
            "minLength": 1,
            "example": "Peterson"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the employee.",
            "nullable": true,
            "example": "Hubble"
          },
          "Suffix": {
            "description": "Enumeration of valid name suffix values.",
            "example": "Sr",
            "$ref": "#/components/schemas/Suffix"
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social security number of the employee.",
            "minLength": 1,
            "example": 555555555
          },
          "BirthDate": {
            "type": "string",
            "description": "Date of birth of the employee.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "minLength": 1,
            "example": "1944-04-01T00:00:00Z"
          }
        }
      },
      "PagedResultOfEmployeesIdentifyingData": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeesIdentifyingData"
              },
              "$ref": "#/components/schemas/EmployeesIdentifyingData"
            }
          }
        }
      },
      "EmployeesIdentifyingData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the employee.",
            "nullable": true,
            "example": "Charles"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee.",
            "nullable": true,
            "example": "Peterson"
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social security number of the employee.",
            "nullable": true,
            "example": 555555555
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52b68a4a-196c-0000-0000-0007d5268Sa2"
          },
          "EmployeeNumber": {
            "type": "string",
            "description": "Unique number of the employee in the client.",
            "nullable": true,
            "example": 123666
          },
          "BirthDate": {
            "type": "string",
            "description": "Date of birth of the employee.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "nullable": true,
            "example": "1944-04-01T00:00:00Z"
          },
          "Status": {
            "description": "Employee status. Values are: Active and Inactive\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatusIdentifyingData"
          }
        }
      },
      "EmploymentStatusIdentifyingData": {
        "type": "string",
        "description": "Enumeration of valid Employment Status values.\n            ",
        "x-enumNames": [
          "Active",
          "Inactive"
        ],
        "enum": [
          "Active",
          "Inactive"
        ]
      },
      "Includes15": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Active",
          "Inactive"
        ],
        "enum": [
          "Active",
          "Inactive"
        ]
      },
      "EmployeesSearchResult": {
        "type": "object",
        "description": "Represents collection of employees with same SSN.",
        "additionalProperties": false,
        "properties": {
          "Match": {
            "type": "boolean",
            "description": "Flag which determines existence of employees with requested SSN.",
            "example": true
          },
          "Employees": {
            "type": "array",
            "description": "Collection of employees with requested SSN.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeRecord"
              },
              "$ref": "#/components/schemas/EmployeeRecord"
            }
          }
        }
      },
      "EmployeeRecord": {
        "type": "object",
        "description": "Employee status info.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Status": {
            "description": "Employee's status.",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus"
          }
        }
      },
      "EmployeeSearchRequest": {
        "type": "object",
        "description": "Represents body of search request for Employees by Social Security Number.",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "The unique identifier of the legal entity where we perform the search.",
            "format": "int32",
            "example": 200187
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social Security Number",
            "nullable": true,
            "example": "123-45-6789"
          }
        }
      },
      "EmployeePersonalData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the employee.",
            "nullable": true,
            "example": "Charles"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee.",
            "nullable": true,
            "example": "Dodgson"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the employee.",
            "nullable": true,
            "example": "Lutwidge"
          },
          "Prefix": {
            "description": "Enumeration of valid name prefix values.",
            "nullable": true,
            "example": "Dr",
            "$ref": "#/components/schemas/Prefix"
          },
          "Suffix": {
            "description": "Enumeration of valid name suffix values.",
            "nullable": true,
            "example": "Sr",
            "$ref": "#/components/schemas/Suffix"
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social security number of the employee.",
            "nullable": true,
            "example": 555555555
          },
          "BirthDate": {
            "type": "string",
            "description": "Date of birth of the employee following the ISO 8601 standard.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "nullable": true,
            "example": "1944-04-01T00:00:00Z"
          },
          "Gender": {
            "description": "Enumeration of valid Gender values.",
            "nullable": true,
            "example": "Male",
            "$ref": "#/components/schemas/Gender"
          },
          "VeteranStatus": {
            "description": "Veteran Status of employee (enumeration)",
            "nullable": true,
            "example": true,
            "$ref": "#/components/schemas/VeteranStatus"
          },
          "DisabilityStatus": {
            "description": "Disability Status of employee (enumeration)",
            "nullable": true,
            "example": true,
            "$ref": "#/components/schemas/DisabilityStatus"
          },
          "MaritalStatus": {
            "description": "Employee's Marital Status (enumeration)",
            "nullable": true,
            "example": "Married",
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "Ethnicity": {
            "description": "Employee's Ethnicity (enumeration)\n            ",
            "nullable": true,
            "example": "DeclinedToIdentify",
            "$ref": "#/components/schemas/EthnicityType"
          }
        }
      },
      "SimpleHire": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "LegalEntityId",
          "FirstName",
          "LastName",
          "HomeEmailAddress"
        ],
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Legal Entity Id",
            "format": "int32",
            "example": 122900
          },
          "ExportedByEmailAddress": {
            "type": "string",
            "description": "Email of the user exporting records",
            "nullable": true,
            "example": "email@domain.com"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the person. ",
            "minLength": 1,
            "example": "Edwin"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the person.",
            "minLength": 1,
            "example": "Hubble"
          },
          "PreferredName": {
            "type": "string",
            "description": "Preferred Name of the Person\n            ",
            "nullable": true,
            "example": "Carroll"
          },
          "CountryCode": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "Zip": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "nullable": true,
            "example": 45212
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "Address1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "nullable": true,
            "example": "4811 Montgomery Road"
          },
          "Address2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building A"
          },
          "MobilePhone": {
            "type": "string",
            "description": "Mobile phone number. ",
            "nullable": true,
            "example": "(123) 456–7890"
          },
          "HomePhone": {
            "type": "string",
            "description": "Home phone number. ",
            "nullable": true,
            "example": "(123) 456–7890"
          },
          "HomeEmailAddress": {
            "type": "string",
            "description": "Email Information of the person.\n            ",
            "minLength": 1,
            "example": "homeEmail@domain.com"
          },
          "Gender": {
            "description": "Employee's Gender (enumeration)\n            ",
            "nullable": true,
            "example": "Female",
            "$ref": "#/components/schemas/Gender"
          },
          "Ethnicity": {
            "description": "Employee's Ethnicity (enumeration)\n            ",
            "nullable": true,
            "example": "AmerIndorAKNative",
            "$ref": "#/components/schemas/EthnicityType"
          },
          "VeteranStatus": {
            "description": "Employee's VeteranStatus (enumeration)\n            ",
            "nullable": true,
            "example": "Yes",
            "$ref": "#/components/schemas/VeteranStatus"
          },
          "StartDate": {
            "type": "string",
            "description": "Date the employement start.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "JobTitle": {
            "type": "string",
            "description": "Name of the Job Title to associate with new hire.\n            ",
            "nullable": true,
            "example": "Software Engineer"
          },
          "DepartmentCode": {
            "type": "string",
            "description": "Code of the department in Paycor's system. \nCan be retrieved by calling 'Get Legal Entity Departments by Legal Entity ID'",
            "nullable": true,
            "example": 80
          },
          "Disability": {
            "description": "Disabiilty Status of new hire employee (enumeration)",
            "nullable": true,
            "example": "Yes",
            "$ref": "#/components/schemas/DisabilityStatus"
          },
          "BaseSalary": {
            "type": "number",
            "description": "Base Salary of new hire employee",
            "format": "decimal",
            "nullable": true,
            "example": 10000
          },
          "SalaryFrequency": {
            "type": "string",
            "description": "Salary Frequency of new hire employee",
            "nullable": true,
            "example": "Bi-Weekly"
          },
          "WorkLocationId": {
            "type": "string",
            "description": "Worklocation Id of new hire employee",
            "format": "guid",
            "nullable": true,
            "example": "dc069074-24b2-0000-0000-000014e00100"
          }
        }
      },
      "PagedResultOfOnboardingEmployee": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "OnboardingEmployee"
              },
              "$ref": "#/components/schemas/OnboardingEmployee"
            }
          }
        }
      },
      "OnboardingEmployee": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "OnboardingEmployeeId": {
            "type": "string",
            "description": "Id of the employee in the onboarding state.",
            "format": "guid",
            "example": "a332bab4-9b53-ed11-913a-0050569fc0c9"
          },
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee.\n            ",
            "format": "int32",
            "nullable": true,
            "example": 12345
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Id of the legal entity.",
            "format": "int32",
            "example": 133900
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the employee in the onboarding state.",
            "nullable": true,
            "example": "John"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the employee in the onboarding state.",
            "nullable": true,
            "example": "Smith"
          },
          "FullName": {
            "type": "string",
            "description": "First and last name of the employee in the onboarding state combined.",
            "nullable": true,
            "example": "Smith, John"
          },
          "EmailAddress": {
            "type": "string",
            "description": "Email address of the employee in the onboarding state.",
            "nullable": true,
            "example": "johnsmith@gmail.com"
          },
          "InvitedDate": {
            "type": "string",
            "description": "Date when employee was invited.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-10-24T09:02:33.173"
          },
          "HasOnboardingAccess": {
            "type": "boolean",
            "description": "Indicates if this is invited or manual hiring.",
            "example": true
          },
          "HireDate": {
            "type": "string",
            "description": "Date when the employee was hired.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-10-24T09:02:33.173"
          },
          "StepsTotal": {
            "type": "integer",
            "description": "Number of the total steps in the onboarding.",
            "format": "int32",
            "nullable": true,
            "example": 12
          },
          "StepsCompleted": {
            "type": "integer",
            "description": "Number of the completed steps in the onboarding.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "LastEmployeeStepCompleted": {
            "type": "integer",
            "description": "Last step that was completed by the employee.",
            "format": "int32",
            "example": 1
          },
          "LastEmployeeStepCompletedDate": {
            "type": "string",
            "description": "Date when the last step was completed by employee.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-10-24T09:02:33.173"
          },
          "LastAdminStepCompleted": {
            "type": "integer",
            "description": "Last step that was completed by the admin.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "LastAdminStepCompletedDate": {
            "type": "string",
            "description": "Date when the last step was completed by admin. ",
            "format": "date-time",
            "nullable": true,
            "example": "2022-10-24T09:02:33.173"
          },
          "WorkLocation": {
            "type": "string",
            "description": "Name of the work location.",
            "nullable": true,
            "example": "Office"
          },
          "WorkLocationId": {
            "type": "string",
            "description": "Id of the work location.",
            "format": "guid",
            "nullable": true,
            "example": "a332bab4-9b53-ed11-913a-0050569fc0c9"
          },
          "Manager": {
            "type": "string",
            "description": "Full name of the employees manager.",
            "nullable": true,
            "example": "Erricson, Allen"
          },
          "ManagerId": {
            "type": "string",
            "description": "Id of the employees manager.",
            "format": "guid",
            "nullable": true,
            "example": "a332bab4-9b53-ed11-913a-0050569fc0c9"
          }
        }
      },
      "PagedResultOfEmployeeTax": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeTax"
              },
              "$ref": "#/components/schemas/EmployeeTax"
            }
          }
        }
      },
      "EmployeeTax": {
        "type": "object",
        "description": "The Employee Tax model represents Employee level Tax information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee tax in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "a5713n92-196c-0000-0000-0007d5268Sa2"
          },
          "LegalEntityTaxId": {
            "type": "string",
            "description": "Unique identifier of the legal entity tax in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "b55a9eba-1007-0000-0000-000040e20100"
          },
          "TaxCode": {
            "type": "string",
            "description": "Tax code values set at the global level.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "Description": {
            "type": "string",
            "description": "Description of tax code.",
            "nullable": true,
            "example": "OHIO"
          },
          "TaxType": {
            "description": "Enumeration of valid types of tax values.",
            "example": "FMISC",
            "$ref": "#/components/schemas/TaxType"
          },
          "ReciprocityType": {
            "description": "Enumeration of valid multi-state tax reciprocity values. \n            ",
            "nullable": true,
            "example": "LivesIn",
            "$ref": "#/components/schemas/ReciprocityType"
          },
          "FilingStatus": {
            "description": "Information about Filing status including code and description.",
            "nullable": true,
            "example": "S",
            "$ref": "#/components/schemas/FilingStatus"
          },
          "WithholdingEffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of withholding",
            "format": "date-time",
            "nullable": true,
            "example": "2020-01-13T00:00:00"
          },
          "BlockDate": {
            "type": "string",
            "description": "Withholding block date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "NonResidentAlien": {
            "type": "string",
            "description": "Specifies whether an employee is NonResidentAlien",
            "nullable": true,
            "example": true
          },
          "IsProbationaryEmployee": {
            "type": "boolean",
            "description": "Specifies whether an employee is a probationary employee",
            "nullable": true,
            "example": true
          },
          "OccupationalCode": {
            "type": "string",
            "description": "Occupational code",
            "nullable": true,
            "example": "1234"
          },
          "GeographicCode": {
            "type": "string",
            "description": "Geographic code",
            "nullable": true,
            "example": "1234"
          },
          "SOCCode": {
            "type": "string",
            "description": "Standard occupational classification Code",
            "nullable": true,
            "example": "1234"
          },
          "SeasonalCode": {
            "type": "string",
            "description": "Seasonal Code",
            "nullable": true,
            "example": "14"
          },
          "CountyCode": {
            "type": "string",
            "description": "County Code",
            "nullable": true,
            "example": "124"
          },
          "SpouseWork": {
            "type": "string",
            "description": "Specifies  whether an employee's spouse is employed",
            "nullable": true,
            "example": "Yes/True"
          },
          "DependentInsuranceEligible": {
            "type": "string",
            "description": "Dependent insurance eligibility status",
            "nullable": true,
            "example": "Yes/True"
          },
          "DependentInsuranceEligibleDate": {
            "type": "string",
            "description": "Dependent insurance eligibility date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-13T00:00:00"
          },
          "ApplicableBirthyear": {
            "type": "integer",
            "description": "Birth year",
            "format": "int32",
            "nullable": true,
            "example": 1980
          },
          "AdjustWithholding": {
            "description": "How to adjust the employee tax withholding.",
            "nullable": true,
            "example": "O",
            "$ref": "#/components/schemas/AdjustWithholdingType"
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 3141.59
          },
          "Percentage": {
            "type": "number",
            "description": "Percentage value used in tax calculation. ",
            "format": "decimal",
            "nullable": true,
            "example": 0.2
          },
          "NCCICode": {
            "type": "string",
            "description": "National Council on Compensation Insurance (NCCI) Code ",
            "nullable": true,
            "example": "2004"
          },
          "PsdCode": {
            "type": "string",
            "description": "PA Residence PSD code- political subdivision code\nRequired only for PA taxes",
            "nullable": true,
            "example": 101001
          },
          "PsdRate": {
            "type": "number",
            "description": "PA Residence PSD rate\nRequired only for PA taxes",
            "format": "decimal",
            "nullable": true,
            "example": 0.123
          },
          "OnHold": {
            "type": "boolean",
            "description": "Specifies whether employee tax should appear on paychecks.\n            ",
            "nullable": true,
            "example": true
          },
          "Exemptions": {
            "description": "Information related to Employee exemptions.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeExemptions"
          },
          "TaxCredit": {
            "description": "Information related to Employee Tax Credit including Depedent and other Tax Credits.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeTaxCredit"
          },
          "Employee": {
            "description": "URL to access the Employee resource for information about the person's employment.\n            ",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "TaxType": {
        "type": "string",
        "description": "Enumeration of valid Types of Tax values.",
        "x-enumNames": [
          "F3MEDA",
          "F3SS",
          "FCAP",
          "FEIC",
          "FESL",
          "FMEDA",
          "FMISC",
          "FSOCER",
          "FSS",
          "FSSERC",
          "FUTA",
          "FWH",
          "FWH945",
          "LCITY",
          "LCITYN",
          "LCITYR",
          "LCITYS",
          "LCNTY",
          "LCNTYN",
          "LCNTYR",
          "LMISC",
          "LSDIT",
          "OLDCODE",
          "SDI",
          "SMISC",
          "SUI",
          "SUR",
          "SWC",
          "SWH"
        ],
        "enum": [
          "F3MEDA",
          "F3SS",
          "FCAP",
          "FEIC",
          "FESL",
          "FMEDA",
          "FMISC",
          "FSOCER",
          "FSS",
          "FSSERC",
          "FUTA",
          "FWH",
          "FWH945",
          "LCITY",
          "LCITYN",
          "LCITYR",
          "LCITYS",
          "LCNTY",
          "LCNTYN",
          "LCNTYR",
          "LMISC",
          "LSDIT",
          "OLDCODE",
          "SDI",
          "SMISC",
          "SUI",
          "SUR",
          "SWC",
          "SWH"
        ]
      },
      "ReciprocityType": {
        "type": "string",
        "description": "Enumeration of valid Types of multi-state Reciprocity values.\n            ",
        "x-enumNames": [
          "LiveIn",
          "FWIT",
          "WorkIn"
        ],
        "enum": [
          "LiveIn",
          "FWIT",
          "WorkIn"
        ]
      },
      "FilingStatus": {
        "type": "object",
        "description": "The Filing Status Model represents the filing status information.",
        "additionalProperties": false,
        "properties": {
          "Code": {
            "type": "string",
            "description": "Filing Status code values set at the global level.\n            ",
            "nullable": true,
            "example": "M"
          },
          "Description": {
            "type": "string",
            "description": "Description of filing status code.",
            "nullable": true,
            "example": "Married or Joint-KS"
          }
        }
      },
      "AdjustWithholdingType": {
        "type": "string",
        "description": "Enumeration of valid Types of AdjustWithholdingType.\n            ",
        "x-enumNames": [
          "N",
          "A",
          "O"
        ],
        "enum": [
          "N",
          "A",
          "O"
        ]
      },
      "EmployeeExemptions": {
        "type": "object",
        "description": "The Employee Exemptions Model represents the Employee's exemptions information.",
        "additionalProperties": false,
        "properties": {
          "Exemptions": {
            "type": "integer",
            "description": "Number of tax exemptions claimed by employee. ",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "ExemptionAmount": {
            "type": "number",
            "description": "Exemption amount\nFor CO and MS tax codes",
            "format": "decimal",
            "nullable": true,
            "example": 3
          },
          "EmployeeLowIncomeExemption": {
            "type": "boolean",
            "description": "Specifies whether an employee has low income exemption\n            ",
            "nullable": true,
            "example": true
          },
          "CurrentYearExempt": {
            "type": "boolean",
            "description": "Specifies whether an employee has current year exemption\n            ",
            "nullable": true,
            "example": true
          },
          "NextYearExempt": {
            "type": "boolean",
            "description": "Specifies whether an employee has next year exemption \n            ",
            "nullable": true,
            "example": true
          }
        }
      },
      "EmployeeTaxCredit": {
        "type": "object",
        "description": "The Employee Tax Credit Model represents the Employee's Tax Credit information.",
        "additionalProperties": false,
        "properties": {
          "NumberOfDependents": {
            "type": "integer",
            "description": "Number of employee's dependents as specified on employee IRS' Form W-4. ",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "NumberOfOtherDependents": {
            "type": "integer",
            "description": "Number of employee's other dependents as specified on employee's IRS' Form W-4.",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "HasTwoIncomes": {
            "type": "boolean",
            "description": "Whether or not employee's household has two incomes.",
            "nullable": true,
            "example": false
          },
          "AdditionalIncome": {
            "type": "number",
            "description": "Amount of employee's additional income as specified on employee's IRS Form W-4.",
            "format": "decimal",
            "nullable": true,
            "example": 123.45
          },
          "AdditionalDeduction": {
            "type": "number",
            "description": "Amount of employee's additional deductions as specified on employee's IRS Form W-4.           ",
            "format": "decimal",
            "nullable": true,
            "example": 987.65
          },
          "QualifiedDependentCredit": {
            "type": "number",
            "description": "Amount of employee's qualified dependent credit as specified on employee's IRS Form W-4. ",
            "format": "decimal",
            "nullable": true,
            "example": 20.2
          },
          "OtherDependentCredit": {
            "type": "number",
            "description": "Amount of employee's other dependent tax credit as specified on employee's IRS Form W-4. ",
            "format": "decimal",
            "nullable": true,
            "example": 111.22
          },
          "TotalCredits": {
            "type": "number",
            "description": "Total amount of employee's tax credit as specifies on employee's IRS Form W-4.",
            "format": "decimal",
            "nullable": true,
            "example": 123.58
          }
        }
      },
      "Includes16": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "All",
          "TaxCredits"
        ],
        "enum": [
          "All",
          "TaxCredits"
        ]
      },
      "EmployeeTax2": {
        "type": "object",
        "description": "The Employee Tax model represents Employee level Tax information.",
        "additionalProperties": false,
        "required": [
          "LegalEntityTaxId",
          "ReciprocityType",
          "WithholdingEffectiveStartDate"
        ],
        "properties": {
          "LegalEntityTaxId": {
            "type": "string",
            "description": "Unique identifier of the legal entity tax in Paycor's system. Generated by Paycor.\nRetrieve a value by calling \"Get Legal Entity Taxes by Legal Entity ID\".",
            "format": "guid",
            "minLength": 1,
            "example": "b55a9eba-1007-0000-0000-000040e20100"
          },
          "ReciprocityType": {
            "description": "Enumeration of valid multi-state tax reciprocity values. \n            ",
            "example": "LivesIn",
            "$ref": "#/components/schemas/ReciprocityType"
          },
          "FilingStatus": {
            "type": "string",
            "description": "Filing status code.\nRetrieve a value by calling \"Get Filing Status by Tax Code",
            "nullable": true,
            "example": "S"
          },
          "WithholdingEffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of withholding\nRetrieve a value by calling \"Get Filing Status by Tax Code\".",
            "format": "date-time",
            "minLength": 1,
            "example": "2020-11-13T00:00:00"
          },
          "BlockDate": {
            "type": "string",
            "description": "Withholding block date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "NonResidentAlien": {
            "type": "string",
            "description": "Specifies whether an employee is NonResidentAlien",
            "nullable": true,
            "example": true
          },
          "IsProbationaryEmployee": {
            "type": "boolean",
            "description": "Specifies whether an employee is a probationary employee",
            "nullable": true,
            "example": true
          },
          "OccupationalCode": {
            "type": "string",
            "description": "Occupational code",
            "nullable": true,
            "example": "12"
          },
          "GeographicCode": {
            "type": "string",
            "description": "Geographic code\nRequired only for UNEAK tax",
            "nullable": true,
            "example": "11-1011"
          },
          "SOCCode": {
            "type": "string",
            "description": "Standard occupational classification Code",
            "nullable": true,
            "example": "11-1012"
          },
          "SeasonalCode": {
            "type": "string",
            "description": "Seasonal Code",
            "nullable": true,
            "example": "14"
          },
          "CountyCode": {
            "type": "string",
            "description": "County Code",
            "nullable": true,
            "example": "124"
          },
          "SpouseWork": {
            "type": "string",
            "description": "Specifies  whether an employee's spouse is employed",
            "nullable": true,
            "example": "Yes/True"
          },
          "DependentInsuranceEligible": {
            "type": "string",
            "description": "Dependent insurance eligibility status",
            "nullable": true,
            "example": "Yes/True"
          },
          "DependentInsuranceEligibleDate": {
            "type": "string",
            "description": "Dependent insurance eligibility date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-13T00:00:00"
          },
          "ApplicableBirthyear": {
            "type": "integer",
            "description": "Birth year",
            "format": "int32",
            "nullable": true,
            "example": 1980
          },
          "AdjustWithholding": {
            "description": "How to adjust the employee tax withholding.",
            "nullable": true,
            "example": "O",
            "$ref": "#/components/schemas/AdjustWithholdingType"
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 3141.59
          },
          "Percentage": {
            "type": "number",
            "description": "Percentage value used in tax calculation. ",
            "format": "decimal",
            "nullable": true,
            "example": 0.2
          },
          "NCCICode": {
            "type": "string",
            "description": "National Council on Compensation Insurance (NCCI) Code ",
            "nullable": true,
            "example": "2004"
          },
          "PsdCode": {
            "type": "string",
            "description": "PA Residence PSD code- political subdivision code",
            "nullable": true,
            "example": 101001
          },
          "PsdRate": {
            "type": "number",
            "description": "PA Residence PSD rate",
            "format": "decimal",
            "nullable": true,
            "example": 0.123
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether employee tax should appear on paychecks.\n            ",
            "nullable": true,
            "example": true
          },
          "Exemptions": {
            "description": "Information related to Employee exemptions.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeExemptions"
          },
          "TaxCredit": {
            "description": "Information related to Employee Tax Credit including Depedent and other Tax Credits.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeTaxCredit"
          }
        }
      },
      "EmployeeTax3": {
        "type": "object",
        "description": "The Employee Tax model represents Employee level Tax information.",
        "additionalProperties": false,
        "required": [
          "Id",
          "LegalEntityTaxId"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the employee tax in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "a5713n92-196c-0000-0000-0007d5268Sa2"
          },
          "LegalEntityTaxId": {
            "type": "string",
            "description": "Unique identifier of the legal entity tax in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "b55a9eba-1007-0000-0000-000040e20100"
          },
          "ReciprocityType": {
            "description": "Enumeration of valid multi-state tax reciprocity values. \n            ",
            "nullable": true,
            "example": "LivesIn",
            "$ref": "#/components/schemas/ReciprocityType"
          },
          "FilingStatus": {
            "type": "string",
            "description": "Filing status code.\nRetrieve a value by calling \"Get Filing Status by Tax Code",
            "nullable": true,
            "example": "S"
          },
          "WithholdingEffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of withholding",
            "format": "date-time",
            "nullable": true,
            "example": "2020-01-13T00:00:00"
          },
          "BlockDate": {
            "type": "string",
            "description": "Withholding block date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "NonResidentAlien": {
            "type": "string",
            "description": "Specifies whether an employee is NonResidentAlien",
            "nullable": true,
            "example": true
          },
          "IsProbationaryEmployee": {
            "type": "boolean",
            "description": "Specifies whether an employee is a probationary employee",
            "nullable": true,
            "example": true
          },
          "OccupationalCode": {
            "type": "string",
            "description": "Occupational code",
            "nullable": true,
            "example": "12"
          },
          "GeographicCode": {
            "type": "string",
            "description": "Geographic code\nRequired only for UNEAK tax",
            "nullable": true,
            "example": "11-1011"
          },
          "SOCCode": {
            "type": "string",
            "description": "Standard occupational classification Code",
            "nullable": true,
            "example": "11-1012"
          },
          "SeasonalCode": {
            "type": "string",
            "description": "Seasonal Code ",
            "nullable": true,
            "example": "14"
          },
          "CountyCode": {
            "type": "string",
            "description": "County Code",
            "nullable": true,
            "example": "124"
          },
          "SpouseWork": {
            "type": "string",
            "description": "Specifies  whether an employee's spouse is employed",
            "nullable": true,
            "example": "Yes/True"
          },
          "DependentInsuranceEligible": {
            "type": "string",
            "description": "Dependent insurance eligibility status",
            "nullable": true,
            "example": "Yes/True"
          },
          "DependentInsuranceEligibleDate": {
            "type": "string",
            "description": "Dependent insurance eligibility date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-13T00:00:00"
          },
          "ApplicableBirthyear": {
            "type": "integer",
            "description": "Birth year",
            "format": "int32",
            "nullable": true,
            "example": 1980
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 3141.59
          },
          "Percentage": {
            "type": "number",
            "description": "Percentage value used in tax calculation. ",
            "format": "decimal",
            "nullable": true,
            "example": 0.2
          },
          "NCCICode": {
            "type": "string",
            "description": "National Council on Compensation Insurance (NCCI) Code ",
            "nullable": true,
            "example": "2004"
          },
          "PsdCode": {
            "type": "string",
            "description": "PA Residence PSD code- political subdivision code",
            "nullable": true,
            "example": 101001
          },
          "PsdRate": {
            "type": "number",
            "description": "PA Residence PSD rate",
            "format": "decimal",
            "nullable": true,
            "example": 0.123
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether employee tax should appear on paychecks.\n            ",
            "nullable": true,
            "example": true
          },
          "Exemptions": {
            "description": "Information related to Employee exemptions.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeExemptions"
          },
          "TaxCredit": {
            "description": "Information related to Employee Tax Credit including Depedent and other Tax Credits.",
            "nullable": true,
            "$ref": "#/components/schemas/EmployeeTaxCredit"
          }
        }
      },
      "GlobalTaxForm": {
        "type": "object",
        "description": "The Global Tax Form model represents required fields when creating/updating Employee tax.\nSo that user can easily determine what data needs to be passed for each specific Tax Code.",
        "additionalProperties": false,
        "properties": {
          "EffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of withholding.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-01-13T00:00:00"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Effective end date of withholding.",
            "format": "date-time",
            "nullable": true,
            "example": "2030-01-13T00:00:00"
          },
          "HasFilingStatus": {
            "type": "boolean",
            "description": "Information whether global tax requires the Filing status.",
            "example": true
          },
          "HasAdjustWithholding": {
            "type": "boolean",
            "description": "Information whether global tax requires the adjust witholding field.",
            "example": true
          },
          "HasOverrideWithholdingDate": {
            "type": "boolean",
            "description": "Information whether global tax requires the override witholding date field.",
            "example": true
          },
          "HasApplicableBirthYear": {
            "type": "boolean",
            "description": "Information whether global tax requires the applicable birth year field.",
            "example": true
          },
          "HasAmount": {
            "type": "boolean",
            "description": "Information whether global tax requires the amount field.",
            "example": true
          },
          "HasRate": {
            "type": "boolean",
            "description": "Information whether global tax requires the rate field.",
            "example": true
          },
          "HasExemptionAmount": {
            "type": "boolean",
            "description": "Information whether global tax requires exemption amount field.",
            "example": true
          },
          "HasNonResidentAlien": {
            "type": "boolean",
            "description": "Information whether global tax requires non resident alien field.",
            "example": true
          },
          "HasNumberOfQualifiedDependents": {
            "type": "boolean",
            "description": "Information whether global tax requires the number of qualified dependents field.",
            "example": true
          },
          "HasNumberOfOtherDependents": {
            "type": "boolean",
            "description": "Information whether global tax requires the Number Of Other Dependents field.",
            "example": true
          },
          "HasNumberOfExemptions": {
            "type": "boolean",
            "description": "Information whether global tax requires the Number Of Exemptions field.",
            "example": true
          },
          "HasSpouseWorking": {
            "type": "boolean",
            "description": "Information whether global tax requires the Spouse Working field.",
            "example": true
          },
          "HasTwoIncomes": {
            "type": "boolean",
            "description": "Information whether global tax requires the HasTwoIncomes field.",
            "example": true
          },
          "HasAdditionalIncome": {
            "type": "boolean",
            "description": "Information whether global tax requires the AdditionalIncome field.\nAmount of employee's additional income as specified on employee's IRS Form W-4.",
            "example": true
          },
          "HasAdditionalDeduction": {
            "type": "boolean",
            "description": "Information whether global tax requires the Additional Deduction field.",
            "example": true
          },
          "HasAccuracyConfirmation": {
            "type": "boolean",
            "description": "Information whether global tax requires the Accuracy Confirmation field.",
            "example": true
          },
          "HasQualifiedDependentCredit": {
            "type": "boolean",
            "description": "Information whether global tax requires the Qualified Dependent Credit field.",
            "example": true
          },
          "HasOtherDependentCredit": {
            "type": "boolean",
            "description": "Information whether global tax requires the Other Dependent Credit field.",
            "example": true
          },
          "HasTotalCredits": {
            "type": "boolean",
            "description": "Information whether global tax requires Total Credits field.",
            "example": true
          },
          "QualifiedDependentCredit": {
            "type": "number",
            "description": "Information whether global tax requires Qualified Dependent Credit field.",
            "format": "decimal",
            "nullable": true,
            "example": null
          },
          "OtherDependentCredit": {
            "type": "number",
            "description": "Information whether global tax requires Other Dependent Credit field.",
            "format": "decimal",
            "nullable": true,
            "example": null
          },
          "FilingStatuses": {
            "type": "array",
            "description": "Enumeration of valid filing status values for this tax code.",
            "nullable": true,
            "example": "S",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "FilingStatus"
              },
              "$ref": "#/components/schemas/FilingStatus"
            }
          },
          "HasIncomeTax": {
            "type": "string",
            "description": "Information whether global tax requires the Income Tax field.",
            "nullable": true,
            "example": "Y"
          }
        }
      },
      "PagedResultOfTimeCardv2": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeCardv2"
              },
              "$ref": "#/components/schemas/TimeCardv2"
            }
          }
        }
      },
      "TimeCardv2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeCard"
          },
          {
            "type": "object",
            "description": "The Timecard model represents Employee level time, punch details and associated labor code information. ",
            "additionalProperties": false,
            "properties": {
              "EmployeeId": {
                "type": "string",
                "description": "Unique identifier of this employee.",
                "format": "guid",
                "example": "36f45f30-9a35-0000-0000-000001000000"
              },
              "EmployeeNumber": {
                "type": "integer",
                "description": "Unique number of the employee in a partner's tenant.",
                "format": "int32",
                "nullable": true,
                "example": 123666
              },
              "BadgeNumber": {
                "type": "integer",
                "description": "Employee's assigned badge number.\n            ",
                "format": "int32",
                "nullable": true,
                "example": 778665
              }
            }
          }
        ]
      },
      "PagedResultOfTimeCardV3": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeCardV3"
              },
              "$ref": "#/components/schemas/TimeCardV3"
            }
          }
        }
      },
      "TimeCardV3": {
        "type": "object",
        "description": "The Timecard model represents Employee level time, punch details,pay rate (GROSSPAY) and associated labor code information. ",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the Employee in the Legal Entity.",
            "format": "int32",
            "nullable": true,
            "example": 123666
          },
          "BadgeNumber": {
            "type": "integer",
            "description": "Employee's assigned badge number.\n            ",
            "format": "int32",
            "nullable": true,
            "example": 778665
          },
          "DisplayDate": {
            "type": "string",
            "description": "The date when the timecard was created.\nFormat: YYYY-MM-DDTHH:MM:SS ",
            "format": "date-time",
            "example": "2020-11-17T00:00:00"
          },
          "PunchIn": {
            "type": "string",
            "description": "Date and time when the employee punched in.\nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T13:03:03.943"
          },
          "PunchOut": {
            "type": "string",
            "description": "Date and time when the employee punched out.\nFormat: YYYY-MM-DDTHH:MM:SS",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T18:03:03.000"
          },
          "HourAmount": {
            "type": "number",
            "description": "Amount of hours entered for employee's timecard.",
            "format": "decimal",
            "example": 4.5
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "Department Code where the Employee worked.",
            "format": "int64",
            "example": 3027442356
          },
          "DepartmentName": {
            "type": "string",
            "description": "Department name where the Employee worked.",
            "nullable": true,
            "example": "Accounting"
          },
          "EarningCode": {
            "type": "string",
            "description": "Identifies the type of earning for this timecard.",
            "nullable": true,
            "example": "ERC300"
          },
          "EstimatedGrossPay": {
            "type": "number",
            "description": "Employee's estimated pay for the entire Punch pair.. \n            ",
            "format": "decimal",
            "nullable": true,
            "example": 25.52
          },
          "LaborCodes": {
            "type": "array",
            "description": "List of type LaborCode containing the employee's labor code information.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCodeV2"
              },
              "$ref": "#/components/schemas/LaborCodeV2"
            }
          }
        }
      },
      "LaborCodeV2": {
        "type": "object",
        "description": "The LaborCode model is used to define rules for Employees including minimum and maximum hours, overtime and benefits.",
        "additionalProperties": false,
        "properties": {
          "LaborCategoryLevel": {
            "type": "integer",
            "description": "This represents the Labor Category level the Labor Code is associated with.  \nYou can find the correlating Labor Category Level by calling GET Labor Categories \nby Legal Entity ID and matching on the \"CategoryLevel\" field (available values = 1-6).",
            "format": "int32",
            "example": 2
          },
          "LaborCode": {
            "type": "string",
            "description": "The labor code associated with the punch pair.",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCodeName": {
            "type": "string",
            "description": "The labor code name associated with the punch pair.",
            "nullable": true,
            "example": "CIN Location"
          }
        }
      },
      "PagedResultOfEmployeeBalance": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeBalance"
              },
              "$ref": "#/components/schemas/EmployeeBalance"
            }
          }
        }
      },
      "EmployeeBalance": {
        "type": "object",
        "description": "The Employee Balance model represents Employee level Balance information for accrual balances.",
        "additionalProperties": false,
        "properties": {
          "EmployeeName": {
            "type": "string",
            "description": "Full name of the employee.",
            "nullable": true,
            "example": "Lutwidge Roberts"
          },
          "EmployeeNumber": {
            "type": "string",
            "description": "Customer-assigned friendly unique number of the employee within the Tenant.",
            "nullable": true,
            "example": 123666
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the Employee in Paycor's system. Generated by Paycor. Used for other GET endpoints. ",
            "format": "guid",
            "example": "52b68a4a-196c-0000-0000-0007d5268Sa2"
          },
          "TypeBalances": {
            "type": "array",
            "description": "Employee accrual balances information, for each plan the Employee participates in.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TypeBalance"
              },
              "$ref": "#/components/schemas/TypeBalance"
            }
          }
        }
      },
      "TypeBalance": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TimeOffPlanName": {
            "type": "string",
            "description": "Name of the time off plan related to this balance.",
            "nullable": true,
            "example": "2018 Start Date Plan"
          },
          "TimeOffTypeId": {
            "type": "string",
            "description": "Unique identifier of the time off plan record in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52b68a4a-196c-0000-0000-0007d5268Sa2"
          },
          "TimeOffTypeCode": {
            "type": "string",
            "description": "Abbreviated code of the time off type linked to this plan (admin-configured)",
            "nullable": true,
            "example": "Sal"
          },
          "TimeOffTypeName": {
            "type": "string",
            "description": "Name of the time off type linked to this plan (admin-configured)",
            "nullable": true,
            "example": "Salary PTO"
          },
          "ActivityStartDate": {
            "type": "string",
            "description": "Date range this time off balance record covers. ",
            "format": "date-time"
          },
          "ActivityEndDate": {
            "type": "string",
            "description": "Date range this time off balance record covers. ",
            "format": "date-time"
          },
          "CurrentBalance": {
            "type": "number",
            "description": "Current balance (in hours) within this plan and date range, including upcoming approved requests. ",
            "format": "double",
            "nullable": true
          },
          "AccruedBalance": {
            "type": "number",
            "description": "Total number of hours accrued (earned) within this plan and date range. ",
            "format": "double"
          },
          "UsedBalance": {
            "type": "number",
            "description": "Number of hours used (spent) so far within this plan and date range. ",
            "format": "double"
          },
          "ScheduledBalance": {
            "type": "number",
            "description": "Scheduled upcoming time off within this plan and date range, in hours.",
            "format": "double"
          },
          "DefaultEarning": {
            "description": "Earning information related to this time off plan.",
            "nullable": true,
            "$ref": "#/components/schemas/EarningCodeLight"
          }
        }
      },
      "EarningCodeLight": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the earning record in Paycor's system. Generated by Paycor.",
            "nullable": true,
            "example": "52b68a4a-196c-0000-0000-0007d5268Sa2"
          },
          "LegalEntityId": {
            "type": "string",
            "description": "Id of the Legal Entity.",
            "nullable": true,
            "example": 678556
          },
          "TenantId": {
            "type": "integer",
            "description": "Id of the Tenant.",
            "format": "int32",
            "example": 678556
          },
          "Code": {
            "type": "string",
            "description": "Descriptive earning identifier which appears on paychecks. Only set at the legal entity or tenant level.",
            "nullable": true,
            "example": "PTO"
          },
          "Description": {
            "type": "string",
            "description": "Description of the employee earning code.",
            "nullable": true,
            "example": "Vacation"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the employee earning take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Date the employee earning is no longer in effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-01T00:00Z"
          }
        }
      },
      "PagedResultOfEmployeeTimeOffRequest": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeTimeOffRequest"
              },
              "$ref": "#/components/schemas/EmployeeTimeOffRequest"
            }
          }
        }
      },
      "EmployeeTimeOffRequest": {
        "type": "object",
        "description": "Employee Time Off Request model represents information about time off requests for specific employee.",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "TimeOffRequestId": {
            "type": "string",
            "description": "Unique identifier of this time off request.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "BenefitCode": {
            "type": "string",
            "nullable": true
          },
          "TotalHours": {
            "type": "number",
            "description": "Total amount of hours inside this time off request.",
            "format": "decimal",
            "example": 14.5
          },
          "Days": {
            "type": "array",
            "description": "Collection of days for this time off request.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeOffRequestDay"
              },
              "$ref": "#/components/schemas/TimeOffRequestDay"
            }
          },
          "Comment": {
            "type": "string",
            "description": "Additional comment for this time off request. Optional. Currently not available in Get Employee Time Off Requests by EmployeeId.",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "description": "Status of this time off request.\nStatus could be Pending, Approved, Denied, Removed, Canceled or empty",
            "nullable": true,
            "example": "Approved"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date and time when this time off request is created.",
            "format": "date-time",
            "example": "2020-11-17T13:00:00.000Z"
          },
          "StatusUpdateTime": {
            "type": "string",
            "description": "Date and time when is the status of this time off request updated.",
            "format": "date-time",
            "example": "2020-11-17T13:00:00.000Z"
          },
          "StatusUpdateByEmployeeId": {
            "type": "string",
            "description": "Unique identifier of employee who is updated status.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "CreatedByEmployeeId": {
            "type": "string",
            "description": "Unique identifier of employee who is created this time off request.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          }
        }
      },
      "TimeOffRequestDay": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TimeOffRequestDayId": {
            "type": "string",
            "description": "Unique identifier of specific day inside time off request model.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "Date": {
            "type": "string",
            "description": "Date for Time off request day",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17"
          },
          "Hours": {
            "type": "number",
            "description": "Total amount of hours for this day.",
            "format": "decimal",
            "example": 6
          },
          "StartTime": {
            "type": "string",
            "description": "Exact start date and time for this day",
            "format": "date-time",
            "example": "2020-11-17"
          },
          "EndTime": {
            "type": "string",
            "description": "Exact end date and time for this day",
            "format": "date-time",
            "example": "2020-11-17"
          },
          "IsPartial": {
            "type": "boolean"
          }
        }
      },
      "Event": {
        "type": "object",
        "description": "Event Model Emitted By Paycor.",
        "additionalProperties": false,
        "properties": {
          "EventType": {
            "type": "string",
            "description": "Type of Event triggered by Paycor.",
            "nullable": true,
            "example": "Employee.Modified"
          },
          "EventId": {
            "type": "string",
            "description": "Unique Identifier of the Event Generated by Paycor.",
            "format": "guid",
            "example": "75571ee9-d359-0000-0000-000066000000"
          },
          "TenantId": {
            "type": "integer",
            "description": "Unique Identifier of the Tenant in Paycor's system.",
            "format": "int32",
            "nullable": true,
            "example": 2080
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique Identifier of the Legal Entity in Paycor's system.\n            ",
            "format": "int32",
            "nullable": true,
            "example": 501123
          },
          "ItemId": {
            "type": "string",
            "description": "Unique Identifier of the Resource change for the Event that is triggered by Paycor.\n            ",
            "format": "guid",
            "nullable": true,
            "example": "89610735-e570-0000-0000-000066000000"
          },
          "ExtendedProperties": {
            "type": "object",
            "description": "Additional Information about the Modified Resource or Event.\n            ",
            "nullable": true,
            "example": "{\"name\", \"xyz\"}",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ChangedFields": {
            "type": "array",
            "description": "This is a placeholder field that will always return null.\n            ",
            "nullable": true,
            "example": null,
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            }
          },
          "Resource": {
            "description": "URL to access the modified Resource to retrieve more information.\n            ",
            "nullable": true,
            "example": "v1/employees/89610735-e570-0000-0000-000066000000",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "Command": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApplicationId",
          "NotificationURL",
          "NotificationSecret",
          "EventType",
          "TenantId"
        ],
        "properties": {
          "ApplicationId": {
            "type": "string",
            "description": "Unique Identifier of the Application that needs mock events.\n            ",
            "format": "guid",
            "minLength": 1,
            "example": "0f8fad5b-d9cb-469f-a165-70867728950e"
          },
          "NotificationURL": {
            "type": "string",
            "description": "URL where the Event Notification has to be sent.\n            ",
            "minLength": 1,
            "example": "https://partner/v1/eventNotificationReceiver"
          },
          "NotificationSecret": {
            "type": "string",
            "description": "Secret or Security Token required to authenticate above server.\n            ",
            "minLength": 1,
            "example": "Bearer WREXIDWmfhlc19eLE1vXQ5KDnGEk22AeEvGcON2L2As8I1GwDUGstl-SUfyV6V3e23v3_EVABGx"
          },
          "EventType": {
            "type": "string",
            "description": "Type of Event that needs to be triggered by Paycor's System.",
            "minLength": 1,
            "example": "Employee.Modified"
          },
          "ItemId": {
            "type": "string",
            "description": "Unique Identifier of the Resource change for the Event that is triggered by Paycor.\n            ",
            "format": "guid",
            "nullable": true,
            "example": "89610735-e570-0000-0000-000066000000"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique Identifier of the Legal Entity in Paycor's system.\n            ",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "example": 501123
          },
          "TenantId": {
            "type": "integer",
            "description": "Unique Identifier of the Tenant in Paycor's system.",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "example": 2080
          }
        }
      },
      "PagedResultOfGeneralLedger": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "GeneralLedger"
              },
              "$ref": "#/components/schemas/GeneralLedger"
            }
          }
        }
      },
      "GeneralLedger": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of employee\nOnly set for employee level general ledger data",
            "format": "guid",
            "nullable": true,
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "DepartmentId": {
            "type": "string",
            "description": "Unique identifier of department\nSynonymous with OrganizationId",
            "format": "guid",
            "nullable": true,
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "DepartmentDescription": {
            "type": "string",
            "description": "Description of department\nSynonymous with OrganizationDescription",
            "nullable": true,
            "example": "IT"
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "Numeric code of department \nSynonymous with OrganizationCode",
            "format": "int64",
            "nullable": true,
            "example": 213
          },
          "Amount": {
            "type": "number",
            "description": "Dollar amount on general ledger",
            "format": "double",
            "nullable": true,
            "example": -16880
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number ",
            "nullable": true,
            "example": 64
          },
          "MasterAccount": {
            "type": "string",
            "description": "Master Account ",
            "nullable": true,
            "example": "XE "
          },
          "AccountName": {
            "type": "string",
            "description": "Account Name",
            "nullable": true,
            "example": "Ohio State Treasurer"
          },
          "Itemize": {
            "type": "boolean",
            "description": "Identifier that shows whether that particular record can be separated\ninto additional records",
            "nullable": true,
            "example": "Y"
          },
          "SortSequence": {
            "type": "integer",
            "description": "Sort sequence number",
            "format": "int32",
            "nullable": true,
            "example": 40
          },
          "Credit": {
            "type": "boolean",
            "description": "Field that shows whether record is a credit (true) or debit (false)",
            "nullable": true,
            "example": true
          },
          "CompanyDepartmentNumber": {
            "type": "string",
            "description": "String of 20 characters that represent company department number \nSynonymous with CompanyOrganizationNumber",
            "nullable": true,
            "example": 139
          },
          "FirstName": {
            "type": "string",
            "description": "First name of an employee\nOnly set for employee level general ledger data",
            "nullable": true,
            "example": "Emily"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of an employee\nOnly set for employee level general ledger data",
            "nullable": true,
            "example": "Anna"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of an employee\nOnly set for employee level general ledger data",
            "nullable": true,
            "example": "Smith"
          }
        }
      },
      "GeneralLedgerReportType": {
        "type": "string",
        "description": "Enumeration of valid report type values of General Ledger.",
        "x-enumNames": [
          "Unknown",
          "Setup",
          "Regular"
        ],
        "enum": [
          "Unknown",
          "Setup",
          "Regular"
        ]
      },
      "Includes17": {
        "type": "string",
        "description": "    EmployeeData - Include employee data in record",
        "x-enumNames": [
          "EmployeeData"
        ],
        "enum": [
          "EmployeeData"
        ]
      },
      "PagedResultOfJobCosting": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "JobCosting"
              },
              "$ref": "#/components/schemas/JobCosting"
            }
          }
        }
      },
      "JobCosting": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "string",
            "description": "Id of the Legal Entity.",
            "nullable": true,
            "example": 678556
          },
          "CheckDate": {
            "type": "string",
            "description": "The paycheck date. Also referred to as Pay Date.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "DepartmentDescription": {
            "type": "string",
            "description": "Description of department\nSynonymous with OrganizationDescription",
            "nullable": true,
            "example": "IT"
          },
          "DepartmentCode": {
            "type": "integer",
            "description": "Numeric code of department \nSynonymous with OrganizationCode",
            "format": "int64",
            "nullable": true,
            "example": 213
          },
          "LaborCategory1Code": {
            "type": "integer",
            "description": "Labor category code 1",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "LaborCode1": {
            "type": "string",
            "description": "Labor code 1",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCode1Id": {
            "type": "string",
            "description": "Labor Code 1 ID",
            "nullable": true,
            "example": "Job"
          },
          "LaborCode1Description": {
            "type": "string",
            "description": "Description of labor category 1",
            "nullable": true,
            "example": "CIN Location"
          },
          "LaborCategory2Code": {
            "type": "integer",
            "description": "Labor category code 1",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "LaborCode2": {
            "type": "string",
            "description": "Labor code 2",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCode2Id": {
            "type": "string",
            "description": "Labor Code 2 ID",
            "nullable": true,
            "example": "Job"
          },
          "LaborCode2Description": {
            "type": "string",
            "description": "Description of labor category 1",
            "nullable": true,
            "example": "CIN Location"
          },
          "LaborCategory3Code": {
            "type": "integer",
            "description": "Labor category code 3",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "LaborCode3": {
            "type": "string",
            "description": "Labor code 3",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCode3Id": {
            "type": "string",
            "description": "Labor Code 3 ID",
            "nullable": true,
            "example": "Job"
          },
          "LaborCode3Description": {
            "type": "string",
            "description": "Description of labor category 3",
            "nullable": true,
            "example": "CIN Location"
          },
          "LaborCategory4Code": {
            "type": "integer",
            "description": "Labor category code 4",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "LaborCode4": {
            "type": "string",
            "description": "Labor code 4",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCode4Id": {
            "type": "string",
            "description": "Labor Code 4 ID",
            "nullable": true,
            "example": "Job"
          },
          "LaborCode4Description": {
            "type": "string",
            "description": "Description of labor category 4",
            "nullable": true,
            "example": "CIN Location"
          },
          "LaborCategory5Code": {
            "type": "integer",
            "description": "Labor category code 5",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "LaborCode5": {
            "type": "string",
            "description": "Labor code 5",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCode5Id": {
            "type": "string",
            "description": "Labor Code 5 ID",
            "nullable": true,
            "example": "Job"
          },
          "LaborCode5Description": {
            "type": "string",
            "description": "Description of labor category 5",
            "nullable": true,
            "example": "CIN Location"
          },
          "LaborCategory6Code": {
            "type": "integer",
            "description": "Labor category code 6",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "LaborCode6": {
            "type": "string",
            "description": "Labor code 6",
            "nullable": true,
            "example": "LCI"
          },
          "LaborCode6Id": {
            "type": "string",
            "description": "Labor Code 6 ID",
            "nullable": true,
            "example": "Job"
          },
          "LaborCode6Description": {
            "type": "string",
            "description": "Description of labor category 6",
            "nullable": true,
            "example": "CIN Location"
          },
          "GLAccountNumber": {
            "type": "string",
            "description": "Account number ",
            "nullable": true,
            "example": 64
          },
          "GLAccountDescription": {
            "type": "string",
            "description": "Account description ",
            "nullable": true,
            "example": "Account One"
          },
          "CreditAmount": {
            "type": "number",
            "description": "Credited amount",
            "format": "decimal",
            "nullable": true,
            "example": 10.56
          },
          "DebitAmount": {
            "type": "number",
            "description": "Credited amount",
            "format": "decimal",
            "nullable": true,
            "example": 1.33
          },
          "WeekNumber": {
            "type": "integer",
            "description": "Week number",
            "format": "int32",
            "example": 2
          },
          "PayNumber": {
            "type": "integer",
            "description": "Pay number",
            "format": "int32",
            "example": 2
          },
          "FileDateMonth": {
            "type": "integer",
            "description": "File Date Month",
            "format": "int32",
            "example": 5
          },
          "FileDateDay": {
            "type": "integer",
            "description": "File date day",
            "format": "int32",
            "example": 11
          },
          "FileDateYear": {
            "type": "integer",
            "description": "File date year",
            "format": "int32",
            "example": 2010
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee record in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "nullable": true,
            "example": "52b68a4a-196c-0000-0000-0007d5268Sa2"
          },
          "EmployeeDepartmentDescription": {
            "type": "string",
            "description": "Employee's organization description",
            "nullable": true,
            "example": "Cin Store 105"
          },
          "EmployeeDepartmentCode": {
            "type": "integer",
            "description": "Employee's organization code",
            "format": "int64",
            "nullable": true,
            "example": 105
          },
          "EmployeeLastName": {
            "type": "string",
            "description": "Employee's last name",
            "nullable": true,
            "example": "Jones"
          },
          "EmployeeFirstName": {
            "type": "string",
            "description": "Employee's first name",
            "nullable": true,
            "example": "Mary"
          },
          "EmployeeMiddleName": {
            "type": "string",
            "description": "Employee's middle name",
            "nullable": true,
            "example": "Esther"
          },
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee in the tenant. Generated by Paycor.",
            "format": "int32",
            "nullable": true,
            "example": 33420
          },
          "EmployeeStatus": {
            "description": "Enumeration of valid employment status values.\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus"
          },
          "CheckNumber": {
            "type": "integer",
            "description": "Check number.",
            "format": "int64",
            "nullable": true,
            "example": 27463631
          },
          "PeriodStartDate": {
            "type": "string",
            "description": "Period start date.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "Period end date.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "example": "2020-10-01T00:00:00Z"
          }
        }
      },
      "Includes18": {
        "type": "string",
        "description": "    EmployeeData - Include employee data in record",
        "x-enumNames": [
          "EmployeeData"
        ],
        "enum": [
          "EmployeeData"
        ]
      },
      "PagedResultOfReportBuilder": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ReportBuilder"
              },
              "$ref": "#/components/schemas/ReportBuilder"
            }
          }
        }
      },
      "ReportBuilder": {
        "type": "object",
        "description": "The ReportBuilder model represents information about user reports.",
        "additionalProperties": false,
        "properties": {
          "Headers": {
            "type": "array",
            "description": "Allows reading basic information of a Fields.\n            ",
            "nullable": true,
            "example": "\"fieldId\": \"0d5257e6-6619-4773-a3a2-93f28ce1814b\",\n\"displayName\": \"PayrollId\",\n\"clientDataType\": 3,\n\"relatedFieldId\": null,\n\"groupLevel\": null,\n\"aggregationType\": null,\n\"fieldType\": 1\n            ",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SimplifiedClientField"
              },
              "$ref": "#/components/schemas/SimplifiedClientField"
            }
          },
          "Data": {
            "type": "array",
            "description": "Values of the Fields set on a particular user.\n            ",
            "nullable": true,
            "example": "\"0d5257e6-6619-4773-a3a2-93f28ce1814b\": \"c73416ce-fe49-0000-0000-0000fb0d0301\",\n    \"34e24335-145e-4443-b597-a5056a417613\": \"555669329\",\n    \"9f05187d-aa65-4b61-b98c-5ad9f36213e7\": \"John\",\n    \"a61cab9d-f4b4-462b-8b87-61117602b77b\": \"Smith\",\n    \"c1d45c25-c0c7-4f2a-b778-679b33bbf40c\": \"HSAPlan HG\",\n    \"241af216-8d0a-4aae-9187-fcbd888182ad\": 123.0000",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Object"
              }
            }
          },
          "Footers": {
            "description": "Flag that shows information of footers.",
            "nullable": true,
            "example": null
          },
          "TotalRows": {
            "type": "integer",
            "description": "Flag that shows information of total rows.",
            "format": "int64",
            "example": 37740
          }
        }
      },
      "SimplifiedClientField": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "format": "guid"
          },
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "ClientDataType": {
            "$ref": "#/components/schemas/ClientDataType"
          },
          "RelatedFieldId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "GroupLevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AggregationType": {
            "type": "string",
            "nullable": true
          },
          "FieldType": {
            "nullable": true,
            "$ref": "#/components/schemas/ReportFieldType"
          }
        }
      },
      "ClientDataType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Number",
          "DateTime",
          "String",
          "Guid",
          "Date",
          "EmployeeStatus",
          "EmployeeType",
          "Boolean"
        ],
        "enum": [
          "Unknown",
          "Number",
          "DateTime",
          "String",
          "Guid",
          "Date",
          "EmployeeStatus",
          "EmployeeType",
          "Boolean"
        ]
      },
      "ReportFieldType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "TemplateField",
          "NonTemplateField",
          "SnowflakeNonTemplateField"
        ],
        "enum": [
          "Unknown",
          "TemplateField",
          "NonTemplateField",
          "SnowflakeNonTemplateField"
        ]
      },
      "ReportCustomParameter": {
        "type": "object",
        "description": "Update model for Custom Parameters in Reports.",
        "additionalProperties": false,
        "required": [
          "CustomParameterId",
          "Values"
        ],
        "properties": {
          "CustomParameterId": {
            "type": "string",
            "description": "Unique identifier of Custom Parameter.",
            "format": "guid",
            "minLength": 1,
            "example": "3bb813a8-0000-0000-0000-000066000000"
          },
          "Values": {
            "type": "array",
            "description": "Collection of values for that Custom Parameter.",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Object"
              }
            }
          }
        }
      },
      "ExportFileType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Csv",
          "Pdf",
          "Excel",
          "Html",
          "Dfix"
        ],
        "enum": [
          "Csv",
          "Pdf",
          "Excel",
          "Html",
          "Dfix"
        ]
      },
      "PagedResultOfImpersonatedUser": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ImpersonatedUser"
              },
              "$ref": "#/components/schemas/ImpersonatedUser"
            }
          }
        }
      },
      "ImpersonatedUser": {
        "type": "object",
        "description": "Basic user details",
        "additionalProperties": false,
        "properties": {
          "UserId": {
            "type": "string",
            "description": "User Id",
            "format": "guid",
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "FirstName": {
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "John"
          },
          "LastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "Doe"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Legal entity where user belongs",
            "format": "int32",
            "example": 200187
          }
        }
      },
      "PagedResultOfTemplateCustomParameter": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TemplateCustomParameter"
              },
              "$ref": "#/components/schemas/TemplateCustomParameter"
            }
          }
        }
      },
      "TemplateCustomParameter": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "CustomParameterId",
          "Values"
        ],
        "properties": {
          "CustomParameterId": {
            "type": "string",
            "description": "Unique identifier of Custom Parameter.",
            "format": "guid",
            "minLength": 1,
            "example": "3bb813a8-0000-0000-0000-000066000000"
          },
          "Type": {
            "type": "string",
            "description": "Parameter type.",
            "nullable": true,
            "example": "Int"
          },
          "Name": {
            "type": "string",
            "description": "Parameter name.",
            "nullable": true,
            "example": "Param1"
          },
          "Values": {
            "type": "array",
            "description": "Collection of values for that Custom Parameter.",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Object"
              }
            }
          }
        }
      },
      "PagedResultOfLaborCategories": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCategories"
              },
              "$ref": "#/components/schemas/LaborCategories"
            }
          }
        }
      },
      "LaborCategories": {
        "type": "object",
        "description": "Labor Category (also called Job Category) ",
        "additionalProperties": false,
        "properties": {
          "LaborCategoryId": {
            "type": "string",
            "description": "Id of the Labor Category ",
            "format": "guid",
            "example": "12e0e1c9-e8dc-ec11-912c-0050569f27b8"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifyer of legal entity",
            "format": "int32",
            "example": 122900
          },
          "LaborCategoryName": {
            "type": "string",
            "description": "Name of labor category",
            "nullable": true,
            "example": "Cat 1"
          },
          "CategoryLevel": {
            "type": "integer",
            "description": "Order of categories",
            "format": "int32",
            "example": 1
          },
          "CategoryItemCount": {
            "type": "integer",
            "description": "Nummber of labor code items linked to labor category",
            "format": "int32",
            "example": "CIN Location"
          }
        }
      },
      "LaborCode4": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "LaborCategoryId",
          "LaborCodeName",
          "Code"
        ],
        "properties": {
          "LaborCategoryId": {
            "type": "string",
            "description": "Id of the Labor Category ",
            "format": "guid",
            "minLength": 1,
            "example": "12e0e1c9-e8dc-ec11-912c-0050569f27b8"
          },
          "LaborCodeName": {
            "type": "string",
            "description": "Unique name of labor code in the labor category",
            "minLength": 1,
            "example": "IT"
          },
          "Description": {
            "type": "string",
            "description": "Description of labor code",
            "nullable": true,
            "example": "labor code effective until New year"
          },
          "Code": {
            "type": "string",
            "description": "textual code of labor code",
            "minLength": 1,
            "example": "code 1"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of labor code",
            "format": "date-time",
            "nullable": true,
            "example": "2020-05-26"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Effective end date of labor code",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-25"
          }
        }
      },
      "PagedResultOfLaborCode": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode5"
            }
          }
        }
      },
      "LaborCode5": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LaborCodeId": {
            "type": "string",
            "description": "Id of the Labor Code ",
            "format": "guid",
            "example": "12e0e1c9-e8dc-ec11-912c-0050569f27b8"
          },
          "LaborCategoryId": {
            "type": "string",
            "description": "Id of the Labor Category ",
            "format": "guid",
            "example": "12e0e1c9-e8dc-ec11-912c-0050569f27b8"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifyer of legal entity",
            "format": "int32",
            "example": 122900
          },
          "LaborCodeName": {
            "type": "string",
            "description": "Unique name of labor code in the labor category",
            "nullable": true,
            "example": "IT"
          },
          "Description": {
            "type": "string",
            "description": "Description of labor code",
            "nullable": true,
            "example": "labor code effective until New year"
          },
          "Code": {
            "type": "string",
            "description": "textual code of labor code",
            "nullable": true,
            "example": "code 1"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of labor code",
            "format": "date-time",
            "nullable": true,
            "example": "2020-05-26"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Effective end date of labor code",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-25"
          }
        }
      },
      "LaborCode6": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "LaborCodeId"
        ],
        "properties": {
          "LaborCodeId": {
            "type": "string",
            "description": "Id of the Labor Code ",
            "format": "guid",
            "minLength": 1,
            "example": "12e0e1c9-e8dc-ec11-912c-0050569f27b8"
          },
          "LaborCodeName": {
            "type": "string",
            "description": "Unique name of labor code in the labor category",
            "nullable": true,
            "example": "IT"
          },
          "Description": {
            "type": "string",
            "description": "Description of labor code",
            "nullable": true,
            "example": "labor code effective until New year"
          },
          "Code": {
            "type": "string",
            "description": "textual code of labor code",
            "nullable": true,
            "example": "code 1"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Effective start date of labor code",
            "format": "date-time",
            "nullable": true,
            "example": "2020-05-26"
          },
          "EffectiveEndDate": {
            "type": "string",
            "description": "Effective end date of labor code",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-25"
          }
        }
      },
      "LegalEntity": {
        "type": "object",
        "description": "The Legal Entity (Client) model represents organization Legal Entity information.\nProvides links to the Legal Entity's associated Tenant, Employee, Person, Earning, Deduction, Taxes and Custom Field information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system. This is also known as the Client Id.\n            ",
            "format": "int32",
            "example": 501123
          },
          "Name": {
            "type": "string",
            "description": "Name of the legal entity. \n            ",
            "nullable": true,
            "example": "ACME Inc."
          },
          "FederalId": {
            "type": "string",
            "description": "US Federal tax Identification Number/Employer Identification Number. \n            ",
            "nullable": true,
            "example": 555555555
          },
          "Type": {
            "description": "Enumeration of valid types of corporation values specifying how the legal entity is registered with the US government. ",
            "example": "Corporation",
            "$ref": "#/components/schemas/CorporationType"
          },
          "IsLost": {
            "type": "boolean",
            "description": "Flag that shows is the client active in Paycor system.\nOnce a client is marked Lost, it will never reset to IsLost=false. A new LegalEntityId would be created instead",
            "example": false
          },
          "BusinessNames": {
            "type": "array",
            "description": "List of type BusinessName containing the legal entity's name, addresses and types. \n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "BusinessName"
              },
              "$ref": "#/components/schemas/BusinessName"
            }
          },
          "Tenant": {
            "description": "URL to access the Tenant resource for information about the legal entity's tenant.\n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/tenants",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Employees": {
            "description": "URL to access the Employee resource for information about the legal entity's employees. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/employees",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Persons": {
            "description": "URL to access the Person resource for person information for the employee.\n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/persons",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Earnings": {
            "description": "URL to access the Earning resource for information about the legal entity's earnings. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/earnings",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Deductions": {
            "description": "URL to access the Deduction resource for information about the legal entity's deductions. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/deductions",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "Taxes": {
            "description": "URL to access the Taxes resource for information about the legal entity's taxes. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123/taxes",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "CorporationType": {
        "type": "string",
        "description": "Enumeration of valid Types of Corporation values.\n            ",
        "x-enumNames": [
          "Corporation",
          "SolePropLLC",
          "LLC",
          "PartnershipLLC",
          "EstateTrust",
          "Unincorporated",
          "Railroad",
          "CommonPaymaster",
          "Seasonal",
          "Successorship",
          "Government",
          "CERS",
          "PERS",
          "MQGE",
          "FICATaxable",
          "FICAExempt",
          "NonProfit",
          "Reimbursing",
          "Clergy",
          "Agricultural",
          "Household",
          "IndContractor",
          "TenNinetyNineR",
          "TenNinetyNineIGDB",
          "SCorp",
          "CCorp",
          "ThirdPartyPayer"
        ],
        "enum": [
          "Corporation",
          "SolePropLLC",
          "LLC",
          "PartnershipLLC",
          "EstateTrust",
          "Unincorporated",
          "Railroad",
          "CommonPaymaster",
          "Seasonal",
          "Successorship",
          "Government",
          "CERS",
          "PERS",
          "MQGE",
          "FICATaxable",
          "FICAExempt",
          "NonProfit",
          "Reimbursing",
          "Clergy",
          "Agricultural",
          "Household",
          "IndContractor",
          "TenNinetyNineR",
          "TenNinetyNineIGDB",
          "SCorp",
          "CCorp",
          "ThirdPartyPayer"
        ]
      },
      "BusinessName": {
        "type": "object",
        "description": "The Business Name model represents Legal Entity Business Name information. \n            ",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "description": "Type of the legal entity's business name.\n            ",
            "example": "DBA",
            "$ref": "#/components/schemas/BusinessNameType"
          },
          "Name": {
            "type": "string",
            "description": "Name of legal entity.\n            ",
            "nullable": true,
            "example": "The Integration T-Shirt Company"
          },
          "Addresses": {
            "type": "array",
            "description": "List of data of type Address containing all of the legal entity's business addresses.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityAddress"
              },
              "$ref": "#/components/schemas/LegalEntityAddress"
            }
          }
        }
      },
      "BusinessNameType": {
        "type": "string",
        "description": "Enumeration of valid Types of Business Name values.\n            ",
        "x-enumNames": [
          "DBA",
          "Legal",
          "Secondary"
        ],
        "enum": [
          "DBA",
          "Legal",
          "Secondary"
        ]
      },
      "LegalEntityAddress": {
        "type": "object",
        "description": "The Legal Entity Address model represents Legal Entity Address information.",
        "additionalProperties": false,
        "properties": {
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "nullable": true,
            "example": "4811 Montgomery Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building 6"
          },
          "Suite": {
            "type": "string",
            "description": "Suite information in the address.\n            ",
            "nullable": true,
            "example": "Suite 1000"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "County": {
            "type": "string",
            "description": "County in the address.\n            ",
            "nullable": true,
            "example": "Hamilton"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "nullable": true,
            "example": "45212-0341"
          },
          "Type": {
            "description": "Enumeration of valid legal entity address type values.\n            ",
            "example": "Unknown",
            "$ref": "#/components/schemas/LegalEntityAddressType"
          }
        }
      },
      "LegalEntityAddressType": {
        "type": "string",
        "description": "Enumeration of valid Legal Entity Address Type values.\n            ",
        "x-enumNames": [
          "Unknown",
          "Primary",
          "Secondary"
        ],
        "enum": [
          "Unknown",
          "Primary",
          "Secondary"
        ]
      },
      "Includes19": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    BusinessNames - Include business names (e.g. type, name)",
        "x-enumNames": [
          "All",
          "BusinessNames"
        ],
        "enum": [
          "All",
          "BusinessNames"
        ]
      },
      "UserInfo": {
        "type": "object",
        "description": "The User Info provides a List of the Legal Entities and Tenants User has access to.",
        "additionalProperties": false,
        "properties": {
          "UserLegalEntities": {
            "type": "array",
            "description": "Provides a List of the Legal Entities and Tenants User has access to.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityTenant"
              },
              "$ref": "#/components/schemas/LegalEntityTenant"
            }
          }
        }
      },
      "LegalEntityTenant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system. This is also known as the Client Id.\n            ",
            "format": "int32",
            "example": 501123
          },
          "TenantId": {
            "type": "integer",
            "description": "Id of the Tenant.",
            "format": "int32",
            "example": 678556
          }
        }
      },
      "PagedResultOfTenantCertificationOrganization": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TenantCertificationOrganization"
              },
              "$ref": "#/components/schemas/TenantCertificationOrganization"
            }
          }
        }
      },
      "TenantCertificationOrganization": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CertificationOrganizationId": {
            "type": "string",
            "description": "Identifier of certification organization.\n            ",
            "format": "guid",
            "example": "dd71aee2-22c8-4937-a3d7-28a4ad3f1df7"
          },
          "CertificationOrganizationName": {
            "type": "string",
            "description": "Name of the organization that is issuing the certification.\n            ",
            "nullable": true,
            "example": "CPR Class"
          }
        }
      },
      "PagedResultOfTenantCertification": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TenantCertification"
              },
              "$ref": "#/components/schemas/TenantCertification"
            }
          }
        }
      },
      "TenantCertification": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CertificationId": {
            "type": "string",
            "description": "Identifier of certification.\n            ",
            "format": "guid",
            "example": "dd71aee2-22c8-4937-a3d7-28a4ad3f1df7"
          },
          "CertificationName": {
            "type": "string",
            "description": "Name of certification\n            ",
            "nullable": true,
            "example": "First Aid certificate"
          }
        }
      },
      "PagedResultOfLegalEntityDeduction": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityDeduction"
              },
              "$ref": "#/components/schemas/LegalEntityDeduction"
            }
          }
        }
      },
      "LegalEntityDeduction": {
        "type": "object",
        "description": "The Legal Entity Deduction model represents Legal Entity level Deduction information.\n Provides link to the associated Legal Entity information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the legal entity deduction in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "3bb813a8-0000-0000-0000-000066000000"
          },
          "Code": {
            "type": "string",
            "description": "Unique deduction code set at legal entity or tenant level.  ",
            "nullable": true,
            "example": "401K"
          },
          "GlobalDeductionCode": {
            "type": "string",
            "description": "Global deduction code.",
            "nullable": true,
            "example": "401K"
          },
          "Description": {
            "type": "string",
            "description": "Description of the deduction code.",
            "nullable": true,
            "example": "NEED-401k Deduction"
          },
          "Type": {
            "description": "Enumeration of valid types of legal entity deduction values.",
            "example": "PPD",
            "$ref": "#/components/schemas/DeductionType"
          },
          "LinkedDeductionCodes": {
            "type": "array",
            "description": "List of linked deduction codes.\n            ",
            "nullable": true,
            "example": "401K, Loan",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            }
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring deduction dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 45202.99
          },
          "Rate": {
            "type": "number",
            "description": "Percentage-based amount that may vary by deduction type.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 1
          },
          "Frequency": {
            "description": "Enumeration of valid legal entity deduction frequency values.\n            ",
            "example": "Daily",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "IsOnW2": {
            "type": "boolean",
            "description": "Whether legal entity deduction shows up on a W-2 tax form.\n            ",
            "example": true
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether legal entity deduction should appear on paychecks.\n            ",
            "example": true
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the legal entity deduction take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource for information about the legal entity. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfDepartment": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Department"
              },
              "$ref": "#/components/schemas/Department"
            }
          }
        }
      },
      "Department": {
        "type": "object",
        "description": "The Client Department model represents client department information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the department in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "cb4a1b67-000c-0000-0000-000066000000"
          },
          "Code": {
            "type": "string",
            "description": "User defined department code.  ",
            "nullable": true,
            "example": 123
          },
          "Description": {
            "type": "string",
            "description": "User defined description of the department.",
            "nullable": true,
            "example": "Department 123"
          },
          "ParentId": {
            "type": "string",
            "description": "Unique identifier of the department's parent department in Paycor's system.\nValue will be NULL for top level departments.\nLevel 2 Departments do not have ParentID's.",
            "format": "guid",
            "nullable": true,
            "example": "cb4a1b67-000c-0000-0000-000066000077"
          },
          "Level": {
            "type": "integer",
            "description": "The level of the department in the department structure.\nLevel 1 Department is the parent payroll for the pay group. Hence, Level will always be >= 2 for bulk/list api.",
            "format": "int32",
            "example": 2
          },
          "PayrollId": {
            "type": "string",
            "description": "Id of the parent payroll for the pay group.",
            "format": "guid",
            "nullable": true,
            "example": "cb4a1b67-000c-0000-0000-000066000077"
          },
          "PayrollDescription": {
            "type": "string",
            "description": "Description of the parent payroll for the pay group.",
            "nullable": true
          },
          "WorkLocationId": {
            "type": "string",
            "description": "Unique identifier of the legal entity's work location in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "nullable": true,
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "WorkLocationName": {
            "type": "string",
            "description": "Name of the legal entity's work location.",
            "nullable": true,
            "example": "ACME East is an open concept office."
          }
        }
      },
      "Department2": {
        "type": "object",
        "description": "The Department model represents legal entity department information.",
        "additionalProperties": false,
        "required": [
          "Code",
          "ParentId",
          "Description",
          "WorkLocationId"
        ],
        "properties": {
          "Code": {
            "type": "string",
            "description": "User defined department code. Only numeric characters are allowed and the limit is 14 characters.",
            "minLength": 1,
            "example": 123
          },
          "ParentId": {
            "type": "string",
            "description": "Id of the parent department (or payroll) under which new department will be created.\nWhen creating top level departments, payroll id should be used as parent id",
            "format": "guid",
            "minLength": 1,
            "example": "cb4a1b67-000c-0000-0000-000066000456"
          },
          "Description": {
            "type": "string",
            "description": "User defined description of the department.",
            "minLength": 1,
            "example": "Department 123"
          },
          "WorkLocationId": {
            "type": "string",
            "description": "The ID of the Work Location to associate with new department.\n * Must be an existing Work Location on the Legal Entity. Use API 'Get a list of Work Locations for a Legal Entity' to retrieve a list of valid IDs.\n             ",
            "format": "guid",
            "minLength": 1,
            "example": "cb4a1b67-000c-0000-0000-000066000212"
          }
        }
      },
      "Department3": {
        "type": "object",
        "description": "The Department model represents legal entity department information.",
        "additionalProperties": false,
        "required": [
          "DepartmentId",
          "Code",
          "ParentId",
          "Description",
          "WorkLocationId"
        ],
        "properties": {
          "DepartmentId": {
            "type": "string",
            "description": "Unique Identifier of the Department in Paycor's system.\n            ",
            "format": "guid",
            "minLength": 1,
            "example": "89b88074-4b20-0000-0000-000014e00146"
          },
          "Code": {
            "type": "string",
            "description": "User defined department code. Only numeric characters are allowed and the limit is 14 characters.",
            "minLength": 1,
            "example": 123
          },
          "ParentId": {
            "type": "string",
            "description": "Id of the parent department (or payroll) under which new department will be created.\nWhen updating top level departments, payroll id should be used as parent id",
            "format": "guid",
            "minLength": 1,
            "example": "cb4a1b67-000c-0000-0000-000066000456"
          },
          "Description": {
            "type": "string",
            "description": "User defined description of the department.",
            "minLength": 1,
            "example": "Department 123"
          },
          "WorkLocationId": {
            "type": "string",
            "description": "The ID of the Work Location to associate with new department.\n * Must be an existing Work Location on the Legal Entity. Use API 'Get a list of Work Locations for a Legal Entity' to retrieve a list of valid IDs.\n             ",
            "format": "guid",
            "minLength": 1,
            "example": "cb4a1b67-000c-0000-0000-000066000212"
          }
        }
      },
      "PagedResultOfLegalEntityEarning": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityEarning"
              },
              "$ref": "#/components/schemas/LegalEntityEarning"
            }
          }
        }
      },
      "LegalEntityEarning": {
        "type": "object",
        "description": "The Legal Entity Earning model represents Legal Entity level Earning information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the legal entity's earning in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "d0f18d42-21cb-0000-0000-0000fb0d0300"
          },
          "Code": {
            "type": "string",
            "description": "Descriptive legal entity earning identifier set at the legal entity or tenant level.",
            "nullable": true,
            "example": "OT"
          },
          "GlobalEarningCode": {
            "type": "string",
            "description": "Global descriptive legal entity earning identifier.",
            "nullable": true,
            "example": "OT"
          },
          "Description": {
            "type": "string",
            "description": "Description of the legal entity's earning code.",
            "nullable": true,
            "example": "Overtime"
          },
          "Hours": {
            "type": "number",
            "description": "Total hours worked for legal entity's earning.",
            "format": "decimal",
            "nullable": true,
            "example": 40.4
          },
          "Amount": {
            "type": "number",
            "description": "Fixed, recurring dollar amount.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 123.45
          },
          "Rate": {
            "type": "number",
            "description": "Percentage value set by the user.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.25
          },
          "Frequency": {
            "description": "Enumeration of valid legal entity earning frequency values.\n            ",
            "example": "EveryPayPeriod",
            "$ref": "#/components/schemas/PayFrequency"
          },
          "IsOnW2": {
            "type": "boolean",
            "description": "Whether legal entity's earning shows up on a W-2 tax form.\n            ",
            "example": "True"
          },
          "OnHold": {
            "type": "boolean",
            "description": "Whether legal entity's earning should appear on paychecks.\n            ",
            "example": "False"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Date the legal entity earning take effect.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "Factor": {
            "type": "number",
            "description": "Value set by the user to multiply with the rate.\n            ",
            "format": "decimal",
            "nullable": true,
            "example": 1.5
          },
          "LegalEntity": {
            "description": "URL link to access the Legal Entity resource for additional information on the legal entity. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfScheduleForecasting": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ScheduleForecasting"
              },
              "$ref": "#/components/schemas/ScheduleForecasting"
            }
          }
        }
      },
      "ScheduleForecasting": {
        "type": "object",
        "description": "Schedule Forecasting Model to represents forecasting data based on the legalentityId",
        "additionalProperties": false,
        "properties": {
          "TransactionDate": {
            "type": "string",
            "description": "Transaction Date when the specific metric used for forecasting occurred.It uses UTC Time",
            "format": "date-time",
            "example": "2024-02-24T09:02:33.173"
          },
          "Value": {
            "type": "number",
            "description": "Represents number of key metric used to forecast labor demand.",
            "format": "decimal",
            "example": 10
          },
          "ScheduleGroupName": {
            "type": "string",
            "description": "Enumeration of valid legal entity schedulegroupName.\n            ",
            "nullable": true,
            "example": "Office"
          }
        }
      },
      "ScheduleForecasting2": {
        "type": "object",
        "description": "Schedule Forecasting Model to represent forecasting data based on the LegalEntityId.",
        "additionalProperties": false,
        "required": [
          "TransactionDate",
          "Value",
          "ScheduleGroupId"
        ],
        "properties": {
          "TransactionDate": {
            "type": "string",
            "description": "Transaction Date when the specific metric used for forecasting occurred. It should be in local Time.",
            "format": "date-time",
            "minLength": 1,
            "example": "2024-02-24T09:02:33.173"
          },
          "Value": {
            "type": "number",
            "description": "Represents number of key metric used to forecast labor demand.",
            "format": "decimal",
            "example": 10
          },
          "ScheduleGroupId": {
            "type": "string",
            "description": "ScheduleGroupId can be retrieved from calling https://developers.paycor.com/explore#tag/Legal-Entity-Schedule-Groups.",
            "format": "guid",
            "minLength": 1,
            "example": "b95b8067-09c9-46d2-52d8-08da7531eb4f"
          }
        }
      },
      "PagedResultOfTenantJobTitle": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TenantJobTitle"
              },
              "$ref": "#/components/schemas/TenantJobTitle"
            }
          }
        }
      },
      "TenantJobTitle": {
        "type": "object",
        "description": "The Tenant Jo Title model represents information about Job Titles assigned by the Tenant.\nProvides link to the associated Tenant's information.",
        "additionalProperties": false,
        "properties": {
          "JobTitleId": {
            "type": "string",
            "description": "Unique identifier of the tenant's job title in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "JobTitle": {
            "type": "string",
            "description": "Name of the tenant's job title.",
            "nullable": true,
            "example": "Software Engineer."
          },
          "JobCode": {
            "type": "string",
            "description": "Setup by HR Admin in Job Code field. ",
            "nullable": true,
            "example": 12345
          },
          "JobCategory": {
            "type": "integer",
            "description": "The Job's EEO category.",
            "format": "int32",
            "nullable": true,
            "example": 9
          },
          "IsArchived": {
            "type": "boolean",
            "description": "Whether the HR Admin has chosen to Archive the Job "
          },
          "Tenant": {
            "description": "URL to access the Tenant resource for information about the tenant.\n            ",
            "nullable": true,
            "example": "/v1/tenants/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfOnDemandPayDeductionInformation": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "OnDemandPayDeductionInformation"
              },
              "$ref": "#/components/schemas/OnDemandPayDeductionInformation"
            }
          }
        }
      },
      "OnDemandPayDeductionInformation": {
        "type": "object",
        "description": "The On Demand Pay Deduction represents Employee level Deduction Information.\nProvides link to the associated Employee information.\n            ",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the Legal Entity in Paycor's system.",
            "format": "int32",
            "example": 100289
          },
          "CheckDate": {
            "type": "string",
            "description": "Flag that shows information of date of paycheck.",
            "format": "date-time",
            "example": "2020-11-13T00:00:00"
          },
          "PayImportId": {
            "type": "integer",
            "description": "Unique identifier of import pay.\n            ",
            "format": "int32",
            "example": 123456
          },
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "EmployeeNumber": {
            "type": "integer",
            "description": "Unique number of the employee in the tenant. Generated by Paycor.\n            ",
            "format": "int32",
            "example": 12345
          },
          "EmployeeName": {
            "type": "string",
            "description": "First and last name of the employee.",
            "nullable": true,
            "example": "Charles Dodgson"
          },
          "EmployeeStatus": {
            "description": "Data including the employee's status of type EmployeeStatusData.\n            ",
            "nullable": true,
            "example": "Active",
            "$ref": "#/components/schemas/EmployeeStatusData2"
          },
          "WasEmployeePaid": {
            "type": "boolean",
            "description": "A flag that indicates that employee is paid.\n            ",
            "example": true
          },
          "ReceivedAmount": {
            "type": "number",
            "description": "Flag that shows information of Received amount.\n            ",
            "format": "decimal",
            "example": 2000.95
          },
          "PaidAmount": {
            "type": "number",
            "description": "Flag that shows information of paid amount.\n            ",
            "format": "decimal",
            "example": 2000.95
          },
          "ShortfallAmount": {
            "type": "number",
            "description": "Flag that shows information of shortfall amount.\n            ",
            "format": "decimal",
            "example": 2000.95
          },
          "PayrunStatus": {
            "type": "string",
            "description": "Flag that shows status information of payrun.",
            "nullable": true,
            "example": "Expected To Run"
          },
          "PayrunProcessDate": {
            "type": "string",
            "description": "Flag that shows information of date of payrun process.",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodStartDate": {
            "type": "string",
            "description": "Flag that shows start date period.",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "Flag that shows end date period.",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "ImpoundProcessDate": {
            "type": "string",
            "description": "Flag that shows information of date of Impound process.",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "ImpoundReferenceId": {
            "type": "string",
            "description": "Unique number of impound reference.\n            ",
            "nullable": true,
            "example": 123456
          },
          "ImpoundedAmount": {
            "type": "number",
            "description": "Flag that shows information of impounded amount.\n            ",
            "format": "decimal",
            "example": 123456
          },
          "IsClientActive": {
            "type": "boolean",
            "description": "Flag that shows is the client active or not in Paycor system.\n            ",
            "example": true
          }
        }
      },
      "EmployeeStatusData2": {
        "type": "object",
        "description": "The Employee Status Data model represents Employee Employment Status information.\n            ",
        "additionalProperties": false,
        "properties": {
          "IsFullTime": {
            "type": "boolean",
            "description": "Whether employee is full time. \n            ",
            "nullable": true,
            "example": true
          },
          "Status": {
            "description": "Enumeration of valid employment status values.\n            ",
            "example": "Active",
            "$ref": "#/components/schemas/EmploymentStatus3"
          },
          "Flsa": {
            "description": "Enumeration of valid Fair Labor Standards Act (FLSA) defined type values.\n            ",
            "example": "SalaryExempt",
            "$ref": "#/components/schemas/FlsaType"
          },
          "Type": {
            "description": "Enumeration of valid employment type values.\n            ",
            "example": "Temporary",
            "$ref": "#/components/schemas/EmploymentType"
          },
          "EligibleForRehire": {
            "type": "string",
            "description": "Determines is employee eligible for rehire.\n            ",
            "nullable": true,
            "example": "Yes"
          }
        }
      },
      "EmploymentStatus3": {
        "type": "string",
        "description": "Enumeration of valid Employment Status values.\n            ",
        "x-enumNames": [
          "Active",
          "Deceased",
          "LongTermDisability",
          "ShortTermDisability",
          "Fmla",
          "LaidOff",
          "LeaveWithPay",
          "LeaveWithoutPay",
          "ThirdPartyPayable",
          "Resigned",
          "Retired",
          "Terminated",
          "WorkersCompensation"
        ],
        "enum": [
          "Active",
          "Deceased",
          "LongTermDisability",
          "ShortTermDisability",
          "Fmla",
          "LaidOff",
          "LeaveWithPay",
          "LeaveWithoutPay",
          "ThirdPartyPayable",
          "Resigned",
          "Retired",
          "Terminated",
          "WorkersCompensation"
        ]
      },
      "PayrunAccrualData": {
        "type": "object",
        "description": "Payrun Accrual Data represents information about the Distributed Accrual Data of a Legal Entity.\n            ",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system.\n            ",
            "format": "int32",
            "example": 501123
          },
          "PeriodStartDate": {
            "type": "string",
            "description": "Start date of given Planner id\n            ",
            "format": "date-time",
            "example": "2019-11-22T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "End date of given Planner id\n            ",
            "format": "date-time",
            "example": "2019-11-22T00:00:00Z"
          },
          "EmployeePayrollHours": {
            "type": "array",
            "description": "List of Employee Payroll Hours. \n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeePayrollHours"
              },
              "$ref": "#/components/schemas/EmployeePayrollHours"
            }
          }
        }
      },
      "EmployeePayrollHours": {
        "type": "object",
        "description": "Employee Payroll Hours of Legal Entity Payrun Accrual Data.\n            ",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee.",
            "format": "guid",
            "example": "75571ee9-d359-0000-0000-000066000000"
          },
          "PayNumber": {
            "type": "integer",
            "description": "Number of checks that an employee will get for a particular payrun.",
            "format": "int32",
            "example": 2
          },
          "LegalEntityEarningID": {
            "type": "string",
            "description": "Identifier of the Legal Entity Earning",
            "format": "guid",
            "example": "4f1a9fa9-3037-0000-0000-0000ab360100"
          },
          "PaidHours": {
            "type": "number",
            "description": "The actual hours that the employee have paid for the given payrun",
            "format": "decimal",
            "example": 25
          },
          "ImportedHours": {
            "type": "number",
            "description": "The hours that were imported during key-in/reviewing the payrun before posting it",
            "format": "decimal",
            "example": 1
          },
          "AdjustedHours": {
            "type": "number",
            "description": "Self calculated value of PaidHours-ImportedHours",
            "format": "decimal",
            "example": 25
          },
          "DepartmentId": {
            "type": "string",
            "description": "Employee Department Id against which the items were posted for distribution",
            "format": "guid",
            "example": "0aea177a-26ef-0000-0000-0000ab360100"
          }
        }
      },
      "AccrualBalanceData": {
        "type": "object",
        "description": "Accrual Balance Data represents the employees summarized accrual balance information.\n            ",
        "additionalProperties": false,
        "required": [
          "EmployeeId",
          "PlannerId",
          "TimeOffTypeDescription",
          "HoursAddedYTD",
          "HoursUsedYTD",
          "AvailableBalance"
        ],
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the Employee in Paycor's system. Generated by Paycor. Used for other GET endpoints. ",
            "format": "guid",
            "minLength": 1,
            "example": "497b41d0-5646-0000-0000-00009add0300"
          },
          "PlannerId": {
            "type": "string",
            "description": "Id of the planner for this payment",
            "format": "guid",
            "minLength": 1,
            "example": "5f407b07-014a-0000-0000-00009add0300"
          },
          "PayNumber": {
            "type": "integer",
            "description": "Pay number",
            "format": "int32",
            "example": 0
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "Period end date.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "2023-05-09T13:44:57.669Z"
          },
          "TimeOffTypeCode": {
            "type": "string",
            "description": "Abbreviated code of the time off type linked to this plan (admin-configured)",
            "nullable": true,
            "example": "Sal"
          },
          "TimeOffTypeDescription": {
            "type": "string",
            "description": "Description of the time off type linked to this plan (admin-configured)",
            "minLength": 1,
            "example": "Sal"
          },
          "PrintOption": {
            "type": "string",
            "description": "Determines what information to print on the payroll paystub (1.AvailableBalanceAndYTD,2.AvailableBalance,3.NoPrint)",
            "nullable": true,
            "example": "NoPrint"
          },
          "PayrunTypesToInclude": {
            "type": "string",
            "description": "Determines which payroll paystubs should be printed(1.AllPayStubs,2.RegularOnly,3.AdditionalOnly)",
            "nullable": true,
            "example": "AllPayStubs"
          },
          "PrintDelayinDays": {
            "type": "integer",
            "description": "The number of days after an employee’s hire date before the balance is printed on the paystub",
            "format": "int32",
            "example": 2
          },
          "ShortfallOption": {
            "type": "string",
            "description": "If there is a balance shortfall at the time of payroll (1.Warning,2.None,3.DoNotPay)",
            "nullable": true,
            "example": "None"
          },
          "PrintBalancePaystubOption": {
            "type": "string",
            "description": "Whether to print the employee’s current balance (Current) or balance at the end of the pay period (Pay Period End Date) on the paystub",
            "nullable": true,
            "example": "Sal"
          },
          "StartingBalance": {
            "type": "number",
            "description": "The employee’s start of year balance",
            "format": "double",
            "example": 0
          },
          "HoursAddedYTD": {
            "type": "number",
            "description": "Total hours added from start year to date. This value is required and cannot be null.",
            "format": "double",
            "example": 56
          },
          "HoursUsedYTD": {
            "type": "number",
            "description": "Total hours deducted from start year to date. This value is required and cannot be null.",
            "format": "double",
            "example": 56
          },
          "AvailableBalance": {
            "type": "number",
            "description": "Employee’s current available balance. This value is required and cannot be null.",
            "format": "double",
            "example": 8
          },
          "MaxEntitledBalance": {
            "type": "number",
            "description": "Maximum hours that an employee is entitled to use in a year",
            "format": "double",
            "example": 160
          },
          "RemainingEntitledBalance": {
            "type": "number",
            "description": "Hours remaining until maxEntitledBalance limit is reached",
            "format": "double",
            "example": 80
          }
        }
      },
      "EmployeeShortfallConfiguration": {
        "type": "object",
        "description": "Employee's accrual short fall configuration model.",
        "additionalProperties": false,
        "required": [
          "EmployeeId",
          "StartDate",
          "EndDate"
        ],
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "StartDate": {
            "type": "string",
            "description": "Date range filter.",
            "format": "date-time",
            "minLength": 1
          },
          "EndDate": {
            "type": "string",
            "description": "Date range filter.",
            "format": "date-time",
            "minLength": 1
          },
          "TimeOffTypeCode": {
            "type": "string",
            "description": "Code for the time off plan (example PTO, Holiday, Personal etc.) Specific to Reseller’s plan.",
            "nullable": true,
            "example": "PTO"
          },
          "AvailableBalance": {
            "type": "number",
            "description": "Amount of hours available for an Employee for the particular TimeOffTypeCode.",
            "format": "double",
            "nullable": true,
            "example": 6
          },
          "ShortFallAlarmOption": {
            "type": "string",
            "description": "Payroll's Short fall alarm option configured for the specific Employee.",
            "nullable": true
          },
          "EarningCodes": {
            "type": "array",
            "description": "List of earnings codes.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            }
          },
          "TimeOffHours": {
            "type": "number",
            "description": "Amount of hours for which an Employee has time off hours per TimeOffTypeCode after the start date of the short fall alarm option.",
            "format": "double",
            "nullable": true,
            "example": 15
          }
        }
      },
      "PagedResultOfLegalEntityPayData": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityPayData"
              },
              "$ref": "#/components/schemas/LegalEntityPayData"
            }
          }
        }
      },
      "LegalEntityPayData": {
        "type": "object",
        "description": "Each instance of this object represents an Employee being paid on a specific date. \n Provides link to the associated Legal Entity information.",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee who was paid.",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "CheckDate": {
            "type": "string",
            "description": "The paycheck date for this employee. Also referred to as Pay Date.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-13T00:00:00"
          },
          "ProcessDate": {
            "type": "string",
            "description": "The internal pay processing date for this employee. ",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-11T00:00:00"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource for information about the legal entity. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          },
          "EmployeePaystub": {
            "description": "URL to access the Employee Paystub information for these paychecks. \n            ",
            "nullable": true,
            "example": "/v1/employees/{employeeId}/paystubs?checkDate=",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResultOfPayGroup": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayGroup"
              },
              "$ref": "#/components/schemas/PayGroup"
            }
          }
        }
      },
      "PayGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system. This is also known as the Client Id.\n            ",
            "format": "int32",
            "example": 501123
          },
          "PayrollId": {
            "type": "string",
            "description": "Unique identifier of the parent payroll in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52a2s23-0000-0000-0000-0007d0009840"
          },
          "PayrollDescription": {
            "type": "string",
            "description": "Description of the parent payroll for the pay group",
            "nullable": true
          },
          "PayrollCode": {
            "type": "string",
            "description": "Code of the parent payroll for the pay group",
            "nullable": true
          },
          "PayGroupId": {
            "type": "string",
            "description": "Unique identifier of the pay group in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "52a2s23-0000-0000-0000-0007d0009840"
          },
          "PayGroupName": {
            "type": "string",
            "description": "Name of the pay group",
            "nullable": true
          },
          "PayGroupFrequency": {
            "type": "string",
            "description": "Frequency that the pay group will run",
            "nullable": true
          }
        }
      },
      "PagedResultOfPayPeriod2": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayPeriod"
              },
              "$ref": "#/components/schemas/PayPeriod2"
            }
          }
        }
      },
      "PayPeriod2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "PlannerId": {
            "type": "string",
            "description": "Planner id",
            "format": "guid",
            "example": "dbec8470-e8b4-0000-0000-00009add0300"
          },
          "CheckDate": {
            "type": "string",
            "description": "The paycheck date.",
            "format": "date-time",
            "example": "2020-11-13T00:00:00"
          },
          "ProcessDate": {
            "type": "string",
            "description": "The pay process date.",
            "format": "date-time",
            "example": "2020-11-13T00:00:00"
          },
          "PeriodStartDate": {
            "type": "string",
            "description": "Start date of the pay period",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "PeriodEndDate": {
            "type": "string",
            "description": "End date of the pay period",
            "format": "date-time",
            "example": "2019-11-01T00:00:00Z"
          },
          "PayGroup": {
            "type": "string",
            "description": "id of the pay group",
            "format": "guid",
            "example": "bd2bf6d2-a1d7-0000-0000-00009add0300"
          }
        }
      },
      "PagedResultOfActivityType": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ActivityType"
              },
              "$ref": "#/components/schemas/ActivityType"
            }
          }
        }
      },
      "ActivityType": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique Identifier of Activity Type in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "nullable": true,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Name": {
            "type": "string",
            "description": "Name of the Activity Type.",
            "nullable": true,
            "example": "Work"
          },
          "Color": {
            "type": "string",
            "description": "The Color used for the Activity Type.\n            ",
            "nullable": true,
            "example": "Black"
          },
          "Type": {
            "description": "Enumeration of valid Type values.\nDescribes the Activity Type as Productive or NonProductive.",
            "example": "Productive",
            "$ref": "#/components/schemas/ProductivityType"
          },
          "IsCustom": {
            "type": "boolean",
            "description": "Whether the Activity Type is a Custom Value or Default Value provided by Paycor.\n            ",
            "example": false
          }
        }
      },
      "ProductivityType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Productive",
          "NonProductive"
        ],
        "enum": [
          "Productive",
          "NonProductive"
        ]
      },
      "PagedResultOfScheduleGroup": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ScheduleGroup"
              },
              "$ref": "#/components/schemas/ScheduleGroup"
            }
          }
        }
      },
      "ScheduleGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Schedule Group identifier",
            "format": "guid",
            "example": "b95b8067-09c9-46d2-52d8-08da7531eb4f"
          },
          "Name": {
            "type": "string",
            "description": "Schedule Group name",
            "nullable": true,
            "example": "Office schedule"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is Schedule Group active",
            "example": true
          }
        }
      },
      "Services": {
        "type": "object",
        "description": "The Services model represents service offerings available to a Legal Entity.",
        "additionalProperties": false,
        "properties": {
          "TimeService": {
            "type": "string",
            "description": "The name of the services that the Legal Entity has activated or \"None\"\nif no service has been activated.",
            "nullable": true
          },
          "TimeOnDemand": {
            "type": "boolean"
          },
          "PerformTime": {
            "type": "boolean"
          },
          "PerformTimeScheduling": {
            "type": "boolean"
          },
          "PaycorScheduling": {
            "type": "boolean"
          },
          "PaycorSchedulingPro": {
            "type": "boolean"
          },
          "PerformAccruals": {
            "type": "boolean"
          },
          "ResellerAccruals": {
            "type": "boolean"
          },
          "PerformTimeOff": {
            "type": "boolean"
          },
          "IntegrationPayrollTimePartner": {
            "type": "boolean"
          },
          "WorkforceManagement": {
            "type": "boolean"
          },
          "JobCosting": {
            "type": "boolean"
          },
          "Onboarding": {
            "type": "boolean"
          }
        }
      },
      "StatusReason": {
        "type": "object",
        "description": "Legal Entity's status reason.\nRepresents possible employee's statuses and it's categories.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the status.",
            "format": "guid",
            "example": "3c88ef90-5e35-0000-0000-0000fb0d0300"
          },
          "StatusCategory": {
            "description": "Category of the status.",
            "example": "PlaceOnLeave",
            "$ref": "#/components/schemas/StatusCategory"
          },
          "Value": {
            "type": "string",
            "description": "Status reason value.",
            "nullable": true,
            "example": "Sick"
          }
        }
      },
      "StatusCategory": {
        "type": "string",
        "description": "Enumeration of valid status categories.",
        "x-enumNames": [
          "Termination",
          "ReturnFromLeave",
          "PlaceOnLeave"
        ],
        "enum": [
          "Termination",
          "ReturnFromLeave",
          "PlaceOnLeave"
        ]
      },
      "StatusCategory2": {
        "type": "string",
        "description": "    TerminationReason \n\n\n    LeaveReason \n\n\n    ReturnReason",
        "x-enumNames": [
          "TerminationReason",
          "LeaveReason",
          "ReturnReason"
        ],
        "enum": [
          "TerminationReason",
          "LeaveReason",
          "ReturnReason"
        ]
      },
      "PagedResultOfLegalEntityTax": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityTax"
              },
              "$ref": "#/components/schemas/LegalEntityTax"
            }
          }
        }
      },
      "LegalEntityTax": {
        "type": "object",
        "description": "The Legal Entity (Client) tax model represents organization Legal Entity Tax information.  ",
        "additionalProperties": false,
        "properties": {
          "LegalEntityTaxId": {
            "type": "string",
            "description": "Unique identifier of the legal entity tax in Paycor's system.\n            ",
            "format": "guid",
            "example": "2802cb0f-d278-0000-0000-000014e00100"
          },
          "LegalEntityId": {
            "type": "integer",
            "description": "Unique identifier of the legal entity in Paycor's system.\n            ",
            "format": "int32",
            "example": 501123
          },
          "TaxCode": {
            "type": "string",
            "description": "Tax code values set at the client level.\n            ",
            "nullable": true,
            "example": "ZZEIC"
          },
          "Description": {
            "type": "string",
            "description": "Description of  tax code.",
            "nullable": true,
            "example": "Earned Income Credit"
          },
          "Type": {
            "description": "Enumeration of valid Types of Tax values",
            "example": "FEIC",
            "$ref": "#/components/schemas/TaxType"
          },
          "TaxAuthCode": {
            "type": "string",
            "description": "Tax authority code",
            "nullable": true,
            "example": 940
          },
          "DepositFrequency": {
            "description": "Frequency that the deposit will run ",
            "example": "SW",
            "$ref": "#/components/schemas/DepositFrequencyType"
          },
          "EffectiveStartDate": {
            "type": "string",
            "description": "Specifies the effective start date of the tax",
            "format": "date-time",
            "nullable": true,
            "example": "2019-11-01T00:00:00Z"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "Specifies the sequence number of the tax",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "Rate": {
            "type": "number",
            "description": "Tax rate \n            ",
            "format": "decimal",
            "nullable": true,
            "example": 0.1
          },
          "ReciprocityType": {
            "description": "Enumeration of valid multi-state tax reciprocity values. \n            ",
            "nullable": true,
            "example": "LivesIn",
            "$ref": "#/components/schemas/ReciprocityType"
          },
          "OfferDependentInsurance": {
            "type": "boolean",
            "description": "Specifies whether dependent insurance is offered.\n            ",
            "nullable": true,
            "example": true
          },
          "WagePlan": {
            "type": "string",
            "description": "Wage plan\n            ",
            "nullable": true,
            "example": "S"
          },
          "ItemHold": {
            "type": "string",
            "description": "Specifies Item hold status on the tax\nSpecifies tax status",
            "nullable": true,
            "example": "N"
          },
          "LegalEntity": {
            "description": "URL to access the Legal Entity resource for information about the legal entity. \n            ",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "DepositFrequencyType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "General",
          "Accelerated",
          "SemiWeekly",
          "BiWeekly",
          "Weekly",
          "EighthMonthly",
          "QuarterMonthly",
          "SemiMonthly",
          "Monthly20th",
          "Monthly",
          "Quarterly",
          "SemiAnnually",
          "Yearly",
          "ThreeDayFiler",
          "FiveDayFiler"
        ],
        "enum": [
          "General",
          "Accelerated",
          "SemiWeekly",
          "BiWeekly",
          "Weekly",
          "EighthMonthly",
          "QuarterMonthly",
          "SemiMonthly",
          "Monthly20th",
          "Monthly",
          "Quarterly",
          "SemiAnnually",
          "Yearly",
          "ThreeDayFiler",
          "FiveDayFiler"
        ]
      },
      "EmployeePunch": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "EmployeeId",
          "DepartmentId",
          "PunchDateTime",
          "PunchStatusType",
          "ActivityTypeId",
          "IsTransfer"
        ],
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique Identifier of the Employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "DepartmentId": {
            "type": "string",
            "description": "Unique identifier of the department in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "cb4a1b67-000c-0000-0000-000066000000"
          },
          "PunchDateTime": {
            "type": "string",
            "description": "Punch DateTime of the Employee. This is local time of the associated employee.\nFormat: YYYY-MM-DDTHH:MM:SS ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-01T00:00:00"
          },
          "PunchStatusType": {
            "description": "Enumeration of valid Punch Status Type values.",
            "example": "In",
            "$ref": "#/components/schemas/PunchStatusType"
          },
          "ActivityTypeId": {
            "type": "string",
            "description": "Unique identifier for the Activity Type.",
            "format": "guid",
            "minLength": 1,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "IsTransfer": {
            "type": "boolean",
            "description": "IsTransfer property serves as an indicator in identifying a transfer punch.\nWhen set to 'true' this property designates a punch as a transfer punch.\nTo appropriately handle a transfer punch ensure that the 'PunchStatusType' is set to value 'Transfer' when sending a payload.\nIf 'PunchStatusType' is set to a value other then 'Transfer' and 'IsTransfer' is set to 'true', PunchStatusType value will get ignored in most of the cases.\nTransfer punch is essential for tracking and management of employee transfers during the working hours.\nTransfer punches find their use in scenarios where an employee undergoes a change in department or labor type.\nBy adding a transfer punch the application effectively captures these transitions\nproviding an overview of employee movements between different departments or labor types.",
            "example": false
          },
          "Note": {
            "type": "string",
            "description": "Comments to describe the Punch.\n​Note when provided must be between 1 and 300 characters.",
            "nullable": true,
            "example": "Punch during break"
          },
          "LaborCodes": {
            "type": "array",
            "description": "​LaborCodes must either be empty or contain an array of valid LaborCategoryIds and LaborCodeIds.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode3"
            }
          }
        }
      },
      "PunchStatusType": {
        "type": "string",
        "description": "Enumeration of Valid Type of Status values.\n            ",
        "x-enumNames": [
          "Auto",
          "In",
          "Out",
          "Transfer"
        ],
        "enum": [
          "Auto",
          "In",
          "Out",
          "Transfer"
        ]
      },
      "EmployeeHour": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "EmployeeId",
          "DepartmentId",
          "LegalEntityEarningId",
          "StartDateTime",
          "Total",
          "ActivityTypeId"
        ],
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique Identifier of the Employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "DepartmentId": {
            "type": "string",
            "description": "Unique identifier of the department in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "cb4a1b67-000c-0000-0000-000066000000"
          },
          "LegalEntityEarningId": {
            "type": "string",
            "description": "Unique identifier of the Legal Entity Earning in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "f3f4eee9-c7a3-ed11-912f-0050569f27b8"
          },
          "StartDateTime": {
            "type": "string",
            "description": "The date and time the hour record begins.\nFormat: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ",
            "format": "date-time",
            "minLength": 1,
            "example": "2019-11-01T00:00:00Z"
          },
          "Total": {
            "type": "number",
            "description": "The total hours amount.",
            "format": "decimal",
            "example": 8
          },
          "ActivityTypeId": {
            "type": "string",
            "description": "Enumeration of valid Activity values.",
            "format": "guid",
            "minLength": 1,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "ApplyAllPolicies": {
            "type": "boolean",
            "description": "Determines the type of Hour being created.\nWhen set to 'true' Hour Entry is created, if set to 'false' Hour Record is created.\nExisting client policies are only applied to Hour Entries.\nDefault value will be false.",
            "example": false
          },
          "Note": {
            "type": "string",
            "description": "Comments to describe the Hour.\n​Note when provided must be between 1 and 300 characters.",
            "nullable": true,
            "example": "Employee Hour missed"
          },
          "LaborCodes": {
            "type": "array",
            "description": "​LaborCodes must either be empty or contain an array of valid LaborCategoryIds and LaborCodeIds.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode3"
            }
          }
        }
      },
      "PagedResultOfPunchErrorLog": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PunchErrorLog"
              },
              "$ref": "#/components/schemas/PunchErrorLog"
            }
          }
        }
      },
      "PunchErrorLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeErrorLog"
          },
          {
            "type": "object",
            "description": "Punch Error log model represents information about error logs in the create punch request api.",
            "additionalProperties": false,
            "properties": {
              "PunchDetail": {
                "type": "string",
                "description": "Punch details EmployeeID and date of punch that failed while importing",
                "nullable": true,
                "example": "EmployeeID : 116f2f66-7dbc-0000-0000-0000603d0400, Punch Date Time: 3/13/2024 8:59:00 PM"
              }
            }
          }
        ]
      },
      "TimeErrorLog": {
        "type": "object",
        "description": "Error log",
        "additionalProperties": false,
        "properties": {
          "TrackingId": {
            "type": "string",
            "description": "Unique identifier of the request. This is the output of creating bulk punch/hour/payitem request",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "ErrorDetail": {
            "type": "string",
            "description": "Error details of failed request",
            "nullable": true,
            "example": "Request Failed."
          }
        }
      },
      "PagedResultOfHourErrorLog": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "HourErrorLog"
              },
              "$ref": "#/components/schemas/HourErrorLog"
            }
          }
        }
      },
      "HourErrorLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeErrorLog"
          },
          {
            "type": "object",
            "description": "Hour Error log model represents information about error logs in the create hour request api.",
            "additionalProperties": false,
            "properties": {
              "HourDetail": {
                "type": "string",
                "description": "Hour details EmployeeID and start date time of hour and total that failed while importing\n            ",
                "nullable": true,
                "example": "EmployeeID : 36f45f30-9a35-0000-0000-000001000000, Hour start date Time : 11/29/2023 11:00:00 PM,Total:10.00 "
              }
            }
          }
        ]
      },
      "PagedResultOfPayItemErrorLog": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayItemErrorLog"
              },
              "$ref": "#/components/schemas/PayItemErrorLog"
            }
          }
        }
      },
      "PayItemErrorLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeErrorLog"
          },
          {
            "type": "object",
            "description": "Pay Item Error log model represents information about error logs in the create Payitem request api.",
            "additionalProperties": false,
            "properties": {
              "PayItemDetail": {
                "type": "string",
                "description": "PayItem  details LegalEntityId, EmployeeID and amount of Pay item that failed while importing",
                "nullable": true,
                "example": "EmployeeID : 36f45f30-9a35-0000-0000-000001000000, PayItem Date : 11/29/2023 11:00:00 PM, PayItem Amount : 100"
              }
            }
          }
        ]
      },
      "PagedResultOfPayItem": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PayItem"
              },
              "$ref": "#/components/schemas/PayItem"
            }
          }
        }
      },
      "PayItem": {
        "type": "object",
        "description": "PayItem Model to represents Employee Pay item details",
        "additionalProperties": false,
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "LegalEntityEarningId": {
            "type": "string",
            "description": "Earning code ID of PayItem, assigned via LegalEntityEarning.",
            "format": "guid",
            "nullable": true,
            "example": "ff5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Amount": {
            "type": "number",
            "description": "PayItem's amount.",
            "format": "decimal",
            "example": 50
          },
          "DepartmentId": {
            "type": "string",
            "description": "The Department ID that Employee belongs to.",
            "format": "guid",
            "nullable": true,
            "example": "ef5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Note": {
            "type": "string",
            "description": "Comments to describe the Pay Item.\n​Note when provided must be between 1 and 300 characters.",
            "nullable": true,
            "example": "Tip Amount"
          },
          "LaborCodes": {
            "type": "array",
            "description": "List of type labor association, containing the Laborcode details that is linked to the pay item.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode3"
            }
          },
          "Date": {
            "type": "string",
            "description": "Date of the PayItem.\nFormat: YYYY-MM-DD\n            ",
            "nullable": true,
            "example": "2019-11-01"
          }
        }
      },
      "PayItem2": {
        "type": "object",
        "description": "PayItem Model to represents Employee Pay item details",
        "additionalProperties": false,
        "required": [
          "EmployeeId",
          "LegalEntityEarningId",
          "Amount",
          "Date"
        ],
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "LegalEntityEarningId": {
            "type": "string",
            "description": "Earning code ID of PayItem, assigned via LegalEntityEarning.",
            "format": "guid",
            "minLength": 1,
            "example": "ff5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Amount": {
            "type": "number",
            "description": "PayItem's amount. Amount value should be greater than 0.",
            "format": "decimal",
            "example": 50
          },
          "DepartmentId": {
            "type": "string",
            "description": "The Department ID that Employee belongs to.",
            "format": "guid",
            "nullable": true,
            "example": "ef5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Note": {
            "type": "string",
            "description": "Comments to describe the Pay Item.\n​Note when provided must be between 1 and 300 characters.",
            "nullable": true,
            "example": "Tip Amount"
          },
          "LaborCodes": {
            "type": "array",
            "description": "List of type labor association, containing the Laborcode details that is linked to the pay item.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LaborCode"
              },
              "$ref": "#/components/schemas/LaborCode3"
            }
          },
          "Date": {
            "type": "string",
            "description": "Date of the PayItem.\nFormat: YYYY-MM-DD\n            ",
            "minLength": 1,
            "example": "2019-11-01"
          }
        }
      },
      "PagedResultOfEmployeeTimeOffRequest2": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeTimeOffRequest"
              },
              "$ref": "#/components/schemas/EmployeeTimeOffRequest2"
            }
          }
        }
      },
      "EmployeeTimeOffRequest2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "EmployeeId",
          "TimeOffTypeId",
          "Status",
          "Days"
        ],
        "properties": {
          "EmployeeId": {
            "type": "string",
            "description": "Unique identifier of this employee.",
            "format": "guid",
            "minLength": 1,
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "TimeOffTypeId": {
            "type": "string",
            "description": "Unique identifier used to represent the Time Off Type. TimeOffTypeID associated to an Employee. Sometimes called as Benefit Code.",
            "format": "guid",
            "minLength": 1,
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Status": {
            "description": "Status of this time off request.\nStatus could be Pending, Approved, Denied, Removed, Canceled.",
            "example": "Approved",
            "$ref": "#/components/schemas/EmployeeTimeOffRequestStatus"
          },
          "Comment": {
            "type": "string",
            "description": "Comments to describe the TimeOffRequest.",
            "nullable": true,
            "example": "Notes Related to Time Off Request."
          },
          "Days": {
            "type": "array",
            "description": "Collection of days for this time off request.",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeOffRequestDay"
              },
              "$ref": "#/components/schemas/TimeOffRequestDay2"
            }
          }
        }
      },
      "EmployeeTimeOffRequestStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "Approved",
          "Denied",
          "Canceled",
          "Removed"
        ],
        "enum": [
          "Pending",
          "Approved",
          "Denied",
          "Canceled",
          "Removed"
        ]
      },
      "TimeOffRequestDay2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Date"
        ],
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date for which Time Off is being requested.",
            "format": "date-time",
            "minLength": 1,
            "example": "2020-11-17"
          },
          "StartTime": {
            "type": "string",
            "description": "Exact start date and time for this day. Time component is needed in case of partial time off (when IsPartial is true). This is local time of the associated employee.\nStartTime cannot be older than one year.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T13:03:03.943"
          },
          "EndTime": {
            "type": "string",
            "description": "Exact end date and time for this day.  Time component is needed in case of partial time off (when IsPartial is true). This is local time of the associated employee.\nEndTime cannot be older than one year.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-11-17T13:03:03.943"
          },
          "Hours": {
            "type": "number",
            "description": "Total amount of hours for this day.",
            "format": "decimal",
            "nullable": true,
            "example": 6
          },
          "IsPartial": {
            "type": "boolean",
            "description": "This represents whether the Time Off is either Partial or Full Day. If true then StartTime and EndTime values would be required.",
            "nullable": true
          }
        }
      },
      "TimeOffRequestsErrorLog": {
        "type": "object",
        "description": "Time Off Request Error log model represents information about error logs in the create timeoff request api.",
        "additionalProperties": false,
        "properties": {
          "TrackingId": {
            "type": "string",
            "description": "Unique identifier of the request. This is the output of creating bulk Timeoff request",
            "format": "guid",
            "example": "36f45f30-9a35-0000-0000-000001000000"
          },
          "TORDetail": {
            "type": "string",
            "description": "TimeOffRequest details LegalEntityId, EmployeeUID and date of timeoffrequest that failed while importing",
            "nullable": true,
            "example": "EmployeeID : 36f45f30-9a35-0000-0000-000001000000, TOR Date : 11/29/2023 11:00:00 PM"
          },
          "ErrorDetail": {
            "type": "string",
            "description": "Error details of failed request",
            "nullable": true,
            "example": "Validation failed:  Days[0].StartTime: 'Start Time' must not be empty. Days[0].EndTime: 'End Time' must not be empty."
          }
        }
      },
      "PagedResultOfTimeOffType": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TimeOffType"
              },
              "$ref": "#/components/schemas/TimeOffType"
            }
          }
        }
      },
      "TimeOffType": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier used to represent the Time Off Type",
            "format": "guid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "Name": {
            "type": "string",
            "description": "Friendly name used to identify the Time Off Type",
            "nullable": true,
            "example": "Paid Time Off"
          },
          "Code": {
            "type": "string",
            "description": "Short string used to identify the Time Off Type ",
            "nullable": true,
            "example": "PTO"
          }
        }
      },
      "PagedResultOfLegalEntityWorkLocation": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityWorkLocation"
              },
              "$ref": "#/components/schemas/LegalEntityWorkLocation"
            }
          }
        }
      },
      "LegalEntityWorkLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the legal entity's work location in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "Name": {
            "type": "string",
            "description": "Name of the legal entity's work location.",
            "nullable": true,
            "example": "ACME East is an open concept office."
          },
          "Addresses": {
            "type": "array",
            "description": "A list of legal entity's work location's addresses.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityWorkLocationAddress"
              },
              "$ref": "#/components/schemas/LegalEntityWorkLocationAddress"
            }
          },
          "Phones": {
            "type": "array",
            "description": "A list of the legal entity's work location's phone numbers.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkLocationPhone"
              },
              "$ref": "#/components/schemas/WorkLocationPhone"
            }
          },
          "LocationNumber": {
            "type": "string",
            "description": "Location Number of the work location.",
            "nullable": true,
            "example": "Number"
          },
          "StoreId": {
            "type": "string",
            "description": "Unique identifier of the work location store. StoreId is used for clients with WOTC Service only, defaults to Worklocation name if not provided.",
            "nullable": true,
            "example": 18
          },
          "IsFmlaEligible": {
            "type": "boolean",
            "description": "Flag which determines if work location is FMLA eligible (Family and Medical Leave Act).",
            "nullable": true,
            "example": true
          }
        }
      },
      "LegalEntityWorkLocationAddress": {
        "type": "object",
        "description": "The Legal Entity Work Location Address model represents Legal Entity Work Location Address information.",
        "additionalProperties": false,
        "properties": {
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "nullable": true,
            "example": "4811 Montgomery Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building 6"
          },
          "Suite": {
            "type": "string",
            "description": "Suite information in the address.\n            ",
            "nullable": true,
            "example": "Suite 1000"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "County": {
            "type": "string",
            "description": "County in the address.\n            ",
            "nullable": true,
            "example": "Hamilton"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "nullable": true,
            "example": "45212-0341"
          },
          "Type": {
            "description": "Enumeration of valid legal entity address type values.\n            ",
            "example": "Unknown",
            "$ref": "#/components/schemas/WorkLocationAddressType2"
          }
        }
      },
      "WorkLocationAddressType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Physical",
          "Mailing"
        ],
        "enum": [
          "Unknown",
          "Physical",
          "Mailing"
        ]
      },
      "WorkLocationPhone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Phone"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Type": {
                "description": "Enumeration of valid work location phone type values.",
                "example": "Voice",
                "$ref": "#/components/schemas/WorkLocationPhoneType"
              }
            }
          }
        ]
      },
      "WorkLocationPhoneType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Voice",
          "Fax"
        ],
        "enum": [
          "Unknown",
          "Voice",
          "Fax"
        ]
      },
      "WorkLocation": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Name",
          "Addresses"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the work location.",
            "minLength": 1,
            "example": "Temp WL."
          },
          "StoreId": {
            "type": "string",
            "description": "Unique identifier of the work location store. StoreId is used for clients with WOTC Service only, defaults to Worklocation name if not provided.",
            "nullable": true,
            "example": 18
          },
          "IsFmlaEligible": {
            "type": "boolean",
            "description": "Flag which determines if work location is FMLA eligible (Family and Medical Leave Act).",
            "nullable": true,
            "example": true
          },
          "Addresses": {
            "type": "array",
            "description": "A list of work location's addresses.",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkLocationAddress"
              },
              "$ref": "#/components/schemas/WorkLocationAddress"
            }
          },
          "PhoneNumbers": {
            "type": "array",
            "description": "A list of the work location's phone numbers.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkLocationPhoneNumber"
              },
              "$ref": "#/components/schemas/WorkLocationPhoneNumber"
            }
          }
        }
      },
      "WorkLocationAddress": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Type",
          "StreetLine1",
          "State",
          "City",
          "Country",
          "ZipCode"
        ],
        "properties": {
          "Type": {
            "description": "Enumeration of valid address type values.\n            ",
            "example": "Physical",
            "$ref": "#/components/schemas/AddressType"
          },
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "minLength": 1,
            "example": "5555 Test Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building 1"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "minLength": 1,
            "example": "OH"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "minLength": 1,
            "example": "Cincinnati"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "minLength": 1,
            "example": "USA"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "minLength": 1,
            "example": 55555
          }
        }
      },
      "AddressType": {
        "type": "string",
        "description": "Enumeration of valid Types of Address.",
        "x-enumNames": [
          "Physical",
          "Mailing"
        ],
        "enum": [
          "Physical",
          "Mailing"
        ]
      },
      "WorkLocationPhoneNumber": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "description": "Enumeration of valid work location phone type values.",
            "nullable": true,
            "example": "Voice",
            "$ref": "#/components/schemas/PhoneNumberType"
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Local phone number. ",
            "nullable": true,
            "example": "555-2300"
          }
        }
      },
      "PhoneNumberType": {
        "type": "string",
        "description": "Enumeration of valid Types of phone number.",
        "x-enumNames": [
          "Voice",
          "Fax"
        ],
        "enum": [
          "Voice",
          "Fax"
        ]
      },
      "WorkLocation2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the work location in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "minLength": 1,
            "example": "164f5405-d32c-4612-8a11-20491516e557"
          },
          "Addresses": {
            "type": "array",
            "description": "A list of work location's addresses.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkLocationAddressUpdate"
              },
              "$ref": "#/components/schemas/WorkLocationAddressUpdate"
            }
          },
          "PhoneNumbers": {
            "type": "array",
            "description": "A list of the work location's phone numbers.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkLocationPhoneNumber"
              },
              "$ref": "#/components/schemas/WorkLocationPhoneNumber"
            }
          },
          "TimeZone": {
            "type": "string",
            "description": "Time zone.\n            ",
            "nullable": true,
            "example": 12
          },
          "IsFmlaEligible": {
            "type": "boolean",
            "description": "Is FmlaEligible.\n            ",
            "nullable": true,
            "example": false
          },
          "IsDefault": {
            "type": "boolean",
            "description": "Is default\n            ",
            "nullable": true,
            "example": false
          }
        }
      },
      "WorkLocationAddressUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Type"
        ],
        "properties": {
          "Type": {
            "description": "Enumeration of valid address type values.\n            ",
            "example": "Physical",
            "$ref": "#/components/schemas/AddressType"
          },
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "nullable": true,
            "example": "5555 Test Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building 1"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "nullable": true,
            "example": 55555
          }
        }
      },
      "PagedResultOfWorkSite": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkSite"
              },
              "$ref": "#/components/schemas/WorkSite"
            }
          }
        }
      },
      "WorkSite": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Work Site identifier",
            "format": "guid",
            "example": "b95b8067-09c9-46d2-52d8-08da7531eb4f"
          },
          "Name": {
            "type": "string",
            "description": "Work Site name",
            "nullable": true,
            "example": "Paycor Cincinati office"
          },
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.",
            "nullable": true,
            "example": "4811 Montgomery Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.",
            "nullable": true,
            "example": "Building 6"
          },
          "City": {
            "type": "string",
            "description": "City in the address.",
            "nullable": true,
            "example": "Cincinnati"
          },
          "State": {
            "type": "string",
            "description": "State in the address.",
            "nullable": true,
            "example": "OH"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.",
            "nullable": true,
            "example": "45212-0341"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.",
            "nullable": true,
            "example": "USA"
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Worksite Phone",
            "nullable": true,
            "example": "555-2300"
          }
        }
      },
      "PagedResultOfSmartlinxEmployeeMapping": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SmartlinxEmployeeMapping"
              },
              "$ref": "#/components/schemas/SmartlinxEmployeeMapping"
            }
          }
        }
      },
      "SmartlinxEmployeeMapping": {
        "type": "object",
        "description": "Employee mapping object which represents mappings between Paycor and Smartlinx systems",
        "additionalProperties": false,
        "properties": {
          "PaycorEmployeeId": {
            "type": "string",
            "description": "Unique identifier of the employee in Paycor system.",
            "format": "guid",
            "nullable": true,
            "example": "eae83607-000c-0000-0000-000066000000"
          },
          "PaycorEmployeeUid": {
            "type": "integer",
            "description": "Internal unique identifier of the employee in Paycor system.",
            "format": "int64",
            "nullable": true,
            "example": 96264703587284
          },
          "PaycorLegalEntityId": {
            "type": "integer",
            "description": "Id of the Legal Entity in Paycor system.",
            "format": "int32",
            "example": 678556
          },
          "PaycorEmployeeNumber": {
            "type": "integer",
            "description": "Customer-assigned friendly unique number of the employee within the Tenant in Paycor system.",
            "format": "int32",
            "nullable": true,
            "example": 123666
          },
          "PaycorTenantId": {
            "type": "integer",
            "description": "Id of the Tenant in Paycor system.",
            "format": "int32",
            "example": 678556
          },
          "SmartlinxCompanyId": {
            "type": "integer",
            "description": "Id of the Company in Smartlinx system.",
            "format": "int32",
            "example": 2
          },
          "SmartlinxClientId": {
            "type": "string",
            "description": "Id of the Client in Smartlinx system.",
            "nullable": true,
            "example": 73557
          },
          "SmartlinxEmployeePayrollNumber": {
            "type": "string",
            "description": "Employee number in Smartlinx system.",
            "nullable": true,
            "example": 1453
          }
        }
      },
      "PagedResultOfPerson": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Person"
              },
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "Person": {
        "type": "object",
        "description": "Each Person is associated with one or more Employees within one Tenant. An Employee works for a single Legal Entity within the Tenant.  If a person works\nfor multiple Legal Entities within a Tenant, they will be associated with multiple Employee records - but will only have a single Person record in the Paycor system.\nProvides links to the Person's associated Employee, Legal Entity and Tenant information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the person in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "df5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "Prefix": {
            "description": "Enumeration of valid name prefix values.",
            "example": "Dr",
            "$ref": "#/components/schemas/Prefix"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the person. ",
            "nullable": true,
            "example": "Edwin"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the person.",
            "nullable": true,
            "example": "Powell"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the person.",
            "nullable": true,
            "example": "Hubble"
          },
          "Suffix": {
            "description": "Enumeration of valid name suffix values.",
            "example": "Sr",
            "$ref": "#/components/schemas/Suffix"
          },
          "LegalFirstName": {
            "type": "string",
            "description": "First name used on the person's W-2 tax form.\n            ",
            "nullable": true,
            "example": "Lewis"
          },
          "LegalLastName": {
            "type": "string",
            "description": "Last name used on the person's W-2 tax form.\n            ",
            "nullable": true,
            "example": "Carroll"
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Social security number of the person.",
            "nullable": true,
            "example": 555555555
          },
          "Email": {
            "description": "Email Information of the person.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonEmail"
          },
          "DemographicData": {
            "description": "Person's demographic data of type DemographicData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DemographicData"
          },
          "BenefitData": {
            "description": "Person's benefits data of type BenefitData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BenefitData"
          },
          "EmergencyContactData": {
            "type": "array",
            "description": "List of type EmergencyContactData containing a Person's emergency contacts data.\nThis data will only be available for Get Person (returns single Person object) APIs and will always be null for Get Persons (returns list of Person) APIs.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmergencyContactData"
              },
              "$ref": "#/components/schemas/EmergencyContactData"
            }
          },
          "MilitaryData": {
            "description": "Person's military data of type MilitaryData.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MilitaryData"
          },
          "SocialMediaData": {
            "type": "array",
            "description": "List of type SocialMediaData containing the Person's social media information. \n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "SocialMediaData"
              },
              "$ref": "#/components/schemas/SocialMediaData"
            }
          },
          "EmployeeAssignments": {
            "type": "array",
            "description": "List of type EmployeeAssignment containing the person's employee assignments.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "EmployeeAssignment"
              },
              "$ref": "#/components/schemas/EmployeeAssignment"
            }
          },
          "Addresses": {
            "type": "array",
            "description": "List of type Address containing the person's addresses.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PersonAddress"
              },
              "$ref": "#/components/schemas/PersonAddress"
            }
          },
          "Phones": {
            "type": "array",
            "description": "List of type Phone containing the person's phone numbers.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Phone"
              },
              "$ref": "#/components/schemas/Phone"
            }
          },
          "Tenants": {
            "description": "URL to access the Tenant resource for information about the person's tenant.\n            ",
            "nullable": true,
            "example": "/v1/tenants/10138",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PersonEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Type": {
                "$ref": "#/components/schemas/PersonEmailType"
              }
            }
          }
        ]
      },
      "PersonEmailType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Home"
        ],
        "enum": [
          "Home"
        ]
      },
      "DemographicData": {
        "type": "object",
        "description": "The Demographic Data model represents a Person's confidential Demographic Information.\n            ",
        "additionalProperties": false,
        "properties": {
          "BirthDate": {
            "type": "string",
            "description": "Date of birth of the person following the ISO 8601 standard.\nFormat: YYYY-MM-DDTHH:MM:SSZ (ISO-8601 standard)",
            "format": "date-time",
            "nullable": true,
            "example": "1944-04-01T00:00:00Z"
          },
          "Gender": {
            "description": "Enumeration of valid gender values.\n            ",
            "example": "Female",
            "$ref": "#/components/schemas/Gender"
          },
          "Ethnicity": {
            "description": "Enumeration of valid ethnicity type values.\n            ",
            "example": "DeclinedtoIdentify",
            "$ref": "#/components/schemas/EthnicityType"
          },
          "MaritalStatus": {
            "description": "Enumeration of valid marital status values.\n            ",
            "example": "Married",
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "MaidenName": {
            "type": "string",
            "description": "Maiden name of the person.\n            ",
            "nullable": true,
            "example": "Monroe"
          }
        }
      },
      "BenefitData": {
        "type": "object",
        "description": "The Benefit Data model represents a Person's Benefits Data.",
        "additionalProperties": false,
        "properties": {
          "IsTobaccoUser": {
            "type": "boolean",
            "description": "Whether person is a tobacco user.",
            "nullable": true,
            "example": false
          },
          "Disability": {
            "description": "Enumeration of valid disability status values.",
            "example": true,
            "$ref": "#/components/schemas/DisabilityStatus"
          }
        }
      },
      "EmergencyContactData": {
        "type": "object",
        "description": "The Emergency Contact Data model represents a Person's Emergency Contacts Data.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the emergency contact in Paycor's system. Generated by Paycor.\n            ",
            "format": "guid",
            "example": "af5566ef-196c-0000-0000-0007d5268Sa2"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the emergency contact.\n            ",
            "nullable": true,
            "example": "Erwin"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the emergency contact.",
            "nullable": true,
            "example": "Rudolf"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the emergency contact.\n            ",
            "nullable": true,
            "example": "Shrodinger"
          },
          "Phones": {
            "type": "array",
            "description": "List of type Phone containing phone numbers for the emergency contact.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "Phone"
              },
              "$ref": "#/components/schemas/Phone"
            }
          },
          "Order": {
            "type": "integer",
            "description": "Emergency contacts priority.\n            ",
            "format": "int32",
            "example": 1
          },
          "Relationship": {
            "type": "string",
            "description": "Relationship to the emergency contact.\n            ",
            "nullable": true,
            "example": "Father"
          }
        }
      },
      "MilitaryData": {
        "type": "object",
        "description": "The Military Data model represents a Person's military information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Veteran": {
            "description": "Enumeration of valid veteran status values.\n            ",
            "example": true,
            "$ref": "#/components/schemas/VeteranStatus"
          },
          "DischargeDate": {
            "type": "string",
            "description": "Discharge date of the person from the military per US protected veteran definition. \nAvailable only if person's veteran status is 'true'.\n             Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) \n            ",
            "format": "date-time",
            "nullable": true,
            "example": "1999-11-01T00:00:00Z"
          },
          "IsArmedForcesServiceMedalVeteran": {
            "type": "boolean",
            "description": "Whether person qualifies as a medal recipient per US protected veteran definitions.\nAvailable only if person's veteran status is 'true'.\n            ",
            "nullable": true,
            "example": false
          },
          "IsDisabledVeteran": {
            "type": "boolean",
            "description": "Whether person qualifies as a disabled veteran per US protected veteran definitions.\nAvailable only if person's veteran status is 'true'.\n            ",
            "nullable": true,
            "example": false
          },
          "IsOtherProtectedVeteran": {
            "type": "boolean",
            "description": "Whether person qualifies as an other protected veteran per US protected veteran definitions.\nAvailable only if person's veteran status is 'true'.\n            ",
            "nullable": true,
            "example": false
          },
          "IsRecentlySeparatedVeteran": {
            "type": "boolean",
            "description": "Whether person qualifies as a recently separated veteran per US protected veteran definitions.\nAvailable only if person's veteran status is 'true'.\n            ",
            "nullable": true,
            "example": true
          },
          "IsVietnamEra": {
            "type": "boolean",
            "description": "Whether person qualifies as a Vietnam era veteran per US protected veteran definitions.\nAvailable only if person's veteran status is 'true'.\n            ",
            "nullable": true,
            "example": false
          },
          "IsSpecialDisabled": {
            "type": "boolean",
            "description": "A special disabled veteran is an individual who is legally approved for financial compensation\n in accordance with laws provided by the Veterans Administration for disabilities that are rated at least 30 percent. .\n ",
            "nullable": true,
            "example": false
          }
        }
      },
      "SocialMediaData": {
        "type": "object",
        "description": "The Social Media Data model represents information about a Person's Social Media accounts.\nProvides links to Person's Social Media accounts.\n            ",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "description": "Enumeration of valid social media type values.",
            "example": "Twitter",
            "$ref": "#/components/schemas/SocialMediaType"
          },
          "Url": {
            "type": "string",
            "description": "URL to access the person's social media account.\n            ",
            "nullable": true,
            "example": "https://www.twitter.com/exanple_account"
          }
        }
      },
      "SocialMediaType": {
        "type": "string",
        "description": "Enumeration of valid Social Media Type Values.",
        "x-enumNames": [
          "LinkedIn",
          "Twitter"
        ],
        "enum": [
          "LinkedIn",
          "Twitter"
        ]
      },
      "EmployeeAssignment": {
        "type": "object",
        "description": "The Employee Assignment model represents information regarding the legal entity or specific FEIN the employee is assigned too.\nProvides link to associated Employee information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Employees": {
            "description": "URL to access the Employee resource for information about the employees.\n            ",
            "nullable": true,
            "example": "/v1/employees/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PersonAddress": {
        "type": "object",
        "description": "The Person Address model represents the Person's Address information.",
        "additionalProperties": false,
        "properties": {
          "StreetLine1": {
            "type": "string",
            "description": "First line of street address information.\n            ",
            "nullable": true,
            "example": "4811 Montgomery Road"
          },
          "StreetLine2": {
            "type": "string",
            "description": "Additional line of street address information.\n            ",
            "nullable": true,
            "example": "Building A"
          },
          "Suite": {
            "type": "string",
            "description": "Suite information in the address.\n            ",
            "nullable": true,
            "example": "Suite 100"
          },
          "City": {
            "type": "string",
            "description": "City in the address.\n            ",
            "nullable": true,
            "example": "Cincinnati"
          },
          "State": {
            "type": "string",
            "description": "State in the address.\n            ",
            "nullable": true,
            "example": "OH"
          },
          "Country": {
            "type": "string",
            "description": "Country in the address.\n            ",
            "nullable": true,
            "example": "USA"
          },
          "County": {
            "type": "string",
            "description": "County in the address.\n            ",
            "nullable": true,
            "example": "Hamilton"
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code in the address.\n            ",
            "nullable": true,
            "example": "45212-0930"
          },
          "Type": {
            "description": "Enumeration of valid address type values.\n            ",
            "example": "Home",
            "$ref": "#/components/schemas/AddressType2"
          }
        }
      },
      "AddressType2": {
        "type": "string",
        "description": "Enumeration of valid Type of Address values.\n            ",
        "x-enumNames": [
          "Unknown",
          "Primary",
          "Home",
          "Check"
        ],
        "enum": [
          "Unknown",
          "Primary",
          "Home",
          "Check"
        ]
      },
      "IncludesList": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    Demographic - Include demographic data (e.g. BirthDate)\n\n\n    Benefit - Include benefit data (e.g. Status, IsTobaccoUser)\n\n\n    Military - Include military data (e.g. IsRecentlySeparatedVeteran)\n\n\n    SocialMedia - Include social media data (e.g. TwitterUrl)\n\n\n    Addresses - Include addresses (e.g. StreetLine, ZipCode)\n\n\n    EmployeeAssignments - Include employee assignments (e.g. EmployeeId)\n\n\n    SocialSecurityNumber - Include social security number (e.g. SocialSecurityNumber)\n\n\n    Phone - Include phone data (e.g. Phone)\n\n\n    Email - Include home email address (e.g. EmailAddress)\n        ",
        "x-enumNames": [
          "All",
          "Demographic",
          "Benefit",
          "Military",
          "SocialMedia",
          "Addresses",
          "EmployeeAssignments",
          "SocialSecurityNumber",
          "Phones",
          "Email"
        ],
        "enum": [
          "All",
          "Demographic",
          "Benefit",
          "Military",
          "SocialMedia",
          "Addresses",
          "EmployeeAssignments",
          "SocialSecurityNumber",
          "Phones",
          "Email"
        ]
      },
      "PagedResultOfPersonList": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "PersonList"
              },
              "$ref": "#/components/schemas/PersonList"
            }
          }
        }
      },
      "PersonList": {
        "type": "object",
        "description": "The Person List model represents general data returned for multiple Persons.\nProvides link to additional Person information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the person list record in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "b6h1223a-196c-0000-0000-0007d5268Sa2"
          },
          "Prefix": {
            "description": "Enumeration of valid name prefix values.",
            "example": "Dr",
            "$ref": "#/components/schemas/Prefix"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the person. ",
            "nullable": true,
            "example": "Edwin"
          },
          "MiddleName": {
            "type": "string",
            "description": "Middle name of the person.",
            "nullable": true,
            "example": "Powell"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the person.",
            "nullable": true,
            "example": "Hubble"
          },
          "Suffix": {
            "description": "Enumeration of valid name suffix values.",
            "example": "Sr",
            "$ref": "#/components/schemas/Suffix"
          },
          "Person": {
            "description": "URL to access the Person resource for information about the person.",
            "nullable": true,
            "example": "/v1/persons/df5566ef-196c-0000-0000-0007d5268Sa2",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "Includes20": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    Demographic - Include demographic data (e.g. BirthDate)\n\n\n    Benefit - Include benefit data (e.g. Status, IsTobaccoUser)\n\n\n    Military - Include military data (e.g. IsRecentlySeparatedVeteran)\n\n\n    SocialMedia - Include social media data (e.g. TwitterUrl)\n\n\n    Addresses - Include addresses (e.g. StreetLine, ZipCode)\n\n\n    EmployeeAssignments - Include employee assignments (e.g. EmployeeId)\n\n\n    EmergencyContact - Include emergency contact  data (e.g. FirstName)\n\n\n    SocialSecurityNumber - Include social security number (e.g. SocialSecurityNumber)\n\n\n    Phone - Include phone data (e.g. Phone)\n\n\n    Email - Include home email address (e.g. EmailAddress)\n        ",
        "x-enumNames": [
          "All",
          "Demographic",
          "Benefit",
          "Military",
          "SocialMedia",
          "Addresses",
          "EmployeeAssignments",
          "EmergencyContact",
          "SocialSecurityNumber",
          "Phones",
          "Email"
        ],
        "enum": [
          "All",
          "Demographic",
          "Benefit",
          "Military",
          "SocialMedia",
          "Addresses",
          "EmployeeAssignments",
          "EmergencyContact",
          "SocialSecurityNumber",
          "Phones",
          "Email"
        ]
      },
      "Includes21": {
        "type": "string",
        "description": "    All - Include all data\n\n\n    Demographic - Include demographic data (e.g. BirthDate)\n\n\n    Benefit - Include benefit data (e.g. Status, IsTobaccoUser)\n\n\n    Military - Include military data (e.g. IsRecentlySeparatedVeteran)\n\n\n    SocialMedia - Include social media data (e.g. TwitterUrl)\n\n\n    Addresses - Include addresses (e.g. StreetLine, ZipCode)\n\n\n    EmployeeAssignments - Include employee assignments (e.g. EmployeeId)\n\n\n    EmergencyContact - Include emergency contact  data (e.g. FirstName)\n\n\n    SocialSecurityNumber - Include social security number (e.g. SocialSecurityNumber)\n\n\n    Phone - Include phone data (e.g. Phone)\n\n\n    Email - Include home email address (e.g. EmailAddress)\n        ",
        "x-enumNames": [
          "All",
          "Demographic",
          "Benefit",
          "Military",
          "SocialMedia",
          "Addresses",
          "EmployeeAssignments",
          "EmergencyContact",
          "SocialSecurityNumber",
          "Phones",
          "Email"
        ],
        "enum": [
          "All",
          "Demographic",
          "Benefit",
          "Military",
          "SocialMedia",
          "Addresses",
          "EmployeeAssignments",
          "EmergencyContact",
          "SocialSecurityNumber",
          "Phones",
          "Email"
        ]
      },
      "Tenant": {
        "type": "object",
        "description": "The Tenant model represents information about Tenant (company) level organization information.\nProvides links to the associated Legal Entity information.\n            ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the tenant in Paycor's system. Generated by Paycor.",
            "format": "int32",
            "example": 10138
          },
          "Name": {
            "type": "string",
            "description": "Name of the tenant.",
            "nullable": true,
            "example": "ACME Inc."
          },
          "LegalEntities": {
            "type": "array",
            "description": "URL to access the Legal Entity resource for information about the tenant's legal entities.",
            "nullable": true,
            "example": "/v1/legalentities/501123",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "ResourceReference"
              },
              "$ref": "#/components/schemas/ResourceReference"
            }
          }
        }
      },
      "PagedResultOfTenantWorkLocation": {
        "type": "object",
        "description": "The Paged Result model enables pagination of results if maximum of 100 records per response is exceeded. Additional\nresults can be requested by providing calling the AdditionalResultsUrl endpoint containing the continuation token, or\nby building your own URL using the provided continuation token.",
        "additionalProperties": false,
        "properties": {
          "HasMoreResults": {
            "type": "boolean",
            "description": "Whether additional API result records exist on the Paycor system.",
            "example": "True"
          },
          "ContinuationToken": {
            "type": "string",
            "description": "Paycor generated token string which may be provided in a subsequent request to  release additional records past the maximum. \nUsed when partner is building their own URL.",
            "format": "guid",
            "nullable": true,
            "example": "3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "AdditionalResultsUrl": {
            "type": "string",
            "description": "Provides URL to call with the continuation token included for additional results. ",
            "nullable": true,
            "example": "/v1/myresources/xyz?continuationTokenId=3ac2fca9-09f2-49fb-86d7-b1b84ed6ca74"
          },
          "Records": {
            "type": "array",
            "description": "List of the API response records. ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "TenantWorkLocation"
              },
              "$ref": "#/components/schemas/TenantWorkLocation"
            }
          }
        }
      },
      "TenantWorkLocation": {
        "type": "object",
        "description": "The Tenant Work Location model represents information about Work Locations assigned by the Tenant.\nProvides link to the associated Tenant's information.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier of the tenant's work location in Paycor's system. Generated by Paycor.",
            "format": "guid",
            "example": "5245ae3d-e570-0000-0000-000066000000"
          },
          "Name": {
            "type": "string",
            "description": "Name of the tenant's work location.",
            "nullable": true,
            "example": "ACME East is an open concept office."
          },
          "Addresses": {
            "type": "array",
            "description": "List of type of (to change)  LegalEntityAddress containing the tenant's work location's addresses.",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "LegalEntityWorkLocationAddress"
              },
              "$ref": "#/components/schemas/LegalEntityWorkLocationAddress"
            }
          },
          "Phones": {
            "type": "array",
            "description": "List of type of Phone containing the tenant's work location's phone numbers.\n            ",
            "nullable": true,
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "WorkLocationPhone"
              },
              "$ref": "#/components/schemas/WorkLocationPhone"
            }
          },
          "Tenant": {
            "description": "URL to access the Tenant resource for information about the tenant.\n            ",
            "nullable": true,
            "example": "/v1/tenants/501123",
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      }
    },
    "securitySchemes": {
      "Access-Token": {
        "type": "apiKey",
        "description": "You will need to Activate your Application and retrieve an Access Token (a JWT Bearer Token) before calling our APIs. Please login and refer to the Guides for Activation information. When using the 'Try API' feature online, type into the textbox: Bearer {your Access Token}.",
        "name": "Authorization",
        "in": "header"
      },
      "Apim-Subscription-Key": {
        "type": "apiKey",
        "description": "Provide the APIm subscription key that you wish to use. Please login and consult the Guides for more information on retrieving this.",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Access-Token": []
    },
    {
      "Apim-Subscription-Key": []
    }
  ],
  "tags": [
    {
      "name": "Employees",
      "description": "These endpoints interact with Employees.\n* An Employee is linked to a single Legal Entity, a single Person, and a single Tenant.\n* Each Person will be linked to one or more Employees (setup by the admin in the Manage People screen).\n* Employee APIs will return Work email addresses, not Home."
    },
    {
      "name": "Persons",
      "description": "A Person is tied to a single Tenant, and will work in one or more Legal Entities (FEINs) - each of which will be be represented by one or more Employee rows. \n* Person APIs will return all Phone types, and Home-type emails (not work-type emails). "
    },
    {
      "name": "Tenants",
      "description": "A Tenant is a collection of multiple Legal Entities. Each Legal Entity is one FEIN. \n* In Paycor terminology, a Tenant is also known as a Company. "
    },
    {
      "name": "Applicant Tracking System",
      "description": "Applicant Tracking System\r\n\r\nThese endpoints can only be used if the Client has the Applicant Tracking Service."
    },
    {
      "name": "Employee Emergency Contact",
      "description": "Post Emergency Contact Details."
    },
    {
      "name": "Employee Certifications",
      "description": "Employee certification information"
    },
    {
      "name": "Employee Custom Fields",
      "description": " This API allows working with an employee's custom fields "
    },
    {
      "name": "Employee Deductions",
      "description": "\r\nFor more information, see documentation section titled 'Earnings, Deductions, and Taxes.'\r\n"
    },
    {
      "name": "Employee Direct Deposits",
      "description": "\r\nEmployees can setup Direct Deposit accounts to send their paycheck into bank accounts or HSA accounts. \r\n* To use the Employee Direct Deposit endpoints, the Legal Entity must have the Direct Deposit Workflow product or an error will be returned\r\n* Employees can choose a 'partial' or a 'full' (called Net) Direct Deposit. Partial Direct Deposits must set either a Rate or an Amount.\r\n* All Direct Deposits and HSA Direct Deposits must be tied to a Deduction Code that has already been setup on the Legal Entity.\r\n  * To add a new DD, you'll need to call 'GET Legal Entity Deductions' and find a Deduction Code of the correct type - usually one with DD or HSA in the Code.\r\n"
    },
    {
      "name": "Employee Documents",
      "description": "This APIs allow working with Documents of the Employees"
    },
    {
      "name": "Employee Earnings",
      "description": "\r\nFor more information, see documentation section titled 'Earnings, Deductions, and Taxes.'\r\n"
    },
    {
      "name": "Employee Payroll Hours",
      "description": "\r\nThese APIs interact with Paycor's Payroll system directly. They do not go through any Time system.\r\n\r\n* Paycor will need to add the 'Integration Payroll Time Partner' or have the Trackforce product enabled.\r\n* They are useful if you are integrating a third-party time product with Paycor.\r\n* You will need to choose an Earning Code for each set of Hours. The Code must already be setup on the particular Employee - you can use the Employee Earnings endpoints for this.\r\n* Calling this endpoint kicks off a backend import process. Currently, there are no APIs to read or monitor the import process. A client administrator must import, review & submit the payrun before any employees will be paid.\r\n* Client administrator will need to login to Paycor's Paygrid and use the Import Time Card feature to see & approve the values. They will see an Import Pay screen when they Begin a new Payrun.\r\n"
    },
    {
      "name": "Employee I9 Verification",
      "description": " This API allows working with an employee's I9 Verification fields "
    },
    {
      "name": "Employee Pay Rates",
      "description": "\r\nThese endpoints allow working with an Employee's pay rate, as setup on their profile by the Administrator. \r\n"
    },
    {
      "name": "Employee Pay Schedule",
      "description": "\r\nThis API allows working with an employee's scheduled Pay Periods, which indicates when the employee was/will be paid (known as a payrun). \r\n* Note that Pay Schedule is unrelated to the employee's work schedule or timecard information. \r\n* The employee's actual pay dates may not match the Pay Schedule, depending on the payroll admin's processing. \r\n  * An employee may be excluded from scheduled payruns. \r\n  * An employee may also have Additional Payruns (such as for bonuses) - which this API will not return. \r\n* A given employee will have a default Pay Frequency (such as Biweekly), which will define the Pay Schedule calendar.\r\n  * The employee's Pay Frequency is defined by the Paygroup they are assigned to. \r\n* This endpoint can be used to retrieve parameters for GET Employee Pay Stubs, although 'GET Legal Entity Paydata' would be more accurate for that. \r\n"
    },
    {
      "name": "Employee Pay Stubs",
      "description": "\r\nThis API allows working with an employee's Pay Stubs. Each Pay Period will generate one Pay Stub.\r\n* Calling GET Legal Entity Pay Data is required before calling GET Employee Pay Stubs, to obtain a list of valid check dates.\r\n\r\n"
    },
    {
      "name": "Employee (Legacy / Perform Time) Schedules",
      "description": "\r\nThese APIs interact with Paycor’s Perform Time Scheduling system. They will only be available to customers with Perform Time Scheduling service\r\n* Perform Time Scheduling (sometimes called Legacy Scheduling) stores basic information about Shifts\r\n* The Public APIs do not communicate with the more powerful “Paycor Scheduling” system. For Paycor Scheduling please refer to the documentation under the ‘Employee Scheduling’ section.\r\n"
    },
    {
      "name": "Employee Scheduling",
      "description": "These APIs interact with Paycor Scheduling system.\r\n\r\nIn order to use these apis you must have either Paycor Scheduling or Paycor Scheduling Pro Service."
    },
    {
      "name": "Employee Onboarding",
      "description": "\r\nThese APIs allow working with employees in the onboarding state.\r\n\r\nThese endpoints can only be used if the Client has the Onboarding Service."
    },
    {
      "name": "Employee Taxes",
      "description": "\r\nFor more information, see documentation section titled 'Earnings, Deductions, and Taxes.'\r\n"
    },
    {
      "name": "Employee Time Card Punches",
      "description": "\r\nThese APIs interact with Paycor's Perform Time system.\r\n* They will only work with Perform Time-enabled clients - otherwise you will receive an error.\r\n* These APIs will not work for Time on Demand or Attendance on Demand clients.\r\n"
    },
    {
      "name": "Employee Time Off Accruals",
      "description": "Accruals are time-off benefits for employees that increase over time, and are updated when a payrun is run (the employee is paid). \r\n* Common plans include PTO, vacation time, sick time, and floating holidays. \r\n* Accrual types and plans are setup at the Tenant level in Paycor's UI by the HR Admin. \r\n* Each employee can participate in a number of individual Accrual plans. \r\n* This API is only available to legal entities with the 'Perform Accruals' service. It is not available to clients with the older 'Perform Time Off' service. There is a migration path available. "
    },
    {
      "name": "Time Off Requests",
      "description": "These APIs allow querying employees' requests to take time off.\r\n* These APIs require the 'Perform Time Off' service.\r\n"
    },
    {
      "name": "General Ledger (Legacy)",
      "description": "This API allows working with clients General Ledger"
    },
    {
      "name": "General Ledger Job Costing (Legacy)",
      "description": "This API allows working with clients Job Costing"
    },
    {
      "name": "Labor Categories",
      "description": "This API allows working with Labor Categories"
    },
    {
      "name": "Labor Codes",
      "description": "This API allows working with Labor Codes"
    },
    {
      "name": "Legal Entities",
      "description": "\r\nA Legal Entity is a single FEIN (Federal ID number, for tax purposes). A Legal Entity will have a single Tenant as its parent. \r\n* In Paycor terminology, a Legal Entity is called a 'client'. \r\n  * Paycor customers are often familiar with their ClientId, which is a synonym for Public API's Legal Entity ID. \r\n"
    },
    {
      "name": "Legal Entity Certifications",
      "description": "Legal entity certification information"
    },
    {
      "name": "Legal Entity Deductions",
      "description": "\r\nPaycor's Public API doesn't currently include editing Legal Entity-level Deductions. Those must be setup by a client administrator in Paycor's system. \r\n\r\nFor more information, see documentation section titled 'Earnings, Deductions, and Taxes.'\r\n\r\n"
    },
    {
      "name": "Legal Entity Departments",
      "description": "\r\nThese APIs allow working with the Departments (also called Organizations) that have been configured on the Legal Entity. \r\n"
    },
    {
      "name": "Legal Entity Earnings",
      "description": "\r\nPaycor's Public API doesn't currently include editing Legal Entity-level Earnings. Those must be setup by a client administrator in Paycor's system. \r\n\r\nFor more information, see documentation section titled 'Earnings, Deductions, and Taxes.'\r\n"
    },
    {
      "name": "Legal Entity Forecasting",
      "description": "This API allows working with forecasting data based on Legal Entity ID\r\n* These APIs require the 'Labor Forecasting service'."
    },
    {
      "name": "Legal Entity Job Titles",
      "description": "Legal entity job titles information"
    },
    {
      "name": "Legal Entity Pay Data",
      "description": "\r\nAllows working with Pay Data information from Paycor's Payroll system.\r\n* Works with the dates that employees are actually paid, as opposed to the Pay Schedule which returns their scheduled pay dates.\r\n\r\n"
    },
    {
      "name": "Legal Entity Pay Groups",
      "description": "\r\nEach Paycor Legal Entity has a collection of one or more Payrolls. Each Payroll contains one or more Paygroups. These APIs return data about both. \r\n\r\nThis structure can be modified by the client administrator - there are currently no Public APIs for editing. \r\n"
    },
    {
      "name": "Legal Entity Payroll Processing Data",
      "description": "This API allows working with legal entity pay periods"
    },
    {
      "name": "Legal Entity Pay Schedule",
      "description": "\r\nThis API allows working with a Paygroup's scheduled Pay Periods, which indicates when its employees was/will be paid (known as a payrun). \r\n* Note that Pay Schedule is unrelated to the employee's work schedule or timecard information. \r\n* The actual pay dates may vary depending on when the Payroll Admin processes payroll. \r\n* This endpoint can be used to retrieve parameters for GET Employee Pay Stubs, although 'GET Legal Entity Paydata' would be more accurate for that. \r\n"
    },
    {
      "name": "Legal Entity Activity Types",
      "description": "This API allows working with Activity Types"
    },
    {
      "name": "Legal Entity Schedule Groups"
    },
    {
      "name": "Legal Entity Services",
      "description": "\r\nLegal Entity Services are optional products and offerings that the entity may choose to subscribe. \r\n* Calling certain Public APIs will require the Legal Entity to have a certain Service. \r\n"
    },
    {
      "name": "Legal Entity Status Reason"
    },
    {
      "name": " Legal Entity Taxes",
      "description": "For more information, see documentation section titled 'Earnings, Deductions, and Taxes.'"
    },
    {
      "name": "Legal Entity Time Data",
      "description": "\r\nThese APIs interact with Paycor's Perform Time system. \r\n* And will only work with 'Perform Time' service/product enabled clients - otherwise you will receive an error.\r\n"
    },
    {
      "name": "Legal Entity Time Off Types"
    },
    {
      "name": "Legal Entity Work Locations",
      "description": "Legal entity work locations information."
    },
    {
      "name": "Legal Entity Work Sites"
    }
  ]
}